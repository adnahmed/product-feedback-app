diff --git a/node_modules/tailwindest/dist/index.d.ts b/node_modules/tailwindest/dist/index.d.ts
index e580657..4ab3599 100644
--- a/node_modules/tailwindest/dist/index.d.ts
+++ b/node_modules/tailwindest/dist/index.d.ts
@@ -19,10 +19,31 @@ type Falsy = "false";
  * // 'Error: typeof variants key should be <string> | <number> | <'true' | 'false'>'
  * ```
  */
-type GetVariantsKey<VariantsKey> = VariantsKey extends string | number ? VariantsKey extends Truthy ? VariantsKey extends Falsy ? boolean : true : VariantsKey extends Falsy ? false : VariantsKey : "Error: typeof variants key should be <string> | <number> | <'true' | 'false'>";
+type GetVariantsKey<VariantsKey> = VariantsKey extends string | number
+  ? VariantsKey extends Truthy
+    ? VariantsKey extends Falsy
+      ? boolean
+      : true
+    : VariantsKey extends Falsy
+      ? false
+      : VariantsKey
+  : "Error: typeof variants key should be <string> | <number> | <'true' | 'false'>";
 type UndefinableString = string | undefined;
 
 interface StyleGeneratorStyle<StyleType> {
+  /**
+   * @description Get className `string`
+   */
+  class: string;
+  /**
+   * @description Get styleSheet `object`
+   */
+  style: StyleType;
+  /**
+   * @description Compose styleSheets into `base` styleSheet
+   * @param styles Compose target styleSheets
+   */
+  compose: (...styles: StyleType[]) => {
     /**
      * @description Get className `string`
      */
@@ -31,22 +52,24 @@ interface StyleGeneratorStyle<StyleType> {
      * @description Get styleSheet `object`
      */
     style: StyleType;
-    /**
-     * @description Compose styleSheets into `base` styleSheet
-     * @param styles Compose target styleSheets
-     */
-    compose: (...styles: StyleType[]) => {
-        /**
-         * @description Get className `string`
-         */
-        class: string;
-        /**
-         * @description Get styleSheet `object`
-         */
-        style: StyleType;
-    };
+  };
 }
 interface StyleGeneratorToggle<StyleType> {
+  /**
+   * @param toggleCondition Toggling condition, `true` | `false`
+   * @description Get toggled className `string`
+   */
+  class: (toggleCondition: boolean) => string;
+  /**
+   * @param toggleCondition Toggling condition, `true` | `false`
+   * @description Get toggled styleSheet `object`
+   */
+  style: (toggleCondition: boolean) => StyleType;
+  /**
+   * @description Compose styleSheets into `base` styleSheet
+   * @param styles Compose target styleSheets
+   */
+  compose: (...styles: StyleType[]) => {
     /**
      * @param toggleCondition Toggling condition, `true` | `false`
      * @description Get toggled className `string`
@@ -57,24 +80,24 @@ interface StyleGeneratorToggle<StyleType> {
      * @description Get toggled styleSheet `object`
      */
     style: (toggleCondition: boolean) => StyleType;
-    /**
-     * @description Compose styleSheets into `base` styleSheet
-     * @param styles Compose target styleSheets
-     */
-    compose: (...styles: StyleType[]) => {
-        /**
-         * @param toggleCondition Toggling condition, `true` | `false`
-         * @description Get toggled className `string`
-         */
-        class: (toggleCondition: boolean) => string;
-        /**
-         * @param toggleCondition Toggling condition, `true` | `false`
-         * @description Get toggled styleSheet `object`
-         */
-        style: (toggleCondition: boolean) => StyleType;
-    };
+  };
 }
 interface StyleGeneratorRotary<StyleType, RotaryVariant> {
+  /**
+   * @description Get rotary variant className `string`
+   * @param variant Key of rotary variant
+   */
+  class: (variant: RotaryVariant) => string;
+  /**
+   * @description Get rotary variant styleSheet `object`
+   * @param variant Key of rotary variant
+   */
+  style: (variant: RotaryVariant) => StyleType;
+  /**
+   * @description Compose styleSheets into `base` styleSheet
+   * @param styles Compose target styleSheets
+   */
+  compose: (...styles: StyleType[]) => {
     /**
      * @description Get rotary variant className `string`
      * @param variant Key of rotary variant
@@ -85,24 +108,24 @@ interface StyleGeneratorRotary<StyleType, RotaryVariant> {
      * @param variant Key of rotary variant
      */
     style: (variant: RotaryVariant) => StyleType;
-    /**
-     * @description Compose styleSheets into `base` styleSheet
-     * @param styles Compose target styleSheets
-     */
-    compose: (...styles: StyleType[]) => {
-        /**
-         * @description Get rotary variant className `string`
-         * @param variant Key of rotary variant
-         */
-        class: (variant: RotaryVariant) => string;
-        /**
-         * @description Get rotary variant styleSheet `object`
-         * @param variant Key of rotary variant
-         */
-        style: (variant: RotaryVariant) => StyleType;
-    };
+  };
 }
 interface StyleGeneratorVariants<StyleType, VariantOption> {
+  /**
+   * @description Get variant className `string`
+   * @param variant Variant option `object`
+   */
+  class: (variantOption: VariantOption) => string;
+  /**
+   * @description Get variant styleSheet `object`
+   * @param variant Variant option `object`
+   */
+  style: (variantOption: VariantOption) => StyleType;
+  /**
+   * @description Compose styleSheets into `base` styleSheet
+   * @param styles Compose target styleSheets
+   */
+  compose: (...styles: StyleType[]) => {
     /**
      * @description Get variant className `string`
      * @param variant Variant option `object`
@@ -113,22 +136,7 @@ interface StyleGeneratorVariants<StyleType, VariantOption> {
      * @param variant Variant option `object`
      */
     style: (variantOption: VariantOption) => StyleType;
-    /**
-     * @description Compose styleSheets into `base` styleSheet
-     * @param styles Compose target styleSheets
-     */
-    compose: (...styles: StyleType[]) => {
-        /**
-         * @description Get variant className `string`
-         * @param variant Variant option `object`
-         */
-        class: (variantOption: VariantOption) => string;
-        /**
-         * @description Get variant styleSheet `object`
-         * @param variant Variant option `object`
-         */
-        style: (variantOption: VariantOption) => StyleType;
-    };
+  };
 }
 
 /**
@@ -148,175 +156,198 @@ interface StyleGeneratorVariants<StyleType, VariantOption> {
  * ```
  */
 declare const createTools: <StyleType>() => {
-    /**
-     * @description Create `tailwind` style
-     * @example
-     * ```tsx
-     * // Define tailwind style
-     * const box = tw.style({
-     *      display: "flex",
-     *      alignItems: "items-center",
-     *      justifyContent: "justify-center",
-     * })
-     *
-     * // Use it in component
-     * const Box = ({ children }) => {
-     *      return <div className={box.class}>{children}</div>
-     * }
-     * ```
-     */
-    style: (style: StyleType) => StyleGeneratorStyle<StyleType>;
-    /**
-     * @description Create `toggle` style function
-     * @example
-     * ```tsx
-     * // Define toggle style
-     * const themeBtn = tw.toggle({
-     *      truthy: {}, // 🌝 light mode
-     *      falsy: {}, // 🌚 dark mode
-     *      base: {}, // [optional] base style
-     * })
-     *
-     * // Use it in component
-     * const ThemeBtn = ({
-     *      children,
-     * }) => {
-     *      const [isLight, setIsLight] = useState(false)
-     *      return (
-     *          <button
-     *              className={themeBtn.class(isLight)}
-     *          >
-     *              {children}
-     *          </button>
-     *      )
-     * }
-     * ```
-     */
-    toggle: (toggleVariants: {
-        truthy: StyleType;
-        falsy: StyleType;
-        base?: StyleType;
-    }) => StyleGeneratorToggle<StyleType>;
-    /**
-     * @description Create `rotary` style function
-     * @example
-     * ```tsx
-     * // Define rotary style
-     * const btnType = tw.rotary({
-     *      default: {},
-     *      success: {},
-     *      warning: {},
-     *      base: {}, // [optional] base style
-     * })
-     *
-     * // Get rotary type with GetVariants
-     * interface BtnProps {
-     *      onClick: () => void
-     *      children: ReactNode
-     *      type?: GetVariants<typeof btnType>
-     * }
-     *
-     * // Use it in component
-     * const Btn = ({
-     *      onClick,
-     *      children,
-     *      type = "default",
-     * }: BtnProps) => (
-     *      <button
-     *          className={btn.class(type)}
-     *          onClick={onClick}
-     *      >
-     *          {children}
-     *      </button>
-     * )
-     * ```
-     */
-    rotary: <VariantsStylesType extends { [key in keyof VariantsStylesType]: StyleType; }>({ base, ...styles }: { [key_1 in keyof VariantsStylesType]: StyleType; } & {
-        base?: StyleType;
-    }) => StyleGeneratorRotary<StyleType, GetVariantsKey<Exclude<keyof VariantsStylesType, "base">>>;
-    /**
-     * @description Create `variants` style function. `variants` are combination of rotary switch.
-     * @example
-     * ```tsx
-     * // Define variants style
-     * const btn = tw.variants({
-     *      variants: {
-     *          type: {
-     *              default: {},
-     *              success: {},
-     *              warning: {},
-     *          },
-     *          size: {
-     *              sm: {},
-     *              md: {},
-     *              lg: {},
-     *          },
-     *          light: {
-     *              true: {}, // truthy boolean
-     *              false: {}, // falsy boolean
-     *          }
-     *      },
-     *      base: {}, // [optional] base style
-     * })
-     *
-     * // Get variants type with GetVariants
-     * interface BtnProps extends GetVariants<typeof btn> {
-     *      onClick: () => void
-     *      children: ReactNode
-     * }
-     *
-     * // Use it in component
-     * const Btn = ({
-     *      children,
-     *      size = "md",
-     *      type = "default",
-     *      light = false,
-     *      onClick,
-     * }: BtnProps) => (
-     *      <button
-     *          className={btn.class({ size, type, light })}
-     *          onClick={onClick}
-     *      >
-     *          {children}
-     *      </button>
-     * )
-     * ```
-     */
-    variants: <Variants>({ base, variants, }: {
-        variants: { [VariantsKey in keyof Variants]: Record<keyof Variants[VariantsKey], StyleType>; };
-    } & {
-        base?: StyleType;
-    }) => StyleGeneratorVariants<StyleType, { [VariantsKey_1 in keyof Variants]: GetVariantsKey<keyof Variants[VariantsKey_1]>; }>;
-    /**
-     * @description Override style property
-     * @returns Merged className `string`
-     * @example
-     * ```tsx
-     * // Add specific style props
-     * const Text = ({
-     *      children,
-     *      ...option
-     * }: PropsWithChildren<Pick<Tailwindest, "color" | "fontWeight">>) => {
-     *    return (
-     *        <p
-     *            className={mergeProps(
-     *                {
-     *                    // base style
-     *                    color: "text-gray-950",
-     *                    fontWeight: "font-bold",
-     *                    fontSize: "text-base",
-     *                },
-     *                // override color and fontWeight
-     *                option
-     *            )}
-     *        >
-     *            {children}
-     *        </p>
-     *    )
-     * }
-     * ```
-     */
-    mergeProps: (baseStyle: StyleType, styleProps: StyleType) => string;
+  /**
+   * @description Create `tailwind` style
+   * @example
+   * ```tsx
+   * // Define tailwind style
+   * const box = tw.style({
+   *      display: "flex",
+   *      alignItems: "items-center",
+   *      justifyContent: "justify-center",
+   * })
+   *
+   * // Use it in component
+   * const Box = ({ children }) => {
+   *      return <div className={box.class}>{children}</div>
+   * }
+   * ```
+   */
+  style: (style: StyleType) => StyleGeneratorStyle<StyleType>;
+  /**
+   * @description Create `toggle` style function
+   * @example
+   * ```tsx
+   * // Define toggle style
+   * const themeBtn = tw.toggle({
+   *      truthy: {}, // 🌝 light mode
+   *      falsy: {}, // 🌚 dark mode
+   *      base: {}, // [optional] base style
+   * })
+   *
+   * // Use it in component
+   * const ThemeBtn = ({
+   *      children,
+   * }) => {
+   *      const [isLight, setIsLight] = useState(false)
+   *      return (
+   *          <button
+   *              className={themeBtn.class(isLight)}
+   *          >
+   *              {children}
+   *          </button>
+   *      )
+   * }
+   * ```
+   */
+  toggle: (toggleVariants: {
+    truthy: StyleType;
+    falsy: StyleType;
+    base?: StyleType;
+  }) => StyleGeneratorToggle<StyleType>;
+  /**
+   * @description Create `rotary` style function
+   * @example
+   * ```tsx
+   * // Define rotary style
+   * const btnType = tw.rotary({
+   *      default: {},
+   *      success: {},
+   *      warning: {},
+   *      base: {}, // [optional] base style
+   * })
+   *
+   * // Get rotary type with GetVariants
+   * interface BtnProps {
+   *      onClick: () => void
+   *      children: ReactNode
+   *      type?: GetVariants<typeof btnType>
+   * }
+   *
+   * // Use it in component
+   * const Btn = ({
+   *      onClick,
+   *      children,
+   *      type = "default",
+   * }: BtnProps) => (
+   *      <button
+   *          className={btn.class(type)}
+   *          onClick={onClick}
+   *      >
+   *          {children}
+   *      </button>
+   * )
+   * ```
+   */
+  rotary: <
+    VariantsStylesType extends { [key in keyof VariantsStylesType]: StyleType },
+  >({
+    base,
+    ...styles
+  }: { [key_1 in keyof VariantsStylesType]: StyleType } & {
+    base?: StyleType;
+  }) => StyleGeneratorRotary<
+    StyleType,
+    GetVariantsKey<Exclude<keyof VariantsStylesType, "base">>
+  >;
+  /**
+   * @description Create `variants` style function. `variants` are combination of rotary switch.
+   * @example
+   * ```tsx
+   * // Define variants style
+   * const btn = tw.variants({
+   *      variants: {
+   *          type: {
+   *              default: {},
+   *              success: {},
+   *              warning: {},
+   *          },
+   *          size: {
+   *              sm: {},
+   *              md: {},
+   *              lg: {},
+   *          },
+   *          light: {
+   *              true: {}, // truthy boolean
+   *              false: {}, // falsy boolean
+   *          }
+   *      },
+   *      base: {}, // [optional] base style
+   * })
+   *
+   * // Get variants type with GetVariants
+   * interface BtnProps extends GetVariants<typeof btn> {
+   *      onClick: () => void
+   *      children: ReactNode
+   * }
+   *
+   * // Use it in component
+   * const Btn = ({
+   *      children,
+   *      size = "md",
+   *      type = "default",
+   *      light = false,
+   *      onClick,
+   * }: BtnProps) => (
+   *      <button
+   *          className={btn.class({ size, type, light })}
+   *          onClick={onClick}
+   *      >
+   *          {children}
+   *      </button>
+   * )
+   * ```
+   */
+  variants: <Variants>({
+    base,
+    variants,
+  }: {
+    variants: {
+      [VariantsKey in keyof Variants]: Record<
+        keyof Variants[VariantsKey],
+        StyleType
+      >;
+    };
+  } & {
+    base?: StyleType;
+  }) => StyleGeneratorVariants<
+    StyleType,
+    {
+      [VariantsKey_1 in keyof Variants]: GetVariantsKey<
+        keyof Variants[VariantsKey_1]
+      >;
+    }
+  >;
+  /**
+   * @description Override style property
+   * @returns Merged className `string`
+   * @example
+   * ```tsx
+   * // Add specific style props
+   * const Text = ({
+   *      children,
+   *      ...option
+   * }: PropsWithChildren<Pick<Tailwindest, "color" | "fontWeight">>) => {
+   *    return (
+   *        <p
+   *            className={mergeProps(
+   *                {
+   *                    // base style
+   *                    color: "text-gray-950",
+   *                    fontWeight: "font-bold",
+   *                    fontSize: "text-base",
+   *                },
+   *                // override color and fontWeight
+   *                option
+   *            )}
+   *        >
+   *            {children}
+   *        </p>
+   *    )
+   * }
+   * ```
+   */
+  mergeProps: (baseStyle: StyleType, styleProps: StyleType) => string;
 };
 
 /**
@@ -367,31 +398,122 @@ declare const createTools: <StyleType>() => {
  * ```
  */
 type GetVariants<TypeofVariants> = TypeofVariants extends {
-    class: (variants: infer Variants) => unknown;
-} ? Variants extends string ? Variants : Partial<Variants> : never;
-
-type TailwindBreakConditions = "contrast-more" | "contrast-less" | "motion-reduce" | "motion-safe" | "portrait" | "landscape" | "print" | "rtl" | "ltr" | "forced-colors" | "sm" | "md" | "lg" | "xl" | "2xl" | "max-sm" | "max-md" | "max-lg" | "max-xl" | "max-2xl" | "aria-checked" | "aria-disabled" | "aria-expanded" | "aria-hidden" | "aria-pressed" | "aria-readonly" | "aria-required" | "aria-selected" | "dark";
+  class: (variants: infer Variants) => unknown;
+}
+  ? Variants extends string
+    ? Variants
+    : Partial<Variants>
+  : never;
+
+type TailwindBreakConditions =
+  | "contrast-more"
+  | "contrast-less"
+  | "motion-reduce"
+  | "motion-safe"
+  | "portrait"
+  | "landscape"
+  | "print"
+  | "rtl"
+  | "ltr"
+  | "forced-colors"
+  | "sm"
+  | "md"
+  | "lg"
+  | "xl"
+  | "2xl"
+  | "max-sm"
+  | "max-md"
+  | "max-lg"
+  | "max-xl"
+  | "max-2xl"
+  | "aria-checked"
+  | "aria-disabled"
+  | "aria-expanded"
+  | "aria-hidden"
+  | "aria-pressed"
+  | "aria-readonly"
+  | "aria-required"
+  | "aria-selected"
+  | "dark";
 
 type TailwindGlobalConditions = "*";
 
-type TailwindPseudoClassConditions = "hover" | "active" | "first" | "last" | "only" | "odd" | "even" | "first-of-type" | "last-of-type" | "only-of-type" | "empty" | "enabled" | "indeterminate" | "default" | "required" | "valid" | "invalid" | "in-range" | "out-of-range" | "placeholder-shown" | "autofill" | "read-only" | "checked" | "disabled" | "visited" | "target" | "focus" | "focus-within" | "focus-visible" | "optional";
-
-type TailwindPseudoElementConditions = "before" | "after" | "placeholder" | "file" | "marker" | "backdrop" | "selection" | "first-line" | "first-letter";
-
-type Literalize<Literal> = Literal extends string ? string extends Literal ? never : Literal : never;
+type TailwindPseudoClassConditions =
+  | "hover"
+  | "active"
+  | "first"
+  | "last"
+  | "only"
+  | "odd"
+  | "even"
+  | "first-of-type"
+  | "last-of-type"
+  | "only-of-type"
+  | "empty"
+  | "enabled"
+  | "indeterminate"
+  | "default"
+  | "required"
+  | "valid"
+  | "invalid"
+  | "in-range"
+  | "out-of-range"
+  | "placeholder-shown"
+  | "autofill"
+  | "read-only"
+  | "checked"
+  | "disabled"
+  | "visited"
+  | "target"
+  | "focus"
+  | "focus-within"
+  | "focus-visible"
+  | "optional";
+
+type TailwindPseudoElementConditions =
+  | "before"
+  | "after"
+  | "placeholder"
+  | "file"
+  | "marker"
+  | "backdrop"
+  | "selection"
+  | "first-line"
+  | "first-letter";
+
+type Literalize<Literal> = Literal extends string
+  ? string extends Literal
+    ? never
+    : Literal
+  : never;
 type RecordWithPartial<Key extends string, Value> = {
-    [P in Key]?: Value;
+  [P in Key]?: Value;
 };
 type PlugBase = string | undefined;
 type Pluggable<Plug> = Literalize<Exclude<Plug, "">>;
-type PluginOption<OptionKey extends string, OptionValueType = string> = RecordWithPartial<OptionKey, OptionValueType>;
-type PluginVariants<Title extends string, Value extends string> = `${Title}-${Value}`;
-type PluginVariantsWithDirection<Title extends string, Value extends string> = PluginVariants<Title | `-${Title}`, Value>;
-type ToPlugin<Value extends string, Plug extends PlugBase = ""> = Value | Pluggable<Plug>;
-type ToPluginWithTitle<Title extends string, Value extends string, Plug extends PlugBase = ""> = PluginVariants<Title, ToPlugin<Value, Plug>>;
+type PluginOption<
+  OptionKey extends string,
+  OptionValueType = string,
+> = RecordWithPartial<OptionKey, OptionValueType>;
+type PluginVariants<
+  Title extends string,
+  Value extends string,
+> = `${Title}-${Value}`;
+type PluginVariantsWithDirection<
+  Title extends string,
+  Value extends string,
+> = PluginVariants<Title | `-${Title}`, Value>;
+type ToPlugin<Value extends string, Plug extends PlugBase = ""> =
+  | Value
+  | Pluggable<Plug>;
+type ToPluginWithTitle<
+  Title extends string,
+  Value extends string,
+  Plug extends PlugBase = "",
+> = PluginVariants<Title, ToPlugin<Value, Plug>>;
 
 type TailwindNestConditionIdentifierOption = {
-    /**
+  /**
      * @description break condition identifier
      * @example break condition list
      * ```ts
@@ -426,8 +548,8 @@ type TailwindNestConditionIdentifierOption = {
             | "dark"
      * ```
      */
-    breakIdentifier: string;
-    /**
+  breakIdentifier: string;
+  /**
      * @description pseudo class condition identifier
      * @example pseudo class condition list
      * ```ts
@@ -464,8 +586,8 @@ type TailwindNestConditionIdentifierOption = {
             | "optional"
      * ```
      */
-    pseudoClassIdentifier: string;
-    /**
+  pseudoClassIdentifier: string;
+  /**
      * @description pseudo element condition identifier
      * @example pseudo element condition list
      * ```ts
@@ -482,15 +604,24 @@ type TailwindNestConditionIdentifierOption = {
 
      * ```
      */
-    pseudoElementIdentifier: string;
+  pseudoElementIdentifier: string;
 };
 type TailwindestNestConditions = {
-    break: string;
-    pseudoClass: string;
-    pseudoElement: string;
-};
-type GetTailwindestBaseNestKeys<IdentifierOption extends TailwindNestConditionIdentifierOption, NestConditions extends TailwindestNestConditions> = `${IdentifierOption["breakIdentifier"]}${NestConditions["break"]}` | `${IdentifierOption["pseudoClassIdentifier"]}${NestConditions["pseudoClass"]}` | `${IdentifierOption["pseudoElementIdentifier"]}${NestConditions["pseudoElement"]}`;
-type GetTailwindestCustomScreenKeys<IdentifierOption extends TailwindNestConditionIdentifierOption, PluginOptions extends TailwindestNestPluginOptions> = `${IdentifierOption["breakIdentifier"]}${Pluggable<PluginOptions["screens"]>}`;
+  break: string;
+  pseudoClass: string;
+  pseudoElement: string;
+};
+type GetTailwindestBaseNestKeys<
+  IdentifierOption extends TailwindNestConditionIdentifierOption,
+  NestConditions extends TailwindestNestConditions,
+> =
+  | `${IdentifierOption["breakIdentifier"]}${NestConditions["break"]}`
+  | `${IdentifierOption["pseudoClassIdentifier"]}${NestConditions["pseudoClass"]}`
+  | `${IdentifierOption["pseudoElementIdentifier"]}${NestConditions["pseudoElement"]}`;
+type GetTailwindestCustomScreenKeys<
+  IdentifierOption extends TailwindNestConditionIdentifierOption,
+  PluginOptions extends TailwindestNestPluginOptions,
+> = `${IdentifierOption["breakIdentifier"]}${Pluggable<PluginOptions["screens"]>}`;
 /**
  * @description aria prefix of custom properties
  * @example
@@ -500,500 +631,1056 @@ type GetTailwindestCustomScreenKeys<IdentifierOption extends TailwindNestConditi
  * ```
  */
 type ARIA_PREFIX = "aria-";
-type GetTailwindestCustomAriaKeys<IdentifierOption extends TailwindNestConditionIdentifierOption, PluginOptions extends TailwindestNestPluginOptions> = `${IdentifierOption["breakIdentifier"]}${ARIA_PREFIX}${Pluggable<PluginOptions["aria"]>}`;
+type GetTailwindestCustomAriaKeys<
+  IdentifierOption extends TailwindNestConditionIdentifierOption,
+  PluginOptions extends TailwindestNestPluginOptions,
+> = `${IdentifierOption["breakIdentifier"]}${ARIA_PREFIX}${Pluggable<PluginOptions["aria"]>}`;
 type TailwindestNestPluginOptions = {
-    screens: UndefinableString;
-    aria: UndefinableString;
-};
-type TailwindestNestKeys<IdentifierOption extends TailwindNestConditionIdentifierOption, PluginOptions extends TailwindestNestPluginOptions> = TailwindGlobalConditions | GetTailwindestBaseNestKeys<IdentifierOption, {
-    break: TailwindBreakConditions;
-    pseudoClass: TailwindPseudoClassConditions;
-    pseudoElement: TailwindPseudoElementConditions;
-}> | GetTailwindestCustomScreenKeys<IdentifierOption, PluginOptions> | GetTailwindestCustomAriaKeys<IdentifierOption, PluginOptions>;
+  screens: UndefinableString;
+  aria: UndefinableString;
+};
+type TailwindestNestKeys<
+  IdentifierOption extends TailwindNestConditionIdentifierOption,
+  PluginOptions extends TailwindestNestPluginOptions,
+> =
+  | TailwindGlobalConditions
+  | GetTailwindestBaseNestKeys<
+      IdentifierOption,
+      {
+        break: TailwindBreakConditions;
+        pseudoClass: TailwindPseudoClassConditions;
+        pseudoElement: TailwindPseudoElementConditions;
+      }
+    >
+  | GetTailwindestCustomScreenKeys<IdentifierOption, PluginOptions>
+  | GetTailwindestCustomAriaKeys<IdentifierOption, PluginOptions>;
 
 type TailwindForcedColorAdjust = "auto" | "none";
 type TailwindForcedColorAdjustType = {
-    /**
-     *@description Utilities for opting in and out of forced colors.
-     *@see {@link https://tailwindcss.com/docs/forced-color-adjust forced color adjust}
-     */
-    forcedColorAdjust: `forced-color-adjust-${TailwindForcedColorAdjust}`;
+  /**
+   *@description Utilities for opting in and out of forced colors.
+   *@see {@link https://tailwindcss.com/docs/forced-color-adjust forced color adjust}
+   */
+  forcedColorAdjust: `forced-color-adjust-${TailwindForcedColorAdjust}`;
 };
 
 type TailwindScreenReaders = "sr-only" | "not-sr-only";
 type TailwindScreenReadersType = {
-    /**
-     *@description Utilities for improving accessibility with screen readers.
-     *@see {@link https://tailwindcss.com/docs/screen-readers screen readers}
-     */
-    screenReaders: TailwindScreenReaders;
+  /**
+   *@description Utilities for improving accessibility with screen readers.
+   *@see {@link https://tailwindcss.com/docs/screen-readers screen readers}
+   */
+  screenReaders: TailwindScreenReaders;
 };
 
-interface TailwindAccessibility extends TailwindScreenReadersType, TailwindForcedColorAdjustType {
-}
+interface TailwindAccessibility
+  extends TailwindScreenReadersType,
+    TailwindForcedColorAdjustType {}
 
 type TailwindBackgroundAttachmentVariants$1 = "fixed" | "local" | "scroll";
-type TailwindBackgroundAttachment$1 = `bg-${TailwindBackgroundAttachmentVariants$1}`;
+type TailwindBackgroundAttachment$1 =
+  `bg-${TailwindBackgroundAttachmentVariants$1}`;
 type TailwindBackgroundAttachmentType = {
-    /**
-     *@description Utilities for controlling how a background image behaves when scrolling.
-     *@see {@link https://tailwindcss.com/docs/background-attachment background attachment}
-     */
-    backgroundAttachment: TailwindBackgroundAttachment$1;
-};
-
-type TailwindBackgroundClipVariants$1 = "border" | "padding" | "content" | "text";
+  /**
+   *@description Utilities for controlling how a background image behaves when scrolling.
+   *@see {@link https://tailwindcss.com/docs/background-attachment background attachment}
+   */
+  backgroundAttachment: TailwindBackgroundAttachment$1;
+};
+
+type TailwindBackgroundClipVariants$1 =
+  | "border"
+  | "padding"
+  | "content"
+  | "text";
 type TailwindBackgroundClip$1 = `bg-clip-${TailwindBackgroundClipVariants$1}`;
 type TailwindBackgroundClipType = {
-    /**
-     *@description Utilities for controlling the bounding box of an element's background.
-     *@see {@link https://tailwindcss.com/docs/background-clip background clip}
-     */
-    backgroundClip: TailwindBackgroundClip$1;
+  /**
+   *@description Utilities for controlling the bounding box of an element's background.
+   *@see {@link https://tailwindcss.com/docs/background-clip background clip}
+   */
+  backgroundClip: TailwindBackgroundClip$1;
 };
 
-type TailwindBackgroundColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling an element's background color.
-     *@see {@link https://tailwindcss.com/docs/background-color background color}
-     */
-    backgroundColor: `bg-${TailwindColor | Pluggable<Plug>}`;
+type TailwindBackgroundColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling an element's background color.
+   *@see {@link https://tailwindcss.com/docs/background-color background color}
+   */
+  backgroundColor: `bg-${TailwindColor | Pluggable<Plug>}`;
 };
 
 type TailwindBackgroundOriginVariants$1 = "border" | "padding" | "content";
-type TailwindBackgroundOrigin$1 = `bg-origin-${TailwindBackgroundOriginVariants$1}`;
+type TailwindBackgroundOrigin$1 =
+  `bg-origin-${TailwindBackgroundOriginVariants$1}`;
 type TailwindBackgroundOriginType = {
-    /**
-     *@description Utilities for controlling how an element's background is positioned relative to borders, padding, and content.
-     *@see {@link https://tailwindcss.com/docs/background-origin background origin}
-     */
-    backgroundOrigin: TailwindBackgroundOrigin$1;
+  /**
+   *@description Utilities for controlling how an element's background is positioned relative to borders, padding, and content.
+   *@see {@link https://tailwindcss.com/docs/background-origin background origin}
+   */
+  backgroundOrigin: TailwindBackgroundOrigin$1;
 };
 
 type TailwindArbitrary = `[${string}]`;
 
-type TailwindBackgroundPositionVariants$1<Plug extends PlugBase = ""> = "bottom" | "top" | "center" | "left" | "left-bottom" | "left-top" | "right" | "right-bottom" | "right-top" | TailwindArbitrary | Pluggable<Plug>;
-type TailwindBackgroundPosition$1<Plug extends PlugBase = ""> = `bg-${TailwindBackgroundPositionVariants$1<Plug>}`;
+type TailwindBackgroundPositionVariants$1<Plug extends PlugBase = ""> =
+  | "bottom"
+  | "top"
+  | "center"
+  | "left"
+  | "left-bottom"
+  | "left-top"
+  | "right"
+  | "right-bottom"
+  | "right-top"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
+type TailwindBackgroundPosition$1<Plug extends PlugBase = ""> =
+  `bg-${TailwindBackgroundPositionVariants$1<Plug>}`;
 type TailwindBackgroundPositionType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the position of an element's background image.
-     *@see {@link https://tailwindcss.com/docs/background-position background position}
-     */
-    backgroundPosition: TailwindBackgroundPosition$1<Plug>;
+  /**
+   *@description Utilities for controlling the position of an element's background image.
+   *@see {@link https://tailwindcss.com/docs/background-position background position}
+   */
+  backgroundPosition: TailwindBackgroundPosition$1<Plug>;
 };
 
 type TailwindBackgroundRepeatVariants$1 = "x" | "y" | "round" | "space";
-type TailwindBackgroundRepeat$1 = "bg-repeat" | "bg-no-repeat" | `bg-repeat-${TailwindBackgroundRepeatVariants$1}`;
+type TailwindBackgroundRepeat$1 =
+  | "bg-repeat"
+  | "bg-no-repeat"
+  | `bg-repeat-${TailwindBackgroundRepeatVariants$1}`;
 type TailwindBackgroundRepeatType = {
-    /**
-     *@description Utilities for controlling the repetition of an element's background image.
-     *@see {@link https://tailwindcss.com/docs/background-repeat background repeat}
-     */
-    backgroundRepeat: TailwindBackgroundRepeat$1;
-};
-
-type TailwindBackgroundSizeVariants$1<Plug extends PlugBase = ""> = "auto" | "cover" | "contain" | TailwindArbitrary | Pluggable<Plug>;
-type TailwindBackgroundSize$1<Plug extends PlugBase = ""> = `bg-${TailwindBackgroundSizeVariants$1<Plug>}`;
+  /**
+   *@description Utilities for controlling the repetition of an element's background image.
+   *@see {@link https://tailwindcss.com/docs/background-repeat background repeat}
+   */
+  backgroundRepeat: TailwindBackgroundRepeat$1;
+};
+
+type TailwindBackgroundSizeVariants$1<Plug extends PlugBase = ""> =
+  | "auto"
+  | "cover"
+  | "contain"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
+type TailwindBackgroundSize$1<Plug extends PlugBase = ""> =
+  `bg-${TailwindBackgroundSizeVariants$1<Plug>}`;
 type TailwindBackgroundSizeType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the background size of an element's background image.
-     *@see {@link https://tailwindcss.com/docs/background-size background size}
-     */
-    backgroundSize: TailwindBackgroundSize$1<Plug>;
-};
-
-type TailwindGradientVariants<Plug extends PlugBase = ""> = "t" | "tr" | "r" | "br" | "b" | "bl" | "l" | "tl" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindGradient<Plug extends PlugBase = ""> = "bg-none" | `bg-gradient-to-${TailwindGradientVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the background size of an element's background image.
+   *@see {@link https://tailwindcss.com/docs/background-size background size}
+   */
+  backgroundSize: TailwindBackgroundSize$1<Plug>;
+};
+
+type TailwindGradientVariants<Plug extends PlugBase = ""> =
+  | "t"
+  | "tr"
+  | "r"
+  | "br"
+  | "b"
+  | "bl"
+  | "l"
+  | "tl"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindGradient<Plug extends PlugBase = ""> =
+  | "bg-none"
+  | `bg-gradient-to-${TailwindGradientVariants<Plug>}`;
 type TailwindBackgroundImageType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling an element's gradient background image.
-     *@see {@link https://tailwindcss.com/docs/background-image gradient}
-     */
-    gradient: TailwindGradient<Plug>;
-};
-
-type GradientPosition = "0%" | "5%" | "10%" | "15%" | "20%" | "25%" | "30%" | "35%" | "40%" | "45%" | "50%" | "55%" | "60%" | "65%" | "70%" | "75%" | "80%" | "85%" | "90%" | "95%" | "100%";
+  /**
+   *@description Utilities for controlling an element's gradient background image.
+   *@see {@link https://tailwindcss.com/docs/background-image gradient}
+   */
+  gradient: TailwindGradient<Plug>;
+};
+
+type GradientPosition =
+  | "0%"
+  | "5%"
+  | "10%"
+  | "15%"
+  | "20%"
+  | "25%"
+  | "30%"
+  | "35%"
+  | "40%"
+  | "45%"
+  | "50%"
+  | "55%"
+  | "60%"
+  | "65%"
+  | "70%"
+  | "75%"
+  | "80%"
+  | "85%"
+  | "90%"
+  | "95%"
+  | "100%";
 type TailwindGradientColorStopsType<GradientColor extends string> = {
-    /**
-     *@description Utilities for controlling the color stops in gradient background image.
-     *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color start}
-     */
-    gradientStart: PluginVariants<"from", GradientColor>;
-    /**
-     *@description Utilities for controlling the color stops in gradient background image.
-     *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color middle}
-     */
-    gradientMiddle: PluginVariants<"via", GradientColor>;
-    /**
-     *@description Utilities for controlling the color stops in gradient background image.
-     *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color end}
-     */
-    gradientEnd: PluginVariants<"to", GradientColor>;
-    /**
-     *@description Utilities for controlling the color stops position in gradient background image.
-     *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color start position}
-     */
-    gradientStartPosition: PluginVariants<"from", GradientPosition>;
-    /**
-     *@description Utilities for controlling the color stops position in gradient background image.
-     *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color middle position}
-     */
-    gradientMiddlePosition: PluginVariants<"via", GradientPosition>;
-    /**
-     *@description Utilities for controlling the color stops position in gradient background image.
-     *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color end position}
-     */
-    gradientEndPosition: PluginVariants<"to", GradientPosition>;
+  /**
+   *@description Utilities for controlling the color stops in gradient background image.
+   *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color start}
+   */
+  gradientStart: PluginVariants<"from", GradientColor>;
+  /**
+   *@description Utilities for controlling the color stops in gradient background image.
+   *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color middle}
+   */
+  gradientMiddle: PluginVariants<"via", GradientColor>;
+  /**
+   *@description Utilities for controlling the color stops in gradient background image.
+   *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color end}
+   */
+  gradientEnd: PluginVariants<"to", GradientColor>;
+  /**
+   *@description Utilities for controlling the color stops position in gradient background image.
+   *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color start position}
+   */
+  gradientStartPosition: PluginVariants<"from", GradientPosition>;
+  /**
+   *@description Utilities for controlling the color stops position in gradient background image.
+   *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color middle position}
+   */
+  gradientMiddlePosition: PluginVariants<"via", GradientPosition>;
+  /**
+   *@description Utilities for controlling the color stops position in gradient background image.
+   *@see {@link https://tailwindcss.com/docs/gradient-color-stops gradient color end position}
+   */
+  gradientEndPosition: PluginVariants<"to", GradientPosition>;
 };
 
 interface TailwindBackgroundPlug {
-    backgroundSize?: string;
-    backgroundColor?: string;
-    backgroundImage?: string;
-    backgroundPosition?: string;
-    gradientColorStops?: string;
+  backgroundSize?: string;
+  backgroundColor?: string;
+  backgroundImage?: string;
+  backgroundPosition?: string;
+  gradientColorStops?: string;
 }
-interface TailwindBackgrounds<TailwindColor extends string, BackgroundsPlug extends TailwindBackgroundPlug = {
+interface TailwindBackgrounds<
+  TailwindColor extends string,
+  BackgroundsPlug extends TailwindBackgroundPlug = {
     backgroundSize: "";
     backgroundColor: "";
     backgroundImage: "";
     backgroundPosition: "";
     gradientColorStops: "";
-}> extends TailwindBackgroundClipType, TailwindBackgroundRepeatType, TailwindBackgroundOriginType, TailwindBackgroundAttachmentType, TailwindBackgroundSizeType<BackgroundsPlug["backgroundSize"]>, TailwindBackgroundImageType<BackgroundsPlug["backgroundImage"]>, TailwindBackgroundPositionType<BackgroundsPlug["backgroundPosition"]>, TailwindBackgroundColorType<TailwindColor, BackgroundsPlug["backgroundColor"]>, TailwindGradientColorStopsType<TailwindColor | Pluggable<BackgroundsPlug["gradientColorStops"]>> {
-}
+  },
+> extends TailwindBackgroundClipType,
+    TailwindBackgroundRepeatType,
+    TailwindBackgroundOriginType,
+    TailwindBackgroundAttachmentType,
+    TailwindBackgroundSizeType<BackgroundsPlug["backgroundSize"]>,
+    TailwindBackgroundImageType<BackgroundsPlug["backgroundImage"]>,
+    TailwindBackgroundPositionType<BackgroundsPlug["backgroundPosition"]>,
+    TailwindBackgroundColorType<
+      TailwindColor,
+      BackgroundsPlug["backgroundColor"]
+    >,
+    TailwindGradientColorStopsType<
+      TailwindColor | Pluggable<BackgroundsPlug["gradientColorStops"]>
+    > {}
 
 type TailwindBackgroundAttachmentVariants = "fixed" | "local" | "scroll";
-type TailwindBackgroundAttachment = `bg-${TailwindBackgroundAttachmentVariants}`;
+type TailwindBackgroundAttachment =
+  `bg-${TailwindBackgroundAttachmentVariants}`;
 type ShortTailwindBackgroundAttachmentType = {
-    /**
-     *@description Utilities for controlling how a background image behaves when scrolling.
-     *@see {@link https://tailwindcss.com/docs/background-attachment background attachment}
-     */
-    bgAttachment: TailwindBackgroundAttachment;
+  /**
+   *@description Utilities for controlling how a background image behaves when scrolling.
+   *@see {@link https://tailwindcss.com/docs/background-attachment background attachment}
+   */
+  bgAttachment: TailwindBackgroundAttachment;
 };
 
 type TailwindBackgroundClipVariants = "border" | "padding" | "content" | "text";
 type TailwindBackgroundClip = `bg-clip-${TailwindBackgroundClipVariants}`;
 type ShortTailwindBackgroundClipType = {
-    /**
-     *@description Utilities for controlling the bounding box of an element's background.
-     *@see {@link https://tailwindcss.com/docs/background-clip background clip}
-     */
-    bgClip: TailwindBackgroundClip;
+  /**
+   *@description Utilities for controlling the bounding box of an element's background.
+   *@see {@link https://tailwindcss.com/docs/background-clip background clip}
+   */
+  bgClip: TailwindBackgroundClip;
 };
 
-type ShortTailwindBackgroundColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling an element's background color.
-     *@see {@link https://tailwindcss.com/docs/background-color background color}
-     */
-    bg: `bg-${TailwindColor | Pluggable<Plug>}`;
+type ShortTailwindBackgroundColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling an element's background color.
+   *@see {@link https://tailwindcss.com/docs/background-color background color}
+   */
+  bg: `bg-${TailwindColor | Pluggable<Plug>}`;
 };
 
 type TailwindBackgroundOriginVariants = "border" | "padding" | "content";
 type TailwindBackgroundOrigin = `bg-origin-${TailwindBackgroundOriginVariants}`;
 type ShortTailwindBackgroundOriginType = {
-    /**
-     *@description Utilities for controlling how an element's background is positioned relative to borders, padding, and content.
-     *@see {@link https://tailwindcss.com/docs/background-origin background origin}
-     */
-    bgOrigin: TailwindBackgroundOrigin;
-};
-
-type TailwindBackgroundPositionVariants<Plug extends PlugBase = ""> = "bottom" | "top" | "center" | "left" | "left-bottom" | "left-top" | "right" | "right-bottom" | "right-top" | TailwindArbitrary | Pluggable<Plug>;
-type TailwindBackgroundPosition<Plug extends PlugBase = ""> = `bg-${TailwindBackgroundPositionVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling how an element's background is positioned relative to borders, padding, and content.
+   *@see {@link https://tailwindcss.com/docs/background-origin background origin}
+   */
+  bgOrigin: TailwindBackgroundOrigin;
+};
+
+type TailwindBackgroundPositionVariants<Plug extends PlugBase = ""> =
+  | "bottom"
+  | "top"
+  | "center"
+  | "left"
+  | "left-bottom"
+  | "left-top"
+  | "right"
+  | "right-bottom"
+  | "right-top"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
+type TailwindBackgroundPosition<Plug extends PlugBase = ""> =
+  `bg-${TailwindBackgroundPositionVariants<Plug>}`;
 type ShortTailwindBackgroundPositionType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the position of an element's background image.
-     *@see {@link https://tailwindcss.com/docs/background-position background position}
-     */
-    bgPosition: TailwindBackgroundPosition<Plug>;
+  /**
+   *@description Utilities for controlling the position of an element's background image.
+   *@see {@link https://tailwindcss.com/docs/background-position background position}
+   */
+  bgPosition: TailwindBackgroundPosition<Plug>;
 };
 
 type TailwindBackgroundRepeatVariants = "x" | "y" | "round" | "space";
-type TailwindBackgroundRepeat = "bg-repeat" | "bg-no-repeat" | `bg-repeat-${TailwindBackgroundRepeatVariants}`;
+type TailwindBackgroundRepeat =
+  | "bg-repeat"
+  | "bg-no-repeat"
+  | `bg-repeat-${TailwindBackgroundRepeatVariants}`;
 type ShortTailwindBackgroundRepeatType = {
-    /**
-     *@description Utilities for controlling the repetition of an element's background image.
-     *@see {@link https://tailwindcss.com/docs/background-repeat background repeat}
-     */
-    bgRepeat: TailwindBackgroundRepeat;
-};
-
-type TailwindBackgroundSizeVariants<Plug extends PlugBase = ""> = "auto" | "cover" | "contain" | TailwindArbitrary | Pluggable<Plug>;
-type TailwindBackgroundSize<Plug extends PlugBase = ""> = `bg-${TailwindBackgroundSizeVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the repetition of an element's background image.
+   *@see {@link https://tailwindcss.com/docs/background-repeat background repeat}
+   */
+  bgRepeat: TailwindBackgroundRepeat;
+};
+
+type TailwindBackgroundSizeVariants<Plug extends PlugBase = ""> =
+  | "auto"
+  | "cover"
+  | "contain"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
+type TailwindBackgroundSize<Plug extends PlugBase = ""> =
+  `bg-${TailwindBackgroundSizeVariants<Plug>}`;
 type ShortTailwindBackgroundSizeType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the background size of an element's background image.
-     *@see {@link https://tailwindcss.com/docs/background-size background size}
-     */
-    bgSize: TailwindBackgroundSize<Plug>;
+  /**
+   *@description Utilities for controlling the background size of an element's background image.
+   *@see {@link https://tailwindcss.com/docs/background-size background size}
+   */
+  bgSize: TailwindBackgroundSize<Plug>;
 };
 
-interface ShortTailwindBackgrounds<TailwindColor extends string, BackgroundsPlug extends {
+interface ShortTailwindBackgrounds<
+  TailwindColor extends string,
+  BackgroundsPlug extends {
     backgroundSize?: string;
     backgroundColor?: string;
     backgroundImage?: string;
     backgroundPosition?: string;
     gradientColorStops?: string;
-} = {
+  } = {
     backgroundSize: "";
     backgroundColor: "";
     backgroundImage: "";
     backgroundPosition: "";
     gradientColorStops: "";
-}> extends ShortTailwindBackgroundClipType, ShortTailwindBackgroundRepeatType, ShortTailwindBackgroundOriginType, ShortTailwindBackgroundAttachmentType, ShortTailwindBackgroundSizeType<BackgroundsPlug["backgroundSize"]>, ShortTailwindBackgroundPositionType<BackgroundsPlug["backgroundPosition"]>, ShortTailwindBackgroundColorType<TailwindColor, BackgroundsPlug["backgroundColor"]>, TailwindBackgroundImageType<BackgroundsPlug["backgroundImage"]>, TailwindGradientColorStopsType<TailwindColor | Pluggable<BackgroundsPlug["gradientColorStops"]>> {
-}
+  },
+> extends ShortTailwindBackgroundClipType,
+    ShortTailwindBackgroundRepeatType,
+    ShortTailwindBackgroundOriginType,
+    ShortTailwindBackgroundAttachmentType,
+    ShortTailwindBackgroundSizeType<BackgroundsPlug["backgroundSize"]>,
+    ShortTailwindBackgroundPositionType<BackgroundsPlug["backgroundPosition"]>,
+    ShortTailwindBackgroundColorType<
+      TailwindColor,
+      BackgroundsPlug["backgroundColor"]
+    >,
+    TailwindBackgroundImageType<BackgroundsPlug["backgroundImage"]>,
+    TailwindGradientColorStopsType<
+      TailwindColor | Pluggable<BackgroundsPlug["gradientColorStops"]>
+    > {}
 
 type TailwindBorderColorType<BorderColor extends string> = {
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color border color}
-     */
-    borderColor: PluginVariants<"border", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-x-color}
-     */
-    borderXColor: PluginVariants<"border-x", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-y-color}
-     */
-    borderYColor: PluginVariants<"border-y", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-top-color}
-     */
-    borderTopColor: PluginVariants<"border-t", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-bottom-color}
-     */
-    borderBottomColor: PluginVariants<"border-b", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-left-color}
-     */
-    borderLeftColor: PluginVariants<"border-l", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-right-color}
-     */
-    borderRightColor: PluginVariants<"border-r", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color border color}
+   */
+  borderColor: PluginVariants<"border", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-x-color}
+   */
+  borderXColor: PluginVariants<"border-x", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-y-color}
+   */
+  borderYColor: PluginVariants<"border-y", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-top-color}
+   */
+  borderTopColor: PluginVariants<"border-t", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-bottom-color}
+   */
+  borderBottomColor: PluginVariants<"border-b", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-left-color}
+   */
+  borderLeftColor: PluginVariants<"border-l", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-right-color}
+   */
+  borderRightColor: PluginVariants<"border-r", BorderColor>;
 };
 type TailwindDivideColorType<DivideColor extends string> = {
-    /**
-     *@description Utilities for controlling the border color between elements.
-     *@see {@link https://tailwindcss.com/docs/divide-color divide color}
-     */
-    divideColor: PluginVariants<"divide", DivideColor>;
-};
-
-type TailwindBorderRadiusVariants$1<Plug extends PlugBase = ""> = "none" | "sm" | "md" | "lg" | "xl" | "2xl" | "3xl" | "full" | TailwindArbitrary | Pluggable<Plug>;
-type TailwindBorderRadius$1<Key extends string, Plug extends PlugBase = ""> = Key | `${Key}-${TailwindBorderRadiusVariants$1<Plug>}`;
+  /**
+   *@description Utilities for controlling the border color between elements.
+   *@see {@link https://tailwindcss.com/docs/divide-color divide color}
+   */
+  divideColor: PluginVariants<"divide", DivideColor>;
+};
+
+type TailwindBorderRadiusVariants$1<Plug extends PlugBase = ""> =
+  | "none"
+  | "sm"
+  | "md"
+  | "lg"
+  | "xl"
+  | "2xl"
+  | "3xl"
+  | "full"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
+type TailwindBorderRadius$1<Key extends string, Plug extends PlugBase = ""> =
+  | Key
+  | `${Key}-${TailwindBorderRadiusVariants$1<Plug>}`;
 type TailwindBorderRadiusType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-radius}
-     */
-    borderRadius: TailwindBorderRadius$1<"rounded", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-top-radius}
-     */
-    borderTopRadius: TailwindBorderRadius$1<"rounded-t", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-right-radius}
-     */
-    borderRightRadius: TailwindBorderRadius$1<"rounded-r", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-radius}
-     */
-    borderBottomRadius: TailwindBorderRadius$1<"rounded-b", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-left-radius}
-     */
-    borderLeftRadius: TailwindBorderRadius$1<"rounded-l", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-top-left-radius}
-     */
-    borderTopLeftRadius: TailwindBorderRadius$1<"rounded-tl", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-top-right-radius}
-     */
-    borderTopRightRadius: TailwindBorderRadius$1<"rounded-tr", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-left-radius}
-     */
-    borderBottomLeftRadius: TailwindBorderRadius$1<"rounded-bl", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-right-radius}
-     */
-    borderBottomRightRadius: TailwindBorderRadius$1<"rounded-br", Plug>;
-};
-
-type TailwindBorderStyleVariants = "solid" | "dashed" | "dotted" | "double" | "hidden" | "none";
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-radius}
+   */
+  borderRadius: TailwindBorderRadius$1<"rounded", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-top-radius}
+   */
+  borderTopRadius: TailwindBorderRadius$1<"rounded-t", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-right-radius}
+   */
+  borderRightRadius: TailwindBorderRadius$1<"rounded-r", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-radius}
+   */
+  borderBottomRadius: TailwindBorderRadius$1<"rounded-b", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-left-radius}
+   */
+  borderLeftRadius: TailwindBorderRadius$1<"rounded-l", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-top-left-radius}
+   */
+  borderTopLeftRadius: TailwindBorderRadius$1<"rounded-tl", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-top-right-radius}
+   */
+  borderTopRightRadius: TailwindBorderRadius$1<"rounded-tr", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-left-radius}
+   */
+  borderBottomLeftRadius: TailwindBorderRadius$1<"rounded-bl", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-right-radius}
+   */
+  borderBottomRightRadius: TailwindBorderRadius$1<"rounded-br", Plug>;
+};
+
+type TailwindBorderStyleVariants =
+  | "solid"
+  | "dashed"
+  | "dotted"
+  | "double"
+  | "hidden"
+  | "none";
 type TailwindBorderStyle = `border-${TailwindBorderStyleVariants}`;
 type TailwindBorderStyleType = {
-    /**
-     *@description Utilities for controlling the style of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-style border style}
-     */
-    borderStyle: TailwindBorderStyle;
+  /**
+   *@description Utilities for controlling the style of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-style border style}
+   */
+  borderStyle: TailwindBorderStyle;
 };
 type TailwindDivideStyle = `divide-${TailwindBorderStyleVariants}`;
 type TailwindDivideStyleType = {
-    /**
-     *@description Utilities for controlling the border style between elements.
-     *@see {@link https://tailwindcss.com/docs/divide-style divide style}
-     */
-    divideStyle: TailwindDivideStyle;
-};
-
-type PluginVariantsIncludeSelf$1<Title extends string, Value extends string> = PluginVariants<Title, Value> | Title;
-type TailwindBorderWidth$1<Plug extends string> = "0" | "2" | "4" | "8" | TailwindArbitrary | Plug;
+  /**
+   *@description Utilities for controlling the border style between elements.
+   *@see {@link https://tailwindcss.com/docs/divide-style divide style}
+   */
+  divideStyle: TailwindDivideStyle;
+};
+
+type PluginVariantsIncludeSelf$1<Title extends string, Value extends string> =
+  | PluginVariants<Title, Value>
+  | Title;
+type TailwindBorderWidth$1<Plug extends string> =
+  | "0"
+  | "2"
+  | "4"
+  | "8"
+  | TailwindArbitrary
+  | Plug;
 type TailwindBorderWidthType<Plug extends string> = {
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-width}
-     */
-    borderWidth: PluginVariantsIncludeSelf$1<"border", TailwindBorderWidth$1<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-x-width}
-     */
-    borderXWidth: PluginVariantsIncludeSelf$1<"border-x", TailwindBorderWidth$1<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-y-width}
-     */
-    borderYWidth: PluginVariantsIncludeSelf$1<"border-y", TailwindBorderWidth$1<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-top-width}
-     */
-    borderTopWidth: PluginVariantsIncludeSelf$1<"border-t", TailwindBorderWidth$1<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-bottom-width}
-     */
-    borderBottomWidth: PluginVariantsIncludeSelf$1<"border-b", TailwindBorderWidth$1<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-left-width}
-     */
-    borderLeftWidth: PluginVariantsIncludeSelf$1<"border-l", TailwindBorderWidth$1<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-right-width}
-     */
-    borderRightWidth: PluginVariantsIncludeSelf$1<"border-r", TailwindBorderWidth$1<Plug>>;
-};
-type TailwindDivideWidth$1<Plug extends string> = "0" | "2" | "4" | "8" | "reverse" | Plug | TailwindArbitrary;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-width}
+   */
+  borderWidth: PluginVariantsIncludeSelf$1<
+    "border",
+    TailwindBorderWidth$1<Plug>
+  >;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-x-width}
+   */
+  borderXWidth: PluginVariantsIncludeSelf$1<
+    "border-x",
+    TailwindBorderWidth$1<Plug>
+  >;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-y-width}
+   */
+  borderYWidth: PluginVariantsIncludeSelf$1<
+    "border-y",
+    TailwindBorderWidth$1<Plug>
+  >;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-top-width}
+   */
+  borderTopWidth: PluginVariantsIncludeSelf$1<
+    "border-t",
+    TailwindBorderWidth$1<Plug>
+  >;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-bottom-width}
+   */
+  borderBottomWidth: PluginVariantsIncludeSelf$1<
+    "border-b",
+    TailwindBorderWidth$1<Plug>
+  >;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-left-width}
+   */
+  borderLeftWidth: PluginVariantsIncludeSelf$1<
+    "border-l",
+    TailwindBorderWidth$1<Plug>
+  >;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-right-width}
+   */
+  borderRightWidth: PluginVariantsIncludeSelf$1<
+    "border-r",
+    TailwindBorderWidth$1<Plug>
+  >;
+};
+type TailwindDivideWidth$1<Plug extends string> =
+  | "0"
+  | "2"
+  | "4"
+  | "8"
+  | "reverse"
+  | Plug
+  | TailwindArbitrary;
 type TailwindDivideWidthType$1<Plug extends string> = {
-    /**
-     *@description Utilities for controlling the border width between x-axis elements.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/divide-width divide-x-width}
-     */
-    divideX: PluginVariantsIncludeSelf$1<"divide-x", TailwindDivideWidth$1<Plug>>;
-    /**
-     *@description Utilities for controlling the border width between y-axis elements.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/divide-width divide-y-width}
-     */
-    divideY: PluginVariantsIncludeSelf$1<"divide-y", TailwindDivideWidth$1<Plug>>;
-};
-
-type TailwindOutlineColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the color of an element's outline.
-     *@see {@link https://tailwindcss.com/docs/outline-color outline color}
-     */
-    outlineColor: `outline-${TailwindColor | Pluggable<Plug>}`;
-};
-
-type TailwindOutlineOffsetVariants<Plug extends PlugBase = ""> = "0" | "1" | "2" | "4" | "8" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindOutlineOffset<Plug extends PlugBase = ""> = `outline-offset-${TailwindOutlineOffsetVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the border width between x-axis elements.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/divide-width divide-x-width}
+   */
+  divideX: PluginVariantsIncludeSelf$1<"divide-x", TailwindDivideWidth$1<Plug>>;
+  /**
+   *@description Utilities for controlling the border width between y-axis elements.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/divide-width divide-y-width}
+   */
+  divideY: PluginVariantsIncludeSelf$1<"divide-y", TailwindDivideWidth$1<Plug>>;
+};
+
+type TailwindOutlineColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the color of an element's outline.
+   *@see {@link https://tailwindcss.com/docs/outline-color outline color}
+   */
+  outlineColor: `outline-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type TailwindOutlineOffsetVariants<Plug extends PlugBase = ""> =
+  | "0"
+  | "1"
+  | "2"
+  | "4"
+  | "8"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindOutlineOffset<Plug extends PlugBase = ""> =
+  `outline-offset-${TailwindOutlineOffsetVariants<Plug>}`;
 type TailwindOutlineOffsetType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the offset of an element's outline.
-     *@see {@link https://tailwindcss.com/docs/outline-offset outline offset}
-     */
-    outlineOffset: TailwindOutlineOffset<Plug>;
+  /**
+   *@description Utilities for controlling the offset of an element's outline.
+   *@see {@link https://tailwindcss.com/docs/outline-offset outline offset}
+   */
+  outlineOffset: TailwindOutlineOffset<Plug>;
 };
 
-type TailwindOutlineStyle = "outline" | `outline-${TailwindBorderStyleVariants}`;
+type TailwindOutlineStyle =
+  | "outline"
+  | `outline-${TailwindBorderStyleVariants}`;
 type TailwindOutlineStyleType = {
-    /**
-     *@description Utilities for controlling the style of an element's outline.
-     *@see {@link https://tailwindcss.com/docs/outline-style outline style}
-     */
-    outlineStyle: TailwindOutlineStyle;
-};
-
-type TailwindOutlineWidthVariants$1<Plug extends PlugBase = ""> = "0" | "1" | "2" | "4" | "8" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindOutlineWidth$1<Plug extends PlugBase = ""> = `outline-${TailwindOutlineWidthVariants$1<Plug>}`;
+  /**
+   *@description Utilities for controlling the style of an element's outline.
+   *@see {@link https://tailwindcss.com/docs/outline-style outline style}
+   */
+  outlineStyle: TailwindOutlineStyle;
+};
+
+type TailwindOutlineWidthVariants$1<Plug extends PlugBase = ""> =
+  | "0"
+  | "1"
+  | "2"
+  | "4"
+  | "8"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindOutlineWidth$1<Plug extends PlugBase = ""> =
+  `outline-${TailwindOutlineWidthVariants$1<Plug>}`;
 type TailwindOutlineWidthType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the width of an element's outline.
-     *@see {@link https://tailwindcss.com/docs/outline-width outline width}
-     */
-    outlineWidth: TailwindOutlineWidth$1<Plug>;
-};
-
-type TailwindRingColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the color of outline rings.
-     *@see {@link https://tailwindcss.com/docs/ring-color ring color}
-     */
-    ringColor: `ring-${TailwindColor | Pluggable<Plug>}`;
+  /**
+   *@description Utilities for controlling the width of an element's outline.
+   *@see {@link https://tailwindcss.com/docs/outline-width outline width}
+   */
+  outlineWidth: TailwindOutlineWidth$1<Plug>;
+};
+
+type TailwindRingColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the color of outline rings.
+   *@see {@link https://tailwindcss.com/docs/ring-color ring color}
+   */
+  ringColor: `ring-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type TailwindRingOffsetColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the color of outline ring offsets.
+   *@see {@link https://tailwindcss.com/docs/ring-offset-color ring offset color}
+   */
+  ringOffsetColor: `ring-offset-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type TailwindRingOffsetWidthVariants$1<Plug extends PlugBase = ""> =
+  | "0"
+  | "1"
+  | "2"
+  | "4"
+  | "8"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindRingOffsetWidth$1<Plug extends PlugBase = ""> =
+  `ring-offset-${TailwindRingOffsetWidthVariants$1<Plug>}`;
+type TailwindRingOffsetWidthType<Plug extends PlugBase = ""> = {
+  /**
+   *@description Utilities for simulating an offset when adding outline rings.
+   *@see {@link https://tailwindcss.com/docs/ring-offset-width ring offset width}
+   */
+  ringOffsetWidth: TailwindRingOffsetWidth$1<Plug>;
+};
+
+type TailwindRingWidthVariants$1<Plug extends PlugBase = ""> =
+  | "0"
+  | "1"
+  | "2"
+  | "4"
+  | "8"
+  | "inset"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindRingWidth$1<Plug extends PlugBase = ""> =
+  | "ring"
+  | `ring-${TailwindRingWidthVariants$1<Plug>}`;
+type TailwindRingWidthType<Plug extends PlugBase = ""> = {
+  /**
+   *@description Utilities for creating outline rings with box-shadows.
+   *@see {@link https://tailwindcss.com/docs/ring-width ring width}
+   */
+  ringWidth: TailwindRingWidth$1<Plug>;
 };
 
-type TailwindRingOffsetColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the color of outline ring offsets.
-     *@see {@link https://tailwindcss.com/docs/ring-offset-color ring offset color}
-     */
-    ringOffsetColor: `ring-offset-${TailwindColor | Pluggable<Plug>}`;
-};
+interface TailwindBordersPlug {
+  borderColor?: string;
+  borderRadius?: string;
+  borderWidth?: string;
+  divideColor?: string;
+  divideWidth?: string;
+  outlineColor?: string;
+  outlineOffset?: string;
+  outlineWidth?: string;
+  ringOffsetColor?: string;
+  ringOffsetWidth?: string;
+  ringColor?: string;
+  ringWidth?: string;
+}
+interface TailwindBorders<
+  TailwindColor extends string,
+  BordersPlug extends TailwindBordersPlug = {
+    borderColor: "";
+    borderRadius: "";
+    borderWidth: "";
+    divideColor: "";
+    divideWidth: "";
+    outlineColor: "";
+    outlineOffset: "";
+    outlineWidth: "";
+    ringOffsetColor: "";
+    ringOffsetWidth: "";
+    ringColor: "";
+    ringWidth: "";
+  },
+> extends TailwindOutlineStyleType,
+    TailwindDivideStyleType,
+    TailwindBorderStyleType,
+    TailwindBorderWidthType<Pluggable<BordersPlug["borderWidth"]>>,
+    TailwindBorderRadiusType<BordersPlug["borderRadius"]>,
+    TailwindBorderColorType<
+      TailwindColor | Pluggable<BordersPlug["borderColor"]>
+    >,
+    TailwindRingWidthType<BordersPlug["ringWidth"]>,
+    TailwindRingColorType<TailwindColor, BordersPlug["ringColor"]>,
+    TailwindRingOffsetColorType<TailwindColor, BordersPlug["ringOffsetColor"]>,
+    TailwindRingOffsetWidthType<BordersPlug["ringOffsetWidth"]>,
+    TailwindOutlineOffsetType<BordersPlug["outlineOffset"]>,
+    TailwindOutlineWidthType<BordersPlug["outlineWidth"]>,
+    TailwindOutlineColorType<TailwindColor, BordersPlug["outlineColor"]>,
+    TailwindDivideWidthType$1<Pluggable<BordersPlug["divideWidth"]>>,
+    TailwindDivideColorType<
+      TailwindColor | Pluggable<BordersPlug["divideColor"]>
+    > {}
 
-type TailwindRingOffsetWidthVariants$1<Plug extends PlugBase = ""> = "0" | "1" | "2" | "4" | "8" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindRingOffsetWidth$1<Plug extends PlugBase = ""> = `ring-offset-${TailwindRingOffsetWidthVariants$1<Plug>}`;
-type TailwindRingOffsetWidthType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for simulating an offset when adding outline rings.
-     *@see {@link https://tailwindcss.com/docs/ring-offset-width ring offset width}
-     */
-    ringOffsetWidth: TailwindRingOffsetWidth$1<Plug>;
+type ShortTailwindBorderColorType<BorderColor extends string> = {
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color border color}
+   */
+  border: PluginVariants<"border", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-x-color}
+   */
+  borderX: PluginVariants<"border-x", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-y-color}
+   */
+  borderY: PluginVariants<"border-y", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-top-color}
+   */
+  borderT: PluginVariants<"border-t", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-bottom-color}
+   */
+  borderB: PluginVariants<"border-b", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-left-color}
+   */
+  borderL: PluginVariants<"border-l", BorderColor>;
+  /**
+   *@description Utilities for controlling the color of an element's borders.
+   *@see {@link https://tailwindcss.com/docs/border-color  border-right-color}
+   */
+  borderR: PluginVariants<"border-r", BorderColor>;
 };
-
-type TailwindRingWidthVariants$1<Plug extends PlugBase = ""> = "0" | "1" | "2" | "4" | "8" | "inset" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindRingWidth$1<Plug extends PlugBase = ""> = "ring" | `ring-${TailwindRingWidthVariants$1<Plug>}`;
-type TailwindRingWidthType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for creating outline rings with box-shadows.
-     *@see {@link https://tailwindcss.com/docs/ring-width ring width}
-     */
-    ringWidth: TailwindRingWidth$1<Plug>;
+type ShortTailwindDivideColorType<DivideColor extends string> = {
+  /**
+   *@description Utilities for controlling the border color between elements.
+   *@see {@link https://tailwindcss.com/docs/divide-color divide color}
+   */
+  divide: PluginVariants<"divide", DivideColor>;
+};
+
+type TailwindBorderRadiusVariants<Plug extends PlugBase = ""> =
+  | "none"
+  | "sm"
+  | "md"
+  | "lg"
+  | "xl"
+  | "2xl"
+  | "3xl"
+  | "full"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
+type TailwindBorderRadius<Key extends string, Plug extends PlugBase = ""> =
+  | Key
+  | `${Key}-${TailwindBorderRadiusVariants<Plug>}`;
+type ShortTailwindBorderRadiusType<Plug extends PlugBase = ""> = {
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-radius}
+   */
+  borderRadius: TailwindBorderRadius<"rounded", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-top-radius}
+   */
+  borderTRadius: TailwindBorderRadius<"rounded-t", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-right-radius}
+   */
+  borderRRadius: TailwindBorderRadius<"rounded-r", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-radius}
+   */
+  borderBRadius: TailwindBorderRadius<"rounded-b", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-left-radius}
+   */
+  borderLRadius: TailwindBorderRadius<"rounded-l", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-top-left-radius}
+   */
+  borderTLRadius: TailwindBorderRadius<"rounded-tl", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-top-right-radius}
+   */
+  borderTRRadius: TailwindBorderRadius<"rounded-tr", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-left-radius}
+   */
+  borderBLRadius: TailwindBorderRadius<"rounded-bl", Plug>;
+  /**
+   *@description Utilities for controlling the border radius of an element.
+   *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-right-radius}
+   */
+  borderBRRadius: TailwindBorderRadius<"rounded-br", Plug>;
+};
+
+type PluginVariantsIncludeSelf<Title extends string, Value extends string> =
+  | PluginVariants<Title, Value>
+  | Title;
+type TailwindBorderWidth<Plug extends string> =
+  | "0"
+  | "2"
+  | "4"
+  | "8"
+  | TailwindArbitrary
+  | Plug;
+type ShortTailwindBorderWidthType<Plug extends string> = {
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-width}
+   */
+  borderW: PluginVariantsIncludeSelf<"border", TailwindBorderWidth<Plug>>;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-x-width}
+   */
+  borderXW: PluginVariantsIncludeSelf<"border-x", TailwindBorderWidth<Plug>>;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-y-width}
+   */
+  borderYW: PluginVariantsIncludeSelf<"border-y", TailwindBorderWidth<Plug>>;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-top-width}
+   */
+  borderTW: PluginVariantsIncludeSelf<"border-t", TailwindBorderWidth<Plug>>;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-bottom-width}
+   */
+  borderBW: PluginVariantsIncludeSelf<"border-b", TailwindBorderWidth<Plug>>;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-left-width}
+   */
+  borderLW: PluginVariantsIncludeSelf<"border-l", TailwindBorderWidth<Plug>>;
+  /**
+   *@description Utilities for controlling the width of an element's borders.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/border-width border-right-width}
+   */
+  borderRW: PluginVariantsIncludeSelf<"border-r", TailwindBorderWidth<Plug>>;
+};
+type TailwindDivideWidth<Plug extends string> =
+  | "0"
+  | "2"
+  | "4"
+  | "8"
+  | "reverse"
+  | Plug
+  | TailwindArbitrary;
+type TailwindDivideWidthType<Plug extends string> = {
+  /**
+   *@description Utilities for controlling the border width between x-axis elements.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/divide-width divide-x-width}
+   */
+  divideX: PluginVariantsIncludeSelf<"divide-x", TailwindDivideWidth<Plug>>;
+  /**
+   *@description Utilities for controlling the border width between y-axis elements.
+   *@unit Gap `2` = `2px` = `0.125rem`
+   *@see {@link https://tailwindcss.com/docs/divide-width divide-y-width}
+   */
+  divideY: PluginVariantsIncludeSelf<"divide-y", TailwindDivideWidth<Plug>>;
+};
+
+type ShortTailwindOutlineColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the color of an element's outline.
+   *@see {@link https://tailwindcss.com/docs/outline-color outline color}
+   */
+  outline: `outline-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type TailwindOutlineWidthVariants<Plug extends PlugBase = ""> =
+  | "0"
+  | "1"
+  | "2"
+  | "4"
+  | "8"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindOutlineWidth<Plug extends PlugBase = ""> =
+  `outline-${TailwindOutlineWidthVariants<Plug>}`;
+type ShortTailwindOutlineWidthType<Plug extends PlugBase = ""> = {
+  /**
+   *@description Utilities for controlling the width of an element's outline.
+   *@see {@link https://tailwindcss.com/docs/outline-width outline width}
+   */
+  outlineW: TailwindOutlineWidth<Plug>;
+};
+
+type ShortTailwindRingColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the color of outline rings.
+   *@see {@link https://tailwindcss.com/docs/ring-color ring color}
+   */
+  ring: `ring-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type ShortTailwindRingOffsetColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the color of outline ring offsets.
+   *@see {@link https://tailwindcss.com/docs/ring-offset-color ring offset color}
+   */
+  ringOffset: `ring-offset-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type TailwindRingOffsetWidthVariants<Plug extends PlugBase = ""> =
+  | "0"
+  | "1"
+  | "2"
+  | "4"
+  | "8"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindRingOffsetWidth<Plug extends PlugBase = ""> =
+  `ring-offset-${TailwindRingOffsetWidthVariants<Plug>}`;
+type ShortTailwindRingOffsetWidthType<Plug extends PlugBase = ""> = {
+  /**
+   *@description Utilities for simulating an offset when adding outline rings.
+   *@see {@link https://tailwindcss.com/docs/ring-offset-width ring offset width}
+   */
+  ringOffsetW: TailwindRingOffsetWidth<Plug>;
+};
+
+type TailwindRingWidthVariants<Plug extends PlugBase = ""> =
+  | "0"
+  | "1"
+  | "2"
+  | "4"
+  | "8"
+  | "inset"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindRingWidth<Plug extends PlugBase = ""> =
+  | "ring"
+  | `ring-${TailwindRingWidthVariants<Plug>}`;
+type ShortTailwindRingWidthType<Plug extends PlugBase = ""> = {
+  /**
+   *@description Utilities for creating outline rings with box-shadows.
+   *@see {@link https://tailwindcss.com/docs/ring-width ring width}
+   */
+  ringW: TailwindRingWidth<Plug>;
 };
 
-interface TailwindBordersPlug {
+interface ShortTailwindBorders<
+  TailwindColor extends string,
+  BordersPlug extends {
     borderColor?: string;
     borderRadius?: string;
     borderWidth?: string;
@@ -1006,8 +1693,7 @@ interface TailwindBordersPlug {
     ringOffsetWidth?: string;
     ringColor?: string;
     ringWidth?: string;
-}
-interface TailwindBorders<TailwindColor extends string, BordersPlug extends TailwindBordersPlug = {
+  } = {
     borderColor: "";
     borderRadius: "";
     borderWidth: "";
@@ -1020,504 +1706,453 @@ interface TailwindBorders<TailwindColor extends string, BordersPlug extends Tail
     ringOffsetWidth: "";
     ringColor: "";
     ringWidth: "";
-}> extends TailwindOutlineStyleType, TailwindDivideStyleType, TailwindBorderStyleType, TailwindBorderWidthType<Pluggable<BordersPlug["borderWidth"]>>, TailwindBorderRadiusType<BordersPlug["borderRadius"]>, TailwindBorderColorType<TailwindColor | Pluggable<BordersPlug["borderColor"]>>, TailwindRingWidthType<BordersPlug["ringWidth"]>, TailwindRingColorType<TailwindColor, BordersPlug["ringColor"]>, TailwindRingOffsetColorType<TailwindColor, BordersPlug["ringOffsetColor"]>, TailwindRingOffsetWidthType<BordersPlug["ringOffsetWidth"]>, TailwindOutlineOffsetType<BordersPlug["outlineOffset"]>, TailwindOutlineWidthType<BordersPlug["outlineWidth"]>, TailwindOutlineColorType<TailwindColor, BordersPlug["outlineColor"]>, TailwindDivideWidthType$1<Pluggable<BordersPlug["divideWidth"]>>, TailwindDivideColorType<TailwindColor | Pluggable<BordersPlug["divideColor"]>> {
-}
+  },
+> extends ShortTailwindBorderWidthType<Pluggable<BordersPlug["borderWidth"]>>,
+    ShortTailwindBorderRadiusType<BordersPlug["borderRadius"]>,
+    ShortTailwindBorderColorType<
+      TailwindColor | Pluggable<BordersPlug["borderColor"]>
+    >,
+    ShortTailwindRingWidthType<BordersPlug["ringWidth"]>,
+    ShortTailwindRingColorType<TailwindColor, BordersPlug["ringColor"]>,
+    ShortTailwindRingOffsetColorType<
+      TailwindColor,
+      BordersPlug["ringOffsetColor"]
+    >,
+    ShortTailwindRingOffsetWidthType<BordersPlug["ringOffsetWidth"]>,
+    ShortTailwindOutlineWidthType<BordersPlug["outlineWidth"]>,
+    ShortTailwindDivideColorType<
+      TailwindColor | Pluggable<BordersPlug["divideColor"]>
+    >,
+    ShortTailwindOutlineColorType<TailwindColor, BordersPlug["outlineColor"]>,
+    TailwindOutlineOffsetType<BordersPlug["outlineOffset"]>,
+    TailwindDivideWidthType<Pluggable<BordersPlug["divideWidth"]>>,
+    TailwindOutlineStyleType,
+    TailwindDivideStyleType,
+    TailwindBorderStyleType {}
+
+type TailwindBackgroundBlendModeVariants$1 =
+  | "normal"
+  | "multiply"
+  | "screen"
+  | "overlay"
+  | "darken"
+  | "lighten"
+  | "color-dodge"
+  | "color-burn"
+  | "hard-light"
+  | "soft-light"
+  | "difference"
+  | "exclusion"
+  | "hue"
+  | "saturation"
+  | "color"
+  | "luminosity";
+type TailwindBackgroundBlendMode$1 =
+  `bg-blend-${TailwindBackgroundBlendModeVariants$1}`;
+type TailwindBackgroundBlendModeType = {
+  /**
+   *@description Utilities for controlling how an element's background image should blend with its background color.
+   *@see {@link https://tailwindcss.com/docs/background-blend-mode background blend mode}
+   */
+  backgroundBlendMode: TailwindBackgroundBlendMode$1;
+};
+
+type TailwindBoxShadowVariants<Plug extends PlugBase = ""> =
+  | Pluggable<Plug>
+  | "sm"
+  | "md"
+  | "lg"
+  | "xl"
+  | "2xl"
+  | "inner"
+  | "none";
+type TailwindBoxShadow<Plug extends PlugBase = ""> =
+  | "shadow"
+  | `shadow-${TailwindBoxShadowVariants<Plug>}`;
+type TailwindBoxShadowType<Plug extends PlugBase = ""> = {
+  /**
+   *@description Utilities for controlling the box shadow of an element.
+   *@see {@link https://tailwindcss.com/docs/box-shadow box shadow}
+   */
+  boxShadow: TailwindBoxShadow<Plug>;
+};
+
+type TailwindBoxShadowColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the color of a box shadow.
+   *@see {@link https://tailwindcss.com/docs/box-shadow-color box shadow color}
+   */
+  boxShadowColor: `shadow-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type TailwindMixBlendModeVariants =
+  | "normal"
+  | "multiply"
+  | "screen"
+  | "overlay"
+  | "darken"
+  | "lighten"
+  | "color-dodge"
+  | "color-burn"
+  | "hard-light"
+  | "soft-light"
+  | "difference"
+  | "exclusion"
+  | "hue"
+  | "saturation"
+  | "color"
+  | "luminosity"
+  | "plus-lighter";
+type TailwindMixBlendMode = `mix-blend-${TailwindMixBlendModeVariants}`;
+type TailwindMixBlendModeType = {
+  /**
+   *@description
+   *@see {@link https://tailwindcss.com/docs/mix-blend-mode mix blend mode}
+   */
+  mixBlendMode: TailwindMixBlendMode;
+};
 
-type ShortTailwindBorderColorType<BorderColor extends string> = {
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color border color}
-     */
-    border: PluginVariants<"border", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-x-color}
-     */
-    borderX: PluginVariants<"border-x", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-y-color}
-     */
-    borderY: PluginVariants<"border-y", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-top-color}
-     */
-    borderT: PluginVariants<"border-t", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-bottom-color}
-     */
-    borderB: PluginVariants<"border-b", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-left-color}
-     */
-    borderL: PluginVariants<"border-l", BorderColor>;
-    /**
-     *@description Utilities for controlling the color of an element's borders.
-     *@see {@link https://tailwindcss.com/docs/border-color  border-right-color}
-     */
-    borderR: PluginVariants<"border-r", BorderColor>;
+type TailwindOpacityType<TailwindOpacity extends string> = {
+  /**
+   *@description Utilities for controlling the opacity of an element.
+   *@see {@link https://tailwindcss.com/docs/opacity opacity}
+   */
+  opacity: `opacity-${TailwindOpacity}`;
 };
-type ShortTailwindDivideColorType<DivideColor extends string> = {
-    /**
-     *@description Utilities for controlling the border color between elements.
-     *@see {@link https://tailwindcss.com/docs/divide-color divide color}
-     */
-    divide: PluginVariants<"divide", DivideColor>;
+
+interface TailwindEffectsPlug {
+  boxShadow?: string;
+  boxShadowColor?: string;
+}
+interface TailwindEffects<
+  TailwindColor extends string,
+  TailwindOpacity extends string,
+  EffectsPlug extends {
+    boxShadow?: string;
+    boxShadowColor?: string;
+  } = {
+    boxShadow: "";
+    boxShadowColor: "";
+  },
+> extends TailwindOpacityType<TailwindOpacity>,
+    TailwindBoxShadowColorType<TailwindColor, EffectsPlug["boxShadowColor"]>,
+    TailwindBoxShadowType<EffectsPlug["boxShadow"]>,
+    TailwindBackgroundBlendModeType,
+    TailwindMixBlendModeType {}
+
+type TailwindBackgroundBlendModeVariants =
+  | "normal"
+  | "multiply"
+  | "screen"
+  | "overlay"
+  | "darken"
+  | "lighten"
+  | "color-dodge"
+  | "color-burn"
+  | "hard-light"
+  | "soft-light"
+  | "difference"
+  | "exclusion"
+  | "hue"
+  | "saturation"
+  | "color"
+  | "luminosity";
+type TailwindBackgroundBlendMode =
+  `bg-blend-${TailwindBackgroundBlendModeVariants}`;
+type ShortTailwindBackgroundBlendModeType = {
+  /**
+   *@description Utilities for controlling how an element's background image should blend with its background color.
+   *@see {@link https://tailwindcss.com/docs/background-blend-mode background blend mode}
+   */
+  bgBlendMode: TailwindBackgroundBlendMode;
 };
 
-type TailwindBorderRadiusVariants<Plug extends PlugBase = ""> = "none" | "sm" | "md" | "lg" | "xl" | "2xl" | "3xl" | "full" | TailwindArbitrary | Pluggable<Plug>;
-type TailwindBorderRadius<Key extends string, Plug extends PlugBase = ""> = Key | `${Key}-${TailwindBorderRadiusVariants<Plug>}`;
-type ShortTailwindBorderRadiusType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-radius}
-     */
-    borderRadius: TailwindBorderRadius<"rounded", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-top-radius}
-     */
-    borderTRadius: TailwindBorderRadius<"rounded-t", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-right-radius}
-     */
-    borderRRadius: TailwindBorderRadius<"rounded-r", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-radius}
-     */
-    borderBRadius: TailwindBorderRadius<"rounded-b", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-left-radius}
-     */
-    borderLRadius: TailwindBorderRadius<"rounded-l", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-top-left-radius}
-     */
-    borderTLRadius: TailwindBorderRadius<"rounded-tl", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-top-right-radius}
-     */
-    borderTRRadius: TailwindBorderRadius<"rounded-tr", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-left-radius}
-     */
-    borderBLRadius: TailwindBorderRadius<"rounded-bl", Plug>;
-    /**
-     *@description Utilities for controlling the border radius of an element.
-     *@see {@link https://tailwindcss.com/docs/border-radius border-bottom-right-radius}
-     */
-    borderBRRadius: TailwindBorderRadius<"rounded-br", Plug>;
-};
-
-type PluginVariantsIncludeSelf<Title extends string, Value extends string> = PluginVariants<Title, Value> | Title;
-type TailwindBorderWidth<Plug extends string> = "0" | "2" | "4" | "8" | TailwindArbitrary | Plug;
-type ShortTailwindBorderWidthType<Plug extends string> = {
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-width}
-     */
-    borderW: PluginVariantsIncludeSelf<"border", TailwindBorderWidth<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-x-width}
-     */
-    borderXW: PluginVariantsIncludeSelf<"border-x", TailwindBorderWidth<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-y-width}
-     */
-    borderYW: PluginVariantsIncludeSelf<"border-y", TailwindBorderWidth<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-top-width}
-     */
-    borderTW: PluginVariantsIncludeSelf<"border-t", TailwindBorderWidth<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-bottom-width}
-     */
-    borderBW: PluginVariantsIncludeSelf<"border-b", TailwindBorderWidth<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-left-width}
-     */
-    borderLW: PluginVariantsIncludeSelf<"border-l", TailwindBorderWidth<Plug>>;
-    /**
-     *@description Utilities for controlling the width of an element's borders.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/border-width border-right-width}
-     */
-    borderRW: PluginVariantsIncludeSelf<"border-r", TailwindBorderWidth<Plug>>;
-};
-type TailwindDivideWidth<Plug extends string> = "0" | "2" | "4" | "8" | "reverse" | Plug | TailwindArbitrary;
-type TailwindDivideWidthType<Plug extends string> = {
-    /**
-     *@description Utilities for controlling the border width between x-axis elements.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/divide-width divide-x-width}
-     */
-    divideX: PluginVariantsIncludeSelf<"divide-x", TailwindDivideWidth<Plug>>;
-    /**
-     *@description Utilities for controlling the border width between y-axis elements.
-     *@unit Gap `2` = `2px` = `0.125rem`
-     *@see {@link https://tailwindcss.com/docs/divide-width divide-y-width}
-     */
-    divideY: PluginVariantsIncludeSelf<"divide-y", TailwindDivideWidth<Plug>>;
-};
-
-type ShortTailwindOutlineColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the color of an element's outline.
-     *@see {@link https://tailwindcss.com/docs/outline-color outline color}
-     */
-    outline: `outline-${TailwindColor | Pluggable<Plug>}`;
-};
-
-type TailwindOutlineWidthVariants<Plug extends PlugBase = ""> = "0" | "1" | "2" | "4" | "8" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindOutlineWidth<Plug extends PlugBase = ""> = `outline-${TailwindOutlineWidthVariants<Plug>}`;
-type ShortTailwindOutlineWidthType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the width of an element's outline.
-     *@see {@link https://tailwindcss.com/docs/outline-width outline width}
-     */
-    outlineW: TailwindOutlineWidth<Plug>;
-};
-
-type ShortTailwindRingColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the color of outline rings.
-     *@see {@link https://tailwindcss.com/docs/ring-color ring color}
-     */
-    ring: `ring-${TailwindColor | Pluggable<Plug>}`;
-};
-
-type ShortTailwindRingOffsetColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the color of outline ring offsets.
-     *@see {@link https://tailwindcss.com/docs/ring-offset-color ring offset color}
-     */
-    ringOffset: `ring-offset-${TailwindColor | Pluggable<Plug>}`;
-};
-
-type TailwindRingOffsetWidthVariants<Plug extends PlugBase = ""> = "0" | "1" | "2" | "4" | "8" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindRingOffsetWidth<Plug extends PlugBase = ""> = `ring-offset-${TailwindRingOffsetWidthVariants<Plug>}`;
-type ShortTailwindRingOffsetWidthType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for simulating an offset when adding outline rings.
-     *@see {@link https://tailwindcss.com/docs/ring-offset-width ring offset width}
-     */
-    ringOffsetW: TailwindRingOffsetWidth<Plug>;
-};
-
-type TailwindRingWidthVariants<Plug extends PlugBase = ""> = "0" | "1" | "2" | "4" | "8" | "inset" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindRingWidth<Plug extends PlugBase = ""> = "ring" | `ring-${TailwindRingWidthVariants<Plug>}`;
-type ShortTailwindRingWidthType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for creating outline rings with box-shadows.
-     *@see {@link https://tailwindcss.com/docs/ring-width ring width}
-     */
-    ringW: TailwindRingWidth<Plug>;
-};
-
-interface ShortTailwindBorders<TailwindColor extends string, BordersPlug extends {
-    borderColor?: string;
-    borderRadius?: string;
-    borderWidth?: string;
-    divideColor?: string;
-    divideWidth?: string;
-    outlineColor?: string;
-    outlineOffset?: string;
-    outlineWidth?: string;
-    ringOffsetColor?: string;
-    ringOffsetWidth?: string;
-    ringColor?: string;
-    ringWidth?: string;
-} = {
-    borderColor: "";
-    borderRadius: "";
-    borderWidth: "";
-    divideColor: "";
-    divideWidth: "";
-    outlineColor: "";
-    outlineOffset: "";
-    outlineWidth: "";
-    ringOffsetColor: "";
-    ringOffsetWidth: "";
-    ringColor: "";
-    ringWidth: "";
-}> extends ShortTailwindBorderWidthType<Pluggable<BordersPlug["borderWidth"]>>, ShortTailwindBorderRadiusType<BordersPlug["borderRadius"]>, ShortTailwindBorderColorType<TailwindColor | Pluggable<BordersPlug["borderColor"]>>, ShortTailwindRingWidthType<BordersPlug["ringWidth"]>, ShortTailwindRingColorType<TailwindColor, BordersPlug["ringColor"]>, ShortTailwindRingOffsetColorType<TailwindColor, BordersPlug["ringOffsetColor"]>, ShortTailwindRingOffsetWidthType<BordersPlug["ringOffsetWidth"]>, ShortTailwindOutlineWidthType<BordersPlug["outlineWidth"]>, ShortTailwindDivideColorType<TailwindColor | Pluggable<BordersPlug["divideColor"]>>, ShortTailwindOutlineColorType<TailwindColor, BordersPlug["outlineColor"]>, TailwindOutlineOffsetType<BordersPlug["outlineOffset"]>, TailwindDivideWidthType<Pluggable<BordersPlug["divideWidth"]>>, TailwindOutlineStyleType, TailwindDivideStyleType, TailwindBorderStyleType {
-}
-
-type TailwindBackgroundBlendModeVariants$1 = "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "color" | "luminosity";
-type TailwindBackgroundBlendMode$1 = `bg-blend-${TailwindBackgroundBlendModeVariants$1}`;
-type TailwindBackgroundBlendModeType = {
-    /**
-     *@description Utilities for controlling how an element's background image should blend with its background color.
-     *@see {@link https://tailwindcss.com/docs/background-blend-mode background blend mode}
-     */
-    backgroundBlendMode: TailwindBackgroundBlendMode$1;
-};
-
-type TailwindBoxShadowVariants<Plug extends PlugBase = ""> = Pluggable<Plug> | "sm" | "md" | "lg" | "xl" | "2xl" | "inner" | "none";
-type TailwindBoxShadow<Plug extends PlugBase = ""> = "shadow" | `shadow-${TailwindBoxShadowVariants<Plug>}`;
-type TailwindBoxShadowType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the box shadow of an element.
-     *@see {@link https://tailwindcss.com/docs/box-shadow box shadow}
-     */
-    boxShadow: TailwindBoxShadow<Plug>;
-};
-
-type TailwindBoxShadowColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the color of a box shadow.
-     *@see {@link https://tailwindcss.com/docs/box-shadow-color box shadow color}
-     */
-    boxShadowColor: `shadow-${TailwindColor | Pluggable<Plug>}`;
-};
-
-type TailwindMixBlendModeVariants = "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "color" | "luminosity" | "plus-lighter";
-type TailwindMixBlendMode = `mix-blend-${TailwindMixBlendModeVariants}`;
-type TailwindMixBlendModeType = {
-    /**
-     *@description
-     *@see {@link https://tailwindcss.com/docs/mix-blend-mode mix blend mode}
-     */
-    mixBlendMode: TailwindMixBlendMode;
-};
-
-type TailwindOpacityType<TailwindOpacity extends string> = {
-    /**
-     *@description Utilities for controlling the opacity of an element.
-     *@see {@link https://tailwindcss.com/docs/opacity opacity}
-     */
-    opacity: `opacity-${TailwindOpacity}`;
-};
-
-interface TailwindEffectsPlug {
-    boxShadow?: string;
-    boxShadowColor?: string;
-}
-interface TailwindEffects<TailwindColor extends string, TailwindOpacity extends string, EffectsPlug extends {
-    boxShadow?: string;
-    boxShadowColor?: string;
-} = {
-    boxShadow: "";
-    boxShadowColor: "";
-}> extends TailwindOpacityType<TailwindOpacity>, TailwindBoxShadowColorType<TailwindColor, EffectsPlug["boxShadowColor"]>, TailwindBoxShadowType<EffectsPlug["boxShadow"]>, TailwindBackgroundBlendModeType, TailwindMixBlendModeType {
-}
-
-type TailwindBackgroundBlendModeVariants = "normal" | "multiply" | "screen" | "overlay" | "darken" | "lighten" | "color-dodge" | "color-burn" | "hard-light" | "soft-light" | "difference" | "exclusion" | "hue" | "saturation" | "color" | "luminosity";
-type TailwindBackgroundBlendMode = `bg-blend-${TailwindBackgroundBlendModeVariants}`;
-type ShortTailwindBackgroundBlendModeType = {
-    /**
-     *@description Utilities for controlling how an element's background image should blend with its background color.
-     *@see {@link https://tailwindcss.com/docs/background-blend-mode background blend mode}
-     */
-    bgBlendMode: TailwindBackgroundBlendMode;
-};
-
-interface ShortTailwindEffects<TailwindColor extends string, TailwindOpacity extends string, EffectsPlug extends {
+interface ShortTailwindEffects<
+  TailwindColor extends string,
+  TailwindOpacity extends string,
+  EffectsPlug extends {
     boxShadow?: string;
     boxShadowColor?: string;
-} = {
+  } = {
     boxShadow: "";
     boxShadowColor: "";
-}> extends TailwindOpacityType<TailwindOpacity>, TailwindBoxShadowColorType<TailwindColor, EffectsPlug["boxShadowColor"]>, TailwindBoxShadowType<EffectsPlug["boxShadow"]>, TailwindMixBlendModeType, ShortTailwindBackgroundBlendModeType {
-}
-
-type TailwindBackdropOpacityVariants<Plug extends PlugBase = ""> = "0" | "5" | "10" | "20" | "25" | "30" | "40" | "50" | "60" | "70" | "75" | "80" | "90" | "95" | "100" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindBackdropOpacity<Plug extends PlugBase = ""> = `backdrop-opacity-${TailwindBackdropOpacityVariants<Plug>}`;
+  },
+> extends TailwindOpacityType<TailwindOpacity>,
+    TailwindBoxShadowColorType<TailwindColor, EffectsPlug["boxShadowColor"]>,
+    TailwindBoxShadowType<EffectsPlug["boxShadow"]>,
+    TailwindMixBlendModeType,
+    ShortTailwindBackgroundBlendModeType {}
+
+type TailwindBackdropOpacityVariants<Plug extends PlugBase = ""> =
+  | "0"
+  | "5"
+  | "10"
+  | "20"
+  | "25"
+  | "30"
+  | "40"
+  | "50"
+  | "60"
+  | "70"
+  | "75"
+  | "80"
+  | "90"
+  | "95"
+  | "100"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindBackdropOpacity<Plug extends PlugBase = ""> =
+  `backdrop-opacity-${TailwindBackdropOpacityVariants<Plug>}`;
 type TailwindBackdropOpacityType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying backdrop opacity filters to an element.
-     *@see {@link https://tailwindcss.com/docs/backdrop-opacity backdrop opacity}
-     */
-    backdropOpacity: TailwindBackdropOpacity<Plug>;
-};
-
-type TailwindBlurVariants<Plug extends PlugBase = ""> = Pluggable<"none" | "sm" | "md" | "lg" | "xl" | "2xl" | "3xl" | Plug | TailwindArbitrary>;
-type TailwindBlur<Plug extends PlugBase = ""> = "blur" | `blur-${TailwindBlurVariants<Plug>}`;
+  /**
+   *@description Utilities for applying backdrop opacity filters to an element.
+   *@see {@link https://tailwindcss.com/docs/backdrop-opacity backdrop opacity}
+   */
+  backdropOpacity: TailwindBackdropOpacity<Plug>;
+};
+
+type TailwindBlurVariants<Plug extends PlugBase = ""> = Pluggable<
+  "none" | "sm" | "md" | "lg" | "xl" | "2xl" | "3xl" | Plug | TailwindArbitrary
+>;
+type TailwindBlur<Plug extends PlugBase = ""> =
+  | "blur"
+  | `blur-${TailwindBlurVariants<Plug>}`;
 type TailwindBlurType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying blur filters to an element.
-     *@see {@link https://tailwindcss.com/docs/blur blur}
-     */
-    filterBlur: TailwindBlur<Plug>;
-};
-type TailwindBackdropBlur<Plug extends PlugBase = ""> = `backdrop-blur-${TailwindBlurVariants<Plug>}`;
+  /**
+   *@description Utilities for applying blur filters to an element.
+   *@see {@link https://tailwindcss.com/docs/blur blur}
+   */
+  filterBlur: TailwindBlur<Plug>;
+};
+type TailwindBackdropBlur<Plug extends PlugBase = ""> =
+  `backdrop-blur-${TailwindBlurVariants<Plug>}`;
 type TailwindBackdropBlurType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying backdrop blur filters to an element.
-     *@see {@link https://tailwindcss.com/docs/backdrop-blur backdrop blur}
-     */
-    backdropBlur: TailwindBackdropBlur<Plug>;
-};
-
-type TailwindBrightnessVariants<Plug extends PlugBase = ""> = "0" | "50" | "75" | "90" | "95" | "100" | "105" | "110" | "125" | "150" | "200" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindBrightness<Plug extends PlugBase = ""> = `brightness-${TailwindBrightnessVariants<Plug>}`;
+  /**
+   *@description Utilities for applying backdrop blur filters to an element.
+   *@see {@link https://tailwindcss.com/docs/backdrop-blur backdrop blur}
+   */
+  backdropBlur: TailwindBackdropBlur<Plug>;
+};
+
+type TailwindBrightnessVariants<Plug extends PlugBase = ""> =
+  | "0"
+  | "50"
+  | "75"
+  | "90"
+  | "95"
+  | "100"
+  | "105"
+  | "110"
+  | "125"
+  | "150"
+  | "200"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindBrightness<Plug extends PlugBase = ""> =
+  `brightness-${TailwindBrightnessVariants<Plug>}`;
 type TailwindBrightnessType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying brightness filters to an element.
-     *@see {@link https://tailwindcss.com/docs/brightness brightness}
-     */
-    filterBrightness: TailwindBrightness<Plug>;
-};
-type TailwindBackdropBrightness<Plug extends PlugBase = ""> = `backdrop-brightness-${TailwindBrightnessVariants<Plug>}`;
+  /**
+   *@description Utilities for applying brightness filters to an element.
+   *@see {@link https://tailwindcss.com/docs/brightness brightness}
+   */
+  filterBrightness: TailwindBrightness<Plug>;
+};
+type TailwindBackdropBrightness<Plug extends PlugBase = ""> =
+  `backdrop-brightness-${TailwindBrightnessVariants<Plug>}`;
 type TailwindBackdropBrightnessType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying backdrop brightness filters to an element.
-     *@see {@link https://tailwindcss.com/docs/backdrop-brightness backdrop brightness}
-     */
-    backdropBrightness: TailwindBackdropBrightness<Plug>;
-};
-
-type TailwindContrastVariants<Plug extends PlugBase = ""> = Pluggable<"0" | "50" | "75" | "100" | "125" | "150" | "200" | TailwindArbitrary | Plug>;
-type TailwindContrast<Plug extends PlugBase = ""> = `contrast-${TailwindContrastVariants<Plug>}`;
+  /**
+   *@description Utilities for applying backdrop brightness filters to an element.
+   *@see {@link https://tailwindcss.com/docs/backdrop-brightness backdrop brightness}
+   */
+  backdropBrightness: TailwindBackdropBrightness<Plug>;
+};
+
+type TailwindContrastVariants<Plug extends PlugBase = ""> = Pluggable<
+  "0" | "50" | "75" | "100" | "125" | "150" | "200" | TailwindArbitrary | Plug
+>;
+type TailwindContrast<Plug extends PlugBase = ""> =
+  `contrast-${TailwindContrastVariants<Plug>}`;
 type TailwindContrastType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying contrast filters to an element.
-     *@see {@link https://tailwindcss.com/docs/contrast contrast}
-     */
-    filterContrast: TailwindContrast<Plug>;
-};
-
-type TailwindDropShadowVariants<Plug extends PlugBase = ""> = "sm" | "md" | "lg" | "xl" | "2xl" | "none" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindDropShadow<Plug extends PlugBase = ""> = "drop-shadow" | `drop-shadow-${TailwindDropShadowVariants<Plug>}`;
+  /**
+   *@description Utilities for applying contrast filters to an element.
+   *@see {@link https://tailwindcss.com/docs/contrast contrast}
+   */
+  filterContrast: TailwindContrast<Plug>;
+};
+
+type TailwindDropShadowVariants<Plug extends PlugBase = ""> =
+  | "sm"
+  | "md"
+  | "lg"
+  | "xl"
+  | "2xl"
+  | "none"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindDropShadow<Plug extends PlugBase = ""> =
+  | "drop-shadow"
+  | `drop-shadow-${TailwindDropShadowVariants<Plug>}`;
 type TailwindDropShadowType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying drop-shadow filters to an element.
-     *@see {@link https://tailwindcss.com/docs/drop-shadow drop shadow}
-     */
-    filterDropShadow: TailwindDropShadow<Plug>;
-};
-
-type TailwindGrayscaleVariants<Plug extends PlugBase = ""> = Pluggable<"0" | Plug | TailwindArbitrary>;
-type TailwindGrayscale<Plug extends PlugBase = ""> = "grayscale" | `grayscale-${TailwindGrayscaleVariants<Plug>}`;
+  /**
+   *@description Utilities for applying drop-shadow filters to an element.
+   *@see {@link https://tailwindcss.com/docs/drop-shadow drop shadow}
+   */
+  filterDropShadow: TailwindDropShadow<Plug>;
+};
+
+type TailwindGrayscaleVariants<Plug extends PlugBase = ""> = Pluggable<
+  "0" | Plug | TailwindArbitrary
+>;
+type TailwindGrayscale<Plug extends PlugBase = ""> =
+  | "grayscale"
+  | `grayscale-${TailwindGrayscaleVariants<Plug>}`;
 type TailwindGrayscaleType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying grayscale filters to an element.
-     *@see {@link https://tailwindcss.com/docs/grayscale grayscale}
-     */
-    filterGrayscale: TailwindGrayscale<Plug>;
-};
-type TailwindBackdropGrayscale<Plug extends PlugBase = ""> = "backdrop-grayscale" | `backdrop-grayscale-${TailwindGrayscaleVariants<Plug>}`;
+  /**
+   *@description Utilities for applying grayscale filters to an element.
+   *@see {@link https://tailwindcss.com/docs/grayscale grayscale}
+   */
+  filterGrayscale: TailwindGrayscale<Plug>;
+};
+type TailwindBackdropGrayscale<Plug extends PlugBase = ""> =
+  | "backdrop-grayscale"
+  | `backdrop-grayscale-${TailwindGrayscaleVariants<Plug>}`;
 type TailwindBackdropGrayscaleType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying backdrop grayscale filters to an element.
-     *@see {@link https://tailwindcss.com/docs/backdrop-grayscale backdrop grayscale}
-     */
-    backdropGrayscale: TailwindBackdropGrayscale<Plug>;
-};
-
-type TailwindHueRotateVariants<Plug extends PlugBase = ""> = "0" | "15" | "30" | "60" | "90" | "100" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindHueRotate<Plug extends PlugBase = ""> = `hue-rotate-${TailwindHueRotateVariants<Plug>}` | `-hue-rotate-${TailwindHueRotateVariants<Plug>}`;
+  /**
+   *@description Utilities for applying backdrop grayscale filters to an element.
+   *@see {@link https://tailwindcss.com/docs/backdrop-grayscale backdrop grayscale}
+   */
+  backdropGrayscale: TailwindBackdropGrayscale<Plug>;
+};
+
+type TailwindHueRotateVariants<Plug extends PlugBase = ""> =
+  | "0"
+  | "15"
+  | "30"
+  | "60"
+  | "90"
+  | "100"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindHueRotate<Plug extends PlugBase = ""> =
+  | `hue-rotate-${TailwindHueRotateVariants<Plug>}`
+  | `-hue-rotate-${TailwindHueRotateVariants<Plug>}`;
 type TailwindHueRotateType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying hue-rotate filters to an element.
-     *@see {@link https://tailwindcss.com/docs/hue-rotate hue-rotate}
-     */
-    filterHueRotate: TailwindHueRotate<Plug>;
-};
-type TailwindBackdropHueRotate<Plug extends PlugBase = ""> = `backdrop-hue-rotate-${TailwindHueRotateVariants<Plug>}` | `-backdrop-hue-rotate-${TailwindHueRotateVariants<Plug>}`;
+  /**
+   *@description Utilities for applying hue-rotate filters to an element.
+   *@see {@link https://tailwindcss.com/docs/hue-rotate hue-rotate}
+   */
+  filterHueRotate: TailwindHueRotate<Plug>;
+};
+type TailwindBackdropHueRotate<Plug extends PlugBase = ""> =
+  | `backdrop-hue-rotate-${TailwindHueRotateVariants<Plug>}`
+  | `-backdrop-hue-rotate-${TailwindHueRotateVariants<Plug>}`;
 type TailwindBackdropHueRotateType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying backdrop hue-rotate filters to an element.
-     *@see {@link https://tailwindcss.com/docs/backdrop-hue-rotate backdrop hue-rotate}
-     */
-    backdropHueRotate: TailwindBackdropHueRotate<Plug>;
-};
-
-type TailwindInvertVariants<Plug extends PlugBase = ""> = Pluggable<"0" | Plug | TailwindArbitrary>;
-type TailwindInvert<Plug extends PlugBase = ""> = "invert" | `invert-${TailwindInvertVariants<Plug>}`;
+  /**
+   *@description Utilities for applying backdrop hue-rotate filters to an element.
+   *@see {@link https://tailwindcss.com/docs/backdrop-hue-rotate backdrop hue-rotate}
+   */
+  backdropHueRotate: TailwindBackdropHueRotate<Plug>;
+};
+
+type TailwindInvertVariants<Plug extends PlugBase = ""> = Pluggable<
+  "0" | Plug | TailwindArbitrary
+>;
+type TailwindInvert<Plug extends PlugBase = ""> =
+  | "invert"
+  | `invert-${TailwindInvertVariants<Plug>}`;
 type TailwindInvertType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying invert filters to an element.
-     *@see {@link https://tailwindcss.com/docs/invert invert}
-     */
-    filterInvert: TailwindInvert<Plug>;
-};
-type TailwindBackdropInvert<Plug extends PlugBase = ""> = "backdrop-invert" | `backdrop-invert-${TailwindInvertVariants<Plug>}`;
+  /**
+   *@description Utilities for applying invert filters to an element.
+   *@see {@link https://tailwindcss.com/docs/invert invert}
+   */
+  filterInvert: TailwindInvert<Plug>;
+};
+type TailwindBackdropInvert<Plug extends PlugBase = ""> =
+  | "backdrop-invert"
+  | `backdrop-invert-${TailwindInvertVariants<Plug>}`;
 type TailwindBackdropInvertType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying backdrop invert filters to an element.
-     *@see {@link https://tailwindcss.com/docs/backdrop-invert backdrop invert}
-     */
-    backdropInvert: TailwindBackdropInvert<Plug>;
-};
-
-type TailwindSaturateVariants<Plug extends PlugBase = ""> = "0" | "50" | "100" | "150" | "200" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindSaturate<Plug extends PlugBase = ""> = `saturate-${TailwindSaturateVariants<Plug>}`;
+  /**
+   *@description Utilities for applying backdrop invert filters to an element.
+   *@see {@link https://tailwindcss.com/docs/backdrop-invert backdrop invert}
+   */
+  backdropInvert: TailwindBackdropInvert<Plug>;
+};
+
+type TailwindSaturateVariants<Plug extends PlugBase = ""> =
+  | "0"
+  | "50"
+  | "100"
+  | "150"
+  | "200"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindSaturate<Plug extends PlugBase = ""> =
+  `saturate-${TailwindSaturateVariants<Plug>}`;
 type TailwindSaturateType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying saturation filters to an element.
-     *@see {@link https://tailwindcss.com/docs/saturate saturate}
-     */
-    filterSaturate: TailwindSaturate<Plug>;
-};
-type TailwindBackdropSaturate<Plug extends PlugBase = ""> = `backdrop-saturate-${TailwindSaturateVariants<Plug>}`;
+  /**
+   *@description Utilities for applying saturation filters to an element.
+   *@see {@link https://tailwindcss.com/docs/saturate saturate}
+   */
+  filterSaturate: TailwindSaturate<Plug>;
+};
+type TailwindBackdropSaturate<Plug extends PlugBase = ""> =
+  `backdrop-saturate-${TailwindSaturateVariants<Plug>}`;
 type TailwindBackdropSaturateType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying backdrop saturation filters to an element.
-     *@see {@link https://tailwindcss.com/docs/backdrop-saturate backdrop saturate}
-     */
-    backdropSaturate: TailwindBackdropSaturate<Plug>;
-};
-
-type TailwindSepiaVariants<Plug extends PlugBase = ""> = Pluggable<"0" | Plug | TailwindArbitrary>;
-type TailwindSepia<Plug extends PlugBase = ""> = "sepia" | `sepia-${TailwindSepiaVariants<Plug>}`;
+  /**
+   *@description Utilities for applying backdrop saturation filters to an element.
+   *@see {@link https://tailwindcss.com/docs/backdrop-saturate backdrop saturate}
+   */
+  backdropSaturate: TailwindBackdropSaturate<Plug>;
+};
+
+type TailwindSepiaVariants<Plug extends PlugBase = ""> = Pluggable<
+  "0" | Plug | TailwindArbitrary
+>;
+type TailwindSepia<Plug extends PlugBase = ""> =
+  | "sepia"
+  | `sepia-${TailwindSepiaVariants<Plug>}`;
 type TailwindSepiaType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying sepia filters to an element.
-     *@see {@link https://tailwindcss.com/docs/sepia sepia}
-     */
-    filterSepia: TailwindSepia<Plug>;
-};
-type TailwindBackdropSepia<Plug extends PlugBase = ""> = `backdrop-sepia-${TailwindSepiaVariants<Plug>}`;
+  /**
+   *@description Utilities for applying sepia filters to an element.
+   *@see {@link https://tailwindcss.com/docs/sepia sepia}
+   */
+  filterSepia: TailwindSepia<Plug>;
+};
+type TailwindBackdropSepia<Plug extends PlugBase = ""> =
+  `backdrop-sepia-${TailwindSepiaVariants<Plug>}`;
 type TailwindBackdropSepiaType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for applying backdrop sepia filters to an element.
-     *@see {@link https://tailwindcss.com/docs/backdrop-sepia backdrop sepia}
-     */
-    backdropSepia: TailwindBackdropSepia<Plug>;
+  /**
+   *@description Utilities for applying backdrop sepia filters to an element.
+   *@see {@link https://tailwindcss.com/docs/backdrop-sepia backdrop sepia}
+   */
+  backdropSepia: TailwindBackdropSepia<Plug>;
 };
 
 interface TailwindFiltersPlug {
-    dropShadow?: string;
-    blur?: string;
-    contrast?: string;
-    grayscale?: string;
-    hueRotate?: string;
-    invert?: string;
-    saturate?: string;
-    sepia?: string;
-    backdropBrightness?: string;
-    backdropBlur?: string;
-    backdropContrast?: string;
-    backdropGrayscale?: string;
-    backdropHueRotate?: string;
-    backdropInvert?: string;
-    backdropOpacity?: string;
-    backdropSaturate?: string;
-    backdropSepia?: string;
-    brightness?: string;
+  dropShadow?: string;
+  blur?: string;
+  contrast?: string;
+  grayscale?: string;
+  hueRotate?: string;
+  invert?: string;
+  saturate?: string;
+  sepia?: string;
+  backdropBrightness?: string;
+  backdropBlur?: string;
+  backdropContrast?: string;
+  backdropGrayscale?: string;
+  backdropHueRotate?: string;
+  backdropInvert?: string;
+  backdropOpacity?: string;
+  backdropSaturate?: string;
+  backdropSepia?: string;
+  brightness?: string;
 }
-interface TailwindFilters<FiltersPlug extends TailwindFiltersPlug = {
+interface TailwindFilters<
+  FiltersPlug extends TailwindFiltersPlug = {
     dropShadow: "";
     blur: "";
     contrast: "";
@@ -1536,315 +2171,540 @@ interface TailwindFilters<FiltersPlug extends TailwindFiltersPlug = {
     backdropSaturate: "";
     backdropSepia: "";
     brightness: "";
-}> extends TailwindBlurType<FiltersPlug["blur"]>, TailwindBrightnessType<FiltersPlug["brightness"]>, TailwindContrastType<FiltersPlug["contrast"]>, TailwindDropShadowType<FiltersPlug["dropShadow"]>, TailwindGrayscaleType<FiltersPlug["grayscale"]>, TailwindHueRotateType<FiltersPlug["hueRotate"]>, TailwindInvertType<FiltersPlug["invert"]>, TailwindSaturateType<FiltersPlug["saturate"]>, TailwindSepiaType<FiltersPlug["sepia"]>, TailwindBackdropOpacityType<FiltersPlug["backdropOpacity"]>, TailwindBackdropBlurType<FiltersPlug["backdropBlur"]>, TailwindBackdropBrightnessType<FiltersPlug["backdropBrightness"]>, TailwindBackdropGrayscaleType<FiltersPlug["backdropGrayscale"]>, TailwindBackdropSepiaType<FiltersPlug["backdropSepia"]>, TailwindBackdropHueRotateType<FiltersPlug["backdropHueRotate"]>, TailwindBackdropInvertType<FiltersPlug["backdropInvert"]>, TailwindBackdropSaturateType<FiltersPlug["backdropSaturate"]> {
-}
-
-type TailwindAlignContentVariants = "center" | "start" | "end" | "between" | "around" | "evenly";
+  },
+> extends TailwindBlurType<FiltersPlug["blur"]>,
+    TailwindBrightnessType<FiltersPlug["brightness"]>,
+    TailwindContrastType<FiltersPlug["contrast"]>,
+    TailwindDropShadowType<FiltersPlug["dropShadow"]>,
+    TailwindGrayscaleType<FiltersPlug["grayscale"]>,
+    TailwindHueRotateType<FiltersPlug["hueRotate"]>,
+    TailwindInvertType<FiltersPlug["invert"]>,
+    TailwindSaturateType<FiltersPlug["saturate"]>,
+    TailwindSepiaType<FiltersPlug["sepia"]>,
+    TailwindBackdropOpacityType<FiltersPlug["backdropOpacity"]>,
+    TailwindBackdropBlurType<FiltersPlug["backdropBlur"]>,
+    TailwindBackdropBrightnessType<FiltersPlug["backdropBrightness"]>,
+    TailwindBackdropGrayscaleType<FiltersPlug["backdropGrayscale"]>,
+    TailwindBackdropSepiaType<FiltersPlug["backdropSepia"]>,
+    TailwindBackdropHueRotateType<FiltersPlug["backdropHueRotate"]>,
+    TailwindBackdropInvertType<FiltersPlug["backdropInvert"]>,
+    TailwindBackdropSaturateType<FiltersPlug["backdropSaturate"]> {}
+
+type TailwindAlignContentVariants =
+  | "center"
+  | "start"
+  | "end"
+  | "between"
+  | "around"
+  | "evenly";
 type TailwindAlignContent = `content-${TailwindAlignContentVariants}`;
 type TailwindAlignContentType = {
-    /**
-     *@description Utilities for controlling how rows are positioned in multi-row flex and grid containers.
-     *@see {@link https://tailwindcss.com/docs/align-content align content}
-     */
-    alignContent: TailwindAlignContent;
-};
-type TailwindAlignItemsVariants = "start" | "end" | "center" | "baseline" | "stretch";
+  /**
+   *@description Utilities for controlling how rows are positioned in multi-row flex and grid containers.
+   *@see {@link https://tailwindcss.com/docs/align-content align content}
+   */
+  alignContent: TailwindAlignContent;
+};
+type TailwindAlignItemsVariants =
+  | "start"
+  | "end"
+  | "center"
+  | "baseline"
+  | "stretch";
 type TailwindAlignItems = `items-${TailwindAlignItemsVariants}`;
 type TailwindAlignItemsType = {
-    /**
-     *@description Utilities for controlling how flex and grid items are positioned along a container's cross axis.
-     *@see {@link https://tailwindcss.com/docs/align-items align items}
-     */
-    alignItems: TailwindAlignItems;
-};
-type TailwindAlignSelfVariants = "auto" | TailwindAlignItemsVariants | TailwindArbitrary;
+  /**
+   *@description Utilities for controlling how flex and grid items are positioned along a container's cross axis.
+   *@see {@link https://tailwindcss.com/docs/align-items align items}
+   */
+  alignItems: TailwindAlignItems;
+};
+type TailwindAlignSelfVariants =
+  | "auto"
+  | TailwindAlignItemsVariants
+  | TailwindArbitrary;
 type TailwindAlignSelf = `self-${TailwindAlignSelfVariants}`;
 type TailwindAlignSelfType = {
-    /**
-     *@description Utilities for controlling how an individual flex or grid item is positioned along its container's cross axis.
-     *@see {@link https://tailwindcss.com/docs/align-self align self}
-     */
-    alignSelf: TailwindAlignSelf;
+  /**
+   *@description Utilities for controlling how an individual flex or grid item is positioned along its container's cross axis.
+   *@see {@link https://tailwindcss.com/docs/align-self align self}
+   */
+  alignSelf: TailwindAlignSelf;
 };
 
 type TailwindGapType<Gap extends string> = {
-    /**
-     *@description Utilities for controlling gutters between grid and flexbox items.
-     *@see {@link https://tailwindcss.com/docs/gap gap}
-     */
-    gap: PluginVariants<"gap", Gap>;
-    /**
-     *@description Utilities for controlling gutters between grid and flexbox items at x axis.
-     *@see {@link https://tailwindcss.com/docs/gap gap}
-     */
-    gapX: PluginVariants<"gap-x", Gap>;
-    /**
-     *@description Utilities for controlling gutters between grid and flexbox items at y axis.
-     *@see {@link https://tailwindcss.com/docs/gap gap}
-     */
-    gapY: PluginVariants<"gap-y", Gap>;
-};
-
-type TailwindJustifyContentVariants = "start" | "end" | "center" | "between" | "around" | "evenly";
+  /**
+   *@description Utilities for controlling gutters between grid and flexbox items.
+   *@see {@link https://tailwindcss.com/docs/gap gap}
+   */
+  gap: PluginVariants<"gap", Gap>;
+  /**
+   *@description Utilities for controlling gutters between grid and flexbox items at x axis.
+   *@see {@link https://tailwindcss.com/docs/gap gap}
+   */
+  gapX: PluginVariants<"gap-x", Gap>;
+  /**
+   *@description Utilities for controlling gutters between grid and flexbox items at y axis.
+   *@see {@link https://tailwindcss.com/docs/gap gap}
+   */
+  gapY: PluginVariants<"gap-y", Gap>;
+};
+
+type TailwindJustifyContentVariants =
+  | "start"
+  | "end"
+  | "center"
+  | "between"
+  | "around"
+  | "evenly";
 type TailwindJustifyContent = `justify-${TailwindJustifyContentVariants}`;
 type TailwindJustifyContentType = {
-    /**
-     *@description Utilities for controlling how flex and grid items are positioned along a container's main axis.
-     *@see {@link https://tailwindcss.com/docs/justify-content justify content}
-     */
-    justifyContent: TailwindJustifyContent;
-};
-
-type TailwindFlexGridOrderVariants<Plug extends PlugBase = ""> = "first" | "last" | "none" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindFlexGridOrder<Plug extends PlugBase = ""> = `order-${TailwindFlexGridOrderVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling how flex and grid items are positioned along a container's main axis.
+   *@see {@link https://tailwindcss.com/docs/justify-content justify content}
+   */
+  justifyContent: TailwindJustifyContent;
+};
+
+type TailwindFlexGridOrderVariants<Plug extends PlugBase = ""> =
+  | "first"
+  | "last"
+  | "none"
+  | "1"
+  | "2"
+  | "3"
+  | "4"
+  | "5"
+  | "6"
+  | "7"
+  | "8"
+  | "9"
+  | "10"
+  | "11"
+  | "12"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindFlexGridOrder<Plug extends PlugBase = ""> =
+  `order-${TailwindFlexGridOrderVariants<Plug>}`;
 type TailwindFlexGridOrderType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the order of flex and grid items.
-     *@see {@link https://tailwindcss.com/docs/order order}
-     */
-    order: TailwindFlexGridOrder<Plug>;
-};
-
-type TailwindFlexVariants<Plug extends PlugBase = ""> = "1" | "auto" | "initial" | "none" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindFlex$1<Plug extends PlugBase = ""> = `flex-${TailwindFlexVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the order of flex and grid items.
+   *@see {@link https://tailwindcss.com/docs/order order}
+   */
+  order: TailwindFlexGridOrder<Plug>;
+};
+
+type TailwindFlexVariants<Plug extends PlugBase = ""> =
+  | "1"
+  | "auto"
+  | "initial"
+  | "none"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindFlex$1<Plug extends PlugBase = ""> =
+  `flex-${TailwindFlexVariants<Plug>}`;
 type TailwindFlexType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling how flex items both grow and shrink.
-     *@see {@link https://tailwindcss.com/docs/flex flex}
-     */
-    flex: TailwindFlex$1<Plug>;
-};
-
-type TailwindFlexBasisVariants<TailwindSpacing extends string, Plug extends PlugBase = ""> = "1/2" | "1/3" | "2/3" | "1/4" | "2/4" | "3/4" | "1/5" | "2/5" | "3/5" | "4/5" | "1/6" | "2/6" | "3/6" | "4/6" | "5/6" | "1/12" | "2/12" | "3/12" | "4/12" | "5/12" | "6/12" | "7/12" | "8/12" | "9/12" | "10/12" | "11/12" | "full" | TailwindArbitrary | TailwindSpacing | Pluggable<Plug>;
-type TailwindFlexBasis<TailwindSpacing extends string, Plug extends PlugBase = ""> = `basis-${TailwindFlexBasisVariants<TailwindSpacing, Plug>}`;
-type TailwindFlexBasisType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the initial size of flex items.
-     *@see {@link https://tailwindcss.com/docs/flex-basis flex basis}
-     */
-    flexBasis: TailwindFlexBasis<TailwindSpacing, Plug>;
-};
-
-type TailwindFlexDirectionVariants = "row" | "row-reverse" | "col" | "col-reverse";
+  /**
+   *@description Utilities for controlling how flex items both grow and shrink.
+   *@see {@link https://tailwindcss.com/docs/flex flex}
+   */
+  flex: TailwindFlex$1<Plug>;
+};
+
+type TailwindFlexBasisVariants<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> =
+  | "1/2"
+  | "1/3"
+  | "2/3"
+  | "1/4"
+  | "2/4"
+  | "3/4"
+  | "1/5"
+  | "2/5"
+  | "3/5"
+  | "4/5"
+  | "1/6"
+  | "2/6"
+  | "3/6"
+  | "4/6"
+  | "5/6"
+  | "1/12"
+  | "2/12"
+  | "3/12"
+  | "4/12"
+  | "5/12"
+  | "6/12"
+  | "7/12"
+  | "8/12"
+  | "9/12"
+  | "10/12"
+  | "11/12"
+  | "full"
+  | TailwindArbitrary
+  | TailwindSpacing
+  | Pluggable<Plug>;
+type TailwindFlexBasis<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = `basis-${TailwindFlexBasisVariants<TailwindSpacing, Plug>}`;
+type TailwindFlexBasisType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the initial size of flex items.
+   *@see {@link https://tailwindcss.com/docs/flex-basis flex basis}
+   */
+  flexBasis: TailwindFlexBasis<TailwindSpacing, Plug>;
+};
+
+type TailwindFlexDirectionVariants =
+  | "row"
+  | "row-reverse"
+  | "col"
+  | "col-reverse";
 type TailwindFlexDirection = `flex-${TailwindFlexDirectionVariants}`;
 type TailwindFlexDirectionType = {
-    /**
-     *@description Utilities for controlling the direction of flex items.
-     *@see {@link https://tailwindcss.com/docs/flex-direction flex direction}
-     */
-    flexDirection: TailwindFlexDirection;
+  /**
+   *@description Utilities for controlling the direction of flex items.
+   *@see {@link https://tailwindcss.com/docs/flex-direction flex direction}
+   */
+  flexDirection: TailwindFlexDirection;
 };
 
-type TailwindFlexGrow<Plug extends PlugBase = ""> = "grow" | "grow-0" | `grow-${TailwindArbitrary | Pluggable<Plug>}`;
+type TailwindFlexGrow<Plug extends PlugBase = ""> =
+  | "grow"
+  | "grow-0"
+  | `grow-${TailwindArbitrary | Pluggable<Plug>}`;
 type TailwindFlexGrowType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling how flex items grow.
-     *@see {@link https://tailwindcss.com/docs/flex-grow flex grow}
-     */
-    flexGrow: TailwindFlexGrow<Plug>;
+  /**
+   *@description Utilities for controlling how flex items grow.
+   *@see {@link https://tailwindcss.com/docs/flex-grow flex grow}
+   */
+  flexGrow: TailwindFlexGrow<Plug>;
 };
 
-type TailwindFlexShrink<Plug extends PlugBase = ""> = "shrink" | "shrink-0" | `shrink-${TailwindArbitrary | Pluggable<Plug>}`;
+type TailwindFlexShrink<Plug extends PlugBase = ""> =
+  | "shrink"
+  | "shrink-0"
+  | `shrink-${TailwindArbitrary | Pluggable<Plug>}`;
 type TailwindFlexShrinkType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling how flex items shrink.
-     *@see {@link https://tailwindcss.com/docs/flex-shrink flex shrink}
-     */
-    flexShrink: TailwindFlexShrink<Plug>;
-};
-
-type TailwindFlexWrapVariants = "wrap" | "wrap-reverse" | "nowrap" | TailwindArbitrary;
+  /**
+   *@description Utilities for controlling how flex items shrink.
+   *@see {@link https://tailwindcss.com/docs/flex-shrink flex shrink}
+   */
+  flexShrink: TailwindFlexShrink<Plug>;
+};
+
+type TailwindFlexWrapVariants =
+  | "wrap"
+  | "wrap-reverse"
+  | "nowrap"
+  | TailwindArbitrary;
 type TailwindFlexWrap = `flex-${TailwindFlexWrapVariants}`;
 type TailwindFlexWrapType = {
-    /**
-     *@description Utilities for controlling how flex items wrap.
-     *@see {@link https://tailwindcss.com/docs/flex-wrap flex wrap}
-     */
-    flexWrap: TailwindFlexWrap;
-};
-
-type TailwindGridAutoCommonVariants = "auto" | "min" | "max" | "fr" | TailwindArbitrary;
-type TailwindGridAutoColumns<Plug extends PlugBase = ""> = `grid-cols-${TailwindGridAutoCommonVariants | Pluggable<Plug>}`;
+  /**
+   *@description Utilities for controlling how flex items wrap.
+   *@see {@link https://tailwindcss.com/docs/flex-wrap flex wrap}
+   */
+  flexWrap: TailwindFlexWrap;
+};
+
+type TailwindGridAutoCommonVariants =
+  | "auto"
+  | "min"
+  | "max"
+  | "fr"
+  | TailwindArbitrary;
+type TailwindGridAutoColumns<Plug extends PlugBase = ""> =
+  `grid-cols-${TailwindGridAutoCommonVariants | Pluggable<Plug>}`;
 type TailwindGridAutoColumnsType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the size of implicitly-created grid columns.
-     *@see {@link https://tailwindcss.com/docs/grid-auto-columns grid auto columns}
-     */
-    gridAutoColumns: TailwindGridAutoColumns<Plug>;
-};
-type TailwindGridAutoRows<Plug extends PlugBase = ""> = `auto-rows-${TailwindGridAutoCommonVariants | Pluggable<Plug>}`;
+  /**
+   *@description Utilities for controlling the size of implicitly-created grid columns.
+   *@see {@link https://tailwindcss.com/docs/grid-auto-columns grid auto columns}
+   */
+  gridAutoColumns: TailwindGridAutoColumns<Plug>;
+};
+type TailwindGridAutoRows<Plug extends PlugBase = ""> =
+  `auto-rows-${TailwindGridAutoCommonVariants | Pluggable<Plug>}`;
 type TailwindGridAutoRowsType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the size of implicitly-created grid rows.
-     *@see {@link https://tailwindcss.com/docs/grid-auto-rows grid auto rows}
-     */
-    gridAutoRows: TailwindGridAutoRows<Plug>;
-};
-
-type TailwindGridAutoFlowVariants = "row" | "col" | "dense" | "row-dense" | "col-dense";
+  /**
+   *@description Utilities for controlling the size of implicitly-created grid rows.
+   *@see {@link https://tailwindcss.com/docs/grid-auto-rows grid auto rows}
+   */
+  gridAutoRows: TailwindGridAutoRows<Plug>;
+};
+
+type TailwindGridAutoFlowVariants =
+  | "row"
+  | "col"
+  | "dense"
+  | "row-dense"
+  | "col-dense";
 type TailwindGridAutoFlow = `grid-flow-${TailwindGridAutoFlowVariants}`;
 type TailwindGridAutoFlowType = {
-    /**
-     *@description Utilities for controlling how elements in a grid are auto-placed.
-     *@see {@link https://tailwindcss.com/docs/grid-auto-flow grid auto flow}
-     */
-    gridAutoFlow: TailwindGridAutoFlow;
-};
-
-type TailwindGridColumnVariants<Plug extends PlugBase = ""> = "auto" | "span-1" | "span-2" | "span-3" | "span-4" | "span-5" | "span-6" | "span-7" | "span-8" | "span-9" | "span-10" | "span-11" | "span-12" | "span-full" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindGridColumn<Plug extends PlugBase = ""> = `col-${TailwindGridColumnVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling how elements in a grid are auto-placed.
+   *@see {@link https://tailwindcss.com/docs/grid-auto-flow grid auto flow}
+   */
+  gridAutoFlow: TailwindGridAutoFlow;
+};
+
+type TailwindGridColumnVariants<Plug extends PlugBase = ""> =
+  | "auto"
+  | "span-1"
+  | "span-2"
+  | "span-3"
+  | "span-4"
+  | "span-5"
+  | "span-6"
+  | "span-7"
+  | "span-8"
+  | "span-9"
+  | "span-10"
+  | "span-11"
+  | "span-12"
+  | "span-full"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindGridColumn<Plug extends PlugBase = ""> =
+  `col-${TailwindGridColumnVariants<Plug>}`;
 type TailwindGridColumnType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling how elements are sized and placed across grid columns.
-     *@see {@link https://tailwindcss.com/docs/grid-column grid column}
-     */
-    gridColumn: TailwindGridColumn<Plug>;
-};
-type TailwindGridColumnDirectionVariants = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "auto" | TailwindArbitrary;
-type TailwindGridColumnStart<Plug extends PlugBase = ""> = `col-start-${TailwindGridColumnDirectionVariants | Pluggable<Plug>}`;
+  /**
+   *@description Utilities for controlling how elements are sized and placed across grid columns.
+   *@see {@link https://tailwindcss.com/docs/grid-column grid column}
+   */
+  gridColumn: TailwindGridColumn<Plug>;
+};
+type TailwindGridColumnDirectionVariants =
+  | "1"
+  | "2"
+  | "3"
+  | "4"
+  | "5"
+  | "6"
+  | "7"
+  | "8"
+  | "9"
+  | "10"
+  | "11"
+  | "12"
+  | "13"
+  | "auto"
+  | TailwindArbitrary;
+type TailwindGridColumnStart<Plug extends PlugBase = ""> =
+  `col-start-${TailwindGridColumnDirectionVariants | Pluggable<Plug>}`;
 type TailwindGridColumnStartType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling how elements are sized and placed across grid columns.
-     *@see {@link https://tailwindcss.com/docs/grid-column grid column start}
-     */
-    gridColumnStart: TailwindGridColumnStart<Plug>;
-};
-type TailwindGridColumnEnd<Plug extends PlugBase = ""> = `col-end-${TailwindGridColumnDirectionVariants | Pluggable<Plug>}`;
+  /**
+   *@description Utilities for controlling how elements are sized and placed across grid columns.
+   *@see {@link https://tailwindcss.com/docs/grid-column grid column start}
+   */
+  gridColumnStart: TailwindGridColumnStart<Plug>;
+};
+type TailwindGridColumnEnd<Plug extends PlugBase = ""> =
+  `col-end-${TailwindGridColumnDirectionVariants | Pluggable<Plug>}`;
 type TailwindGridColumnEndType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling how elements are sized and placed across grid columns.
-     *@see {@link https://tailwindcss.com/docs/grid-column grid column end}
-     */
-    gridColumnEnd: TailwindGridColumnEnd<Plug>;
+  /**
+   *@description Utilities for controlling how elements are sized and placed across grid columns.
+   *@see {@link https://tailwindcss.com/docs/grid-column grid column end}
+   */
+  gridColumnEnd: TailwindGridColumnEnd<Plug>;
 };
 
 type TailwindGridJustifyItemsVariants = "start" | "end" | "center" | "stretch";
-type TailwindGridJustifyItems = `justify-items-${TailwindGridJustifyItemsVariants}`;
+type TailwindGridJustifyItems =
+  `justify-items-${TailwindGridJustifyItemsVariants}`;
 type TailwindGridJustifyItemsType = {
-    /**
-     *@description Utilities for controlling how grid items are aligned along their inline axis.
-     *@see {@link https://tailwindcss.com/docs/justify-items justify items}
-     */
-    justifyItems: TailwindGridJustifyItems;
-};
-type TailwindGridJustifySelfVariants = "auto" | TailwindGridJustifyItemsVariants;
-type TailwindGridJustifySelf = `justify-self-${TailwindGridJustifySelfVariants}`;
+  /**
+   *@description Utilities for controlling how grid items are aligned along their inline axis.
+   *@see {@link https://tailwindcss.com/docs/justify-items justify items}
+   */
+  justifyItems: TailwindGridJustifyItems;
+};
+type TailwindGridJustifySelfVariants =
+  | "auto"
+  | TailwindGridJustifyItemsVariants;
+type TailwindGridJustifySelf =
+  `justify-self-${TailwindGridJustifySelfVariants}`;
 type TailwindGridJustifySelfType = {
-    /**
-     *@description Utilities for controlling how an individual grid item is aligned along its inline axis.
-     *@see {@link https://tailwindcss.com/docs/justify-self justify self}
-     */
-    justifySelf: TailwindGridJustifySelf;
+  /**
+   *@description Utilities for controlling how an individual grid item is aligned along its inline axis.
+   *@see {@link https://tailwindcss.com/docs/justify-self justify self}
+   */
+  justifySelf: TailwindGridJustifySelf;
 };
 
 type TailwindGridPlaceItemsVariants = "start" | "end" | "center" | "stretch";
 type TailwindGridPlaceItems = `place-items-${TailwindGridPlaceItemsVariants}`;
 type TailwindGridPlaceItemsType = {
-    /**
-     *@description Utilities for controlling how items are justified and aligned at the same time.
-     *@see {@link https://tailwindcss.com/docs/place-items place items}
-     */
-    placeItems: TailwindGridPlaceItems;
-};
-type TailwindGridPlaceContentVariants = TailwindGridPlaceItemsVariants | "between" | "around" | "evenly";
-type TailwindGridPlaceContent = `place-content-${TailwindGridPlaceContentVariants}`;
+  /**
+   *@description Utilities for controlling how items are justified and aligned at the same time.
+   *@see {@link https://tailwindcss.com/docs/place-items place items}
+   */
+  placeItems: TailwindGridPlaceItems;
+};
+type TailwindGridPlaceContentVariants =
+  | TailwindGridPlaceItemsVariants
+  | "between"
+  | "around"
+  | "evenly";
+type TailwindGridPlaceContent =
+  `place-content-${TailwindGridPlaceContentVariants}`;
 type TailwindGridPlaceContentType = {
-    /**
-     *@description Utilities for controlling how content is justified and aligned at the same time.
-     *@see {@link https://tailwindcss.com/docs/place-content place content}
-     */
-    placeContent: TailwindGridPlaceContent;
+  /**
+   *@description Utilities for controlling how content is justified and aligned at the same time.
+   *@see {@link https://tailwindcss.com/docs/place-content place content}
+   */
+  placeContent: TailwindGridPlaceContent;
 };
 type TailwindGridPlaceSelfVariants = "auto" | TailwindGridPlaceItemsVariants;
 type TailwindGridPlaceSelf = `place-self-${TailwindGridPlaceSelfVariants}`;
 type TailwindGridPlaceSelfType = {
-    /**
-     *@description Utilities for controlling how an individual item is justified and aligned at the same time.
-     *@see {@link https://tailwindcss.com/docs/place-self place self}
-     */
-    placeSelf: TailwindGridPlaceSelf;
-};
-
-type TailwindGridRowVariants<Plug extends PlugBase = ""> = "auto" | "span-1" | "span-2" | "span-3" | "span-4" | "span-5" | "span-6" | "span-full" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindGridRow<Plug extends PlugBase = ""> = `row-${TailwindGridRowVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling how an individual item is justified and aligned at the same time.
+   *@see {@link https://tailwindcss.com/docs/place-self place self}
+   */
+  placeSelf: TailwindGridPlaceSelf;
+};
+
+type TailwindGridRowVariants<Plug extends PlugBase = ""> =
+  | "auto"
+  | "span-1"
+  | "span-2"
+  | "span-3"
+  | "span-4"
+  | "span-5"
+  | "span-6"
+  | "span-full"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindGridRow<Plug extends PlugBase = ""> =
+  `row-${TailwindGridRowVariants<Plug>}`;
 type TailwindGridRowType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling how elements are sized and placed across grid rows.
-     *@see {@link https://tailwindcss.com/docs/grid-row grid row}
-     */
-    gridRow: TailwindGridRow<Plug>;
-};
-type TailwindGridRowDirectionVariants = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "auto" | TailwindArbitrary;
-type TailwindGridRowStart<Plug extends PlugBase = ""> = `row-start-${TailwindGridRowDirectionVariants | Pluggable<Plug>}`;
+  /**
+   *@description Utilities for controlling how elements are sized and placed across grid rows.
+   *@see {@link https://tailwindcss.com/docs/grid-row grid row}
+   */
+  gridRow: TailwindGridRow<Plug>;
+};
+type TailwindGridRowDirectionVariants =
+  | "1"
+  | "2"
+  | "3"
+  | "4"
+  | "5"
+  | "6"
+  | "7"
+  | "auto"
+  | TailwindArbitrary;
+type TailwindGridRowStart<Plug extends PlugBase = ""> =
+  `row-start-${TailwindGridRowDirectionVariants | Pluggable<Plug>}`;
 type TailwindGridRowStartType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling how elements are sized and placed across grid rows start.
-     *@see {@link https://tailwindcss.com/docs/grid-row grid row start}
-     */
-    gridRowStart?: TailwindGridRowStart<Plug>;
-};
-type TailwindGridRowEnd<Plug extends PlugBase = ""> = `row-end-${TailwindGridRowDirectionVariants | Pluggable<Plug>}`;
+  /**
+   *@description Utilities for controlling how elements are sized and placed across grid rows start.
+   *@see {@link https://tailwindcss.com/docs/grid-row grid row start}
+   */
+  gridRowStart: TailwindGridRowStart<Plug>;
+};
+type TailwindGridRowEnd<Plug extends PlugBase = ""> =
+  `row-end-${TailwindGridRowDirectionVariants | Pluggable<Plug>}`;
 type TailwindGridRowEndType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling how elements are sized and placed across grid rows end.
-     *@see {@link https://tailwindcss.com/docs/grid-row grid row end}
-     */
-    gridRowEnd?: TailwindGridRowEnd<Plug>;
-};
-
-type TailwindGridTemplateVariants<Plug extends PlugBase = ""> = Pluggable<"subgrid" | "none" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | Plug | TailwindArbitrary>;
-type TailwindGridTemplateRows<Plug extends PlugBase = ""> = `grid-rows-${TailwindGridTemplateVariants<Plug>}`;
-type TailwindGridTemplateRowsType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for specifying the rows in a grid layout.
-     *@see {@link https://tailwindcss.com/docs/grid-template-rows grid template rows}
-     */
-    gridTemplateRows: TailwindGridTemplateRows<Plug>;
-};
-type TailwindGridTemplateColumns<Plug extends PlugBase = ""> = `grid-cols-${TailwindGridTemplateVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling how elements are sized and placed across grid rows end.
+   *@see {@link https://tailwindcss.com/docs/grid-row grid row end}
+   */
+  gridRowEnd: TailwindGridRowEnd<Plug>;
+};
+
+type TailwindGridTemplateVariants<Plug extends PlugBase = ""> = Pluggable<
+  | "subgrid"
+  | "none"
+  | "1"
+  | "2"
+  | "3"
+  | "4"
+  | "5"
+  | "6"
+  | "7"
+  | "8"
+  | "9"
+  | "10"
+  | "11"
+  | "12"
+  | Plug
+  | TailwindArbitrary
+>;
+type TailwindGridTemplateRows<Plug extends PlugBase = ""> =
+  `grid-rows-${TailwindGridTemplateVariants<Plug>}`;
+type TailwindGridTemplateRowsType<Plug extends PlugBase = ""> = {
+  /**
+   *@description Utilities for specifying the rows in a grid layout.
+   *@see {@link https://tailwindcss.com/docs/grid-template-rows grid template rows}
+   */
+  gridTemplateRows: TailwindGridTemplateRows<Plug>;
+};
+type TailwindGridTemplateColumns<Plug extends PlugBase = ""> =
+  `grid-cols-${TailwindGridTemplateVariants<Plug>}`;
 type TailwindGridTemplateColumnsType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for specifying the columns in a grid layout.
-     *@see {@link https://tailwindcss.com/docs/grid-template-columns grid template columns}
-     */
-    gridTemplateColumns: TailwindGridTemplateColumns<Plug>;
+  /**
+   *@description Utilities for specifying the columns in a grid layout.
+   *@see {@link https://tailwindcss.com/docs/grid-template-columns grid template columns}
+   */
+  gridTemplateColumns: TailwindGridTemplateColumns<Plug>;
 };
 
 interface TailwindFlexGridCommonPlug {
-    gap?: string;
-    order?: string;
+  gap?: string;
+  order?: string;
 }
-interface TailwindFlexGridCommon<TailwindSpacing extends string, FlexGridCommonPlug extends TailwindFlexGridCommonPlug = {
+interface TailwindFlexGridCommon<
+  TailwindSpacing extends string,
+  FlexGridCommonPlug extends TailwindFlexGridCommonPlug = {
     gap: "";
     order: "";
-}> extends TailwindAlignSelfType, TailwindAlignItemsType, TailwindAlignContentType, TailwindJustifyContentType, TailwindFlexGridOrderType<FlexGridCommonPlug["order"]>, TailwindGapType<TailwindSpacing | Pluggable<FlexGridCommonPlug["gap"]>> {
-}
+  },
+> extends TailwindAlignSelfType,
+    TailwindAlignItemsType,
+    TailwindAlignContentType,
+    TailwindJustifyContentType,
+    TailwindFlexGridOrderType<FlexGridCommonPlug["order"]>,
+    TailwindGapType<TailwindSpacing | Pluggable<FlexGridCommonPlug["gap"]>> {}
 interface TailwindFlexPlug {
-    flex?: string;
-    flexBasis?: string;
-    flexGrow?: string;
-    flexShrink?: string;
+  flex?: string;
+  flexBasis?: string;
+  flexGrow?: string;
+  flexShrink?: string;
 }
-interface TailwindFlex<TailwindSpacing extends string, FlexPlug extends TailwindFlexPlug = {
+interface TailwindFlex<
+  TailwindSpacing extends string,
+  FlexPlug extends TailwindFlexPlug = {
     flex: "";
     flexBasis: "";
     flexGrow: "";
     flexShrink: "";
-}> extends TailwindFlexWrapType, TailwindFlexDirectionType, TailwindFlexType<FlexPlug["flex"]>, TailwindFlexGrowType<FlexPlug["flexGrow"]>, TailwindFlexShrinkType<FlexPlug["flexShrink"]>, TailwindFlexBasisType<TailwindSpacing, FlexPlug["flexBasis"]> {
-}
+  },
+> extends TailwindFlexWrapType,
+    TailwindFlexDirectionType,
+    TailwindFlexType<FlexPlug["flex"]>,
+    TailwindFlexGrowType<FlexPlug["flexGrow"]>,
+    TailwindFlexShrinkType<FlexPlug["flexShrink"]>,
+    TailwindFlexBasisType<TailwindSpacing, FlexPlug["flexBasis"]> {}
 interface TailwindGridPlug {
-    gridAutoColumns?: string;
-    gridAutoRows?: string;
-    gridColumn?: string;
-    gridColumnStart?: string;
-    gridColumnEnd?: string;
-    gridRow?: string;
-    gridRowEnd?: string;
-    gridRowStart?: string;
-    gridTemplateColumns?: string;
-    gridTemplateRows?: string;
+  gridAutoColumns?: string;
+  gridAutoRows?: string;
+  gridColumn?: string;
+  gridColumnStart?: string;
+  gridColumnEnd?: string;
+  gridRow?: string;
+  gridRowEnd?: string;
+  gridRowStart?: string;
+  gridTemplateColumns?: string;
+  gridTemplateRows?: string;
 }
-interface TailwindGrid<GridPlug extends TailwindGridPlug = {
+interface TailwindGrid<
+  GridPlug extends TailwindGridPlug = {
     gridAutoColumns: "";
     gridAutoRows: "";
     gridColumn: "";
@@ -1855,288 +2715,474 @@ interface TailwindGrid<GridPlug extends TailwindGridPlug = {
     gridRowStart: "";
     gridTemplateColumns: "";
     gridTemplateRows: "";
-}> extends TailwindGridAutoFlowType, TailwindGridPlaceSelfType, TailwindGridPlaceItemsType, TailwindGridJustifySelfType, TailwindGridJustifyItemsType, TailwindGridPlaceContentType, TailwindGridRowType<GridPlug["gridRow"]>, TailwindGridRowEndType<GridPlug["gridRowEnd"]>, TailwindGridRowStartType<GridPlug["gridRowStart"]>, TailwindGridColumnType<GridPlug["gridColumn"]>, TailwindGridColumnEndType<GridPlug["gridColumnEnd"]>, TailwindGridColumnStartType<GridPlug["gridColumnStart"]>, TailwindGridAutoRowsType<GridPlug["gridAutoRows"]>, TailwindGridAutoColumnsType<GridPlug["gridAutoColumns"]>, TailwindGridTemplateRowsType<GridPlug["gridTemplateRows"]>, TailwindGridTemplateColumnsType<GridPlug["gridTemplateColumns"]> {
-}
-interface TailwindFlexGridPlug extends TailwindFlexGridCommonPlug, TailwindFlexPlug, TailwindGridPlug {
-}
-
-type TailwindContentVariants<Plug extends PlugBase = ""> = "none" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindContent<Plug extends PlugBase = ""> = `content-${TailwindContentVariants<Plug>}`;
+  },
+> extends TailwindGridAutoFlowType,
+    TailwindGridPlaceSelfType,
+    TailwindGridPlaceItemsType,
+    TailwindGridJustifySelfType,
+    TailwindGridJustifyItemsType,
+    TailwindGridPlaceContentType,
+    TailwindGridRowType<GridPlug["gridRow"]>,
+    TailwindGridRowEndType<GridPlug["gridRowEnd"]>,
+    TailwindGridRowStartType<GridPlug["gridRowStart"]>,
+    TailwindGridColumnType<GridPlug["gridColumn"]>,
+    TailwindGridColumnEndType<GridPlug["gridColumnEnd"]>,
+    TailwindGridColumnStartType<GridPlug["gridColumnStart"]>,
+    TailwindGridAutoRowsType<GridPlug["gridAutoRows"]>,
+    TailwindGridAutoColumnsType<GridPlug["gridAutoColumns"]>,
+    TailwindGridTemplateRowsType<GridPlug["gridTemplateRows"]>,
+    TailwindGridTemplateColumnsType<GridPlug["gridTemplateColumns"]> {}
+interface TailwindFlexGridPlug
+  extends TailwindFlexGridCommonPlug,
+    TailwindFlexPlug,
+    TailwindGridPlug {}
+
+type TailwindContentVariants<Plug extends PlugBase = ""> =
+  | "none"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindContent<Plug extends PlugBase = ""> =
+  `content-${TailwindContentVariants<Plug>}`;
 type TailwindContentType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the content of the before and after pseudo-elements.
-     *@see {@link https://tailwindcss.com/docs/content content}
-     */
-    content: TailwindContent<Plug>;
-};
-
-type TailwindFontFamilyVariants<Plug extends PlugBase = ""> = "sans" | "serif" | "mono" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindFontFamily<Plug extends PlugBase = ""> = `font-${TailwindFontFamilyVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the content of the before and after pseudo-elements.
+   *@see {@link https://tailwindcss.com/docs/content content}
+   */
+  content: TailwindContent<Plug>;
+};
+
+type TailwindFontFamilyVariants<Plug extends PlugBase = ""> =
+  | "sans"
+  | "serif"
+  | "mono"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindFontFamily<Plug extends PlugBase = ""> =
+  `font-${TailwindFontFamilyVariants<Plug>}`;
 type TailwindFontFamilyType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the font family of an element.
-     *@see {@link https://tailwindcss.com/docs/font-family font family}
-     */
-    fontFamily: TailwindFontFamily<Plug>;
-};
-
-type TailwindLineHeightVariants<Plug extends PlugBase = ""> = "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "none" | "tight" | "snug" | "normal" | "relaxed" | "loose" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindLineHeight<Plug extends PlugBase = ""> = `leading-${TailwindLineHeightVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the font family of an element.
+   *@see {@link https://tailwindcss.com/docs/font-family font family}
+   */
+  fontFamily: TailwindFontFamily<Plug>;
+};
+
+type TailwindLineHeightVariants<Plug extends PlugBase = ""> =
+  | "3"
+  | "4"
+  | "5"
+  | "6"
+  | "7"
+  | "8"
+  | "9"
+  | "10"
+  | "none"
+  | "tight"
+  | "snug"
+  | "normal"
+  | "relaxed"
+  | "loose"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindLineHeight<Plug extends PlugBase = ""> =
+  `leading-${TailwindLineHeightVariants<Plug>}`;
 type TailwindLineHeightType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the leading (line height) of an element.
-     *@see {@link https://tailwindcss.com/docs/line-height line height}
-     */
-    lineHeight: TailwindLineHeight<Plug>;
-};
-
-type TailwindFontSizeVariants<Plug extends PlugBase = ""> = "xs" | "sm" | "base" | "lg" | "xl" | "2xl" | "3xl" | "4xl" | "5xl" | "6xl" | "7xl" | "8xl" | "9xl" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindFontSize<FontSizePlug extends PlugBase = "", LineHeightPlug extends PlugBase = ""> = `text-${TailwindFontSizeVariants<FontSizePlug>}` | `text-${TailwindFontSizeVariants<FontSizePlug>}/${TailwindLineHeightVariants<LineHeightPlug>}`;
-type TailwindFontSizeType<FontSizePlug extends PlugBase = "", LineHeightPlug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the font size of an element.
-     *@unit Base size(`text-base`) = `1rem`
-     *@see {@link https://tailwindcss.com/docs/font-size font size}
-     */
-    fontSize: TailwindFontSize<FontSizePlug, LineHeightPlug>;
+  /**
+   *@description Utilities for controlling the leading (line height) of an element.
+   *@see {@link https://tailwindcss.com/docs/line-height line height}
+   */
+  lineHeight: TailwindLineHeight<Plug>;
+};
+
+type TailwindFontSizeVariants<Plug extends PlugBase = ""> =
+  | "xs"
+  | "sm"
+  | "base"
+  | "lg"
+  | "xl"
+  | "2xl"
+  | "3xl"
+  | "4xl"
+  | "5xl"
+  | "6xl"
+  | "7xl"
+  | "8xl"
+  | "9xl"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindFontSize<
+  FontSizePlug extends PlugBase = "",
+  LineHeightPlug extends PlugBase = "",
+> =
+  | `text-${TailwindFontSizeVariants<FontSizePlug>}`
+  | `text-${TailwindFontSizeVariants<FontSizePlug>}/${TailwindLineHeightVariants<LineHeightPlug>}`;
+type TailwindFontSizeType<
+  FontSizePlug extends PlugBase = "",
+  LineHeightPlug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the font size of an element.
+   *@unit Base size(`text-base`) = `1rem`
+   *@see {@link https://tailwindcss.com/docs/font-size font size}
+   */
+  fontSize: TailwindFontSize<FontSizePlug, LineHeightPlug>;
 };
 
 type TailwindFontSmoothing = "subpixel-antialiased" | "antialiased";
 type TailwindFontSmoothingType = {
-    /**
-     *@description Utilities for controlling the font smoothing of an element.
-     *@see {@link https://tailwindcss.com/docs/font-smoothing font smoothing}
-     */
-    fontSmoothing: TailwindFontSmoothing;
+  /**
+   *@description Utilities for controlling the font smoothing of an element.
+   *@see {@link https://tailwindcss.com/docs/font-smoothing font smoothing}
+   */
+  fontSmoothing: TailwindFontSmoothing;
 };
 
 type TailwindFontStyle = "italic" | "non-italic";
 type TailwindFontStyleType = {
-    /**
-     *@description Utilities for controlling the style of text.
-     *@see {@link https://tailwindcss.com/docs/font-style font style}
-     */
-    fontStyle: TailwindFontStyle;
-};
-
-type TailwindFontVariantNumeric = "normal-nums" | "ordinal" | "slashed-zero" | "lining-nums" | "oldstyle-nums" | "proportional-nums" | "tabular-nums" | "diagonal-fractions" | "stacked-fractions";
+  /**
+   *@description Utilities for controlling the style of text.
+   *@see {@link https://tailwindcss.com/docs/font-style font style}
+   */
+  fontStyle: TailwindFontStyle;
+};
+
+type TailwindFontVariantNumeric =
+  | "normal-nums"
+  | "ordinal"
+  | "slashed-zero"
+  | "lining-nums"
+  | "oldstyle-nums"
+  | "proportional-nums"
+  | "tabular-nums"
+  | "diagonal-fractions"
+  | "stacked-fractions";
 type TailwindFontVariantNumericType = {
-    /**
-     *@description Utilities for controlling the variant of numbers.
-     *@see {@link https://tailwindcss.com/docs/font-variant-numeric font variant numeric}
-     */
-    fontVariantNumeric: TailwindFontVariantNumeric;
-};
-
-type TailwindFontWeightVariants<Plug extends PlugBase = ""> = "thin" | "extralight" | "light" | "normal" | "medium" | "semibold" | "bold" | "extrabold" | "black" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindFontWeight<Plug extends PlugBase = ""> = `font-${TailwindFontWeightVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the variant of numbers.
+   *@see {@link https://tailwindcss.com/docs/font-variant-numeric font variant numeric}
+   */
+  fontVariantNumeric: TailwindFontVariantNumeric;
+};
+
+type TailwindFontWeightVariants<Plug extends PlugBase = ""> =
+  | "thin"
+  | "extralight"
+  | "light"
+  | "normal"
+  | "medium"
+  | "semibold"
+  | "bold"
+  | "extrabold"
+  | "black"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindFontWeight<Plug extends PlugBase = ""> =
+  `font-${TailwindFontWeightVariants<Plug>}`;
 type TailwindFontWeightType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the font weight of an element.
-     *@see {@link https://tailwindcss.com/docs/font-weight font weight}
-     */
-    fontWeight: TailwindFontWeight<Plug>;
-};
-
-type TailwindHyphensVariants<Plug extends PlugBase = ""> = "none" | "manual" | "auto" | Pluggable<Plug>;
-type TailwindHyphens<Plug extends PlugBase = ""> = `hyphens-${TailwindHyphensVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the font weight of an element.
+   *@see {@link https://tailwindcss.com/docs/font-weight font weight}
+   */
+  fontWeight: TailwindFontWeight<Plug>;
+};
+
+type TailwindHyphensVariants<Plug extends PlugBase = ""> =
+  | "none"
+  | "manual"
+  | "auto"
+  | Pluggable<Plug>;
+type TailwindHyphens<Plug extends PlugBase = ""> =
+  `hyphens-${TailwindHyphensVariants<Plug>}`;
 type TailwindHyphensType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling how words should be hyphenated.
-     *@see {@link https://tailwindcss.com/docs/hyphens hyphens}
-     */
-    hyphens: TailwindHyphens<Plug>;
-};
-
-type TailwindLetterSpacingVariants<Plug extends PlugBase = ""> = "tighter" | "tight" | "normal" | "wide" | "wider" | "widest" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindLetterSpacing<Plug extends PlugBase = ""> = `tracking-${TailwindLetterSpacingVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling how words should be hyphenated.
+   *@see {@link https://tailwindcss.com/docs/hyphens hyphens}
+   */
+  hyphens: TailwindHyphens<Plug>;
+};
+
+type TailwindLetterSpacingVariants<Plug extends PlugBase = ""> =
+  | "tighter"
+  | "tight"
+  | "normal"
+  | "wide"
+  | "wider"
+  | "widest"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindLetterSpacing<Plug extends PlugBase = ""> =
+  `tracking-${TailwindLetterSpacingVariants<Plug>}`;
 type TailwindLetterSpacingType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the tracking (letter spacing) of an element.
-     *@see {@link https://tailwindcss.com/docs/letter-spacing letter spacing}
-     */
-    letterSpacing: TailwindLetterSpacing<Plug>;
-};
-
-type TailwindLineClampVariants<Plug extends PlugBase = ""> = "none" | "1" | "2" | "3" | "4" | "5" | "6" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindLineClamp<Plug extends PlugBase = ""> = `line-clamp-${TailwindLineClampVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the tracking (letter spacing) of an element.
+   *@see {@link https://tailwindcss.com/docs/letter-spacing letter spacing}
+   */
+  letterSpacing: TailwindLetterSpacing<Plug>;
+};
+
+type TailwindLineClampVariants<Plug extends PlugBase = ""> =
+  | "none"
+  | "1"
+  | "2"
+  | "3"
+  | "4"
+  | "5"
+  | "6"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindLineClamp<Plug extends PlugBase = ""> =
+  `line-clamp-${TailwindLineClampVariants<Plug>}`;
 type TailwindLineClampType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for clamping text to a specific number of lines.
-     *@see {@link https://tailwindcss.com/docs/line-clamp line clamp}
-     */
-    lineClamp: TailwindLineClamp<Plug>;
-};
-
-type TailwindListStyleImageVariants<Plug extends PlugBase = ""> = "none" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindListStyleImage<Plug extends PlugBase = ""> = `list-image-${TailwindListStyleImageVariants<Plug>}`;
+  /**
+   *@description Utilities for clamping text to a specific number of lines.
+   *@see {@link https://tailwindcss.com/docs/line-clamp line clamp}
+   */
+  lineClamp: TailwindLineClamp<Plug>;
+};
+
+type TailwindListStyleImageVariants<Plug extends PlugBase = ""> =
+  | "none"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindListStyleImage<Plug extends PlugBase = ""> =
+  `list-image-${TailwindListStyleImageVariants<Plug>}`;
 type TailwindListStyleImageType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the marker images for list items.
-     *@see {@link https://tailwindcss.com/docs/list-style-image list style image}
-     */
-    listStyleImage: TailwindListStyleImage<Plug>;
+  /**
+   *@description Utilities for controlling the marker images for list items.
+   *@see {@link https://tailwindcss.com/docs/list-style-image list style image}
+   */
+  listStyleImage: TailwindListStyleImage<Plug>;
 };
 
 type TailwindListStylePositionVariants = "inside" | "outside";
 type TailwindListStylePosition = `list-${TailwindListStylePositionVariants}`;
 type TailwindListStylePositionType = {
-    /**
-     *@description Utilities for controlling the position of bullets/numbers in lists.
-     *@see {@link https://tailwindcss.com/docs/list-style-position list style position}
-     */
-    listStylePosition: TailwindListStylePosition;
-};
-
-type TailwindListStyleTypeVariants<Plug extends PlugBase = ""> = "none" | "disc" | "decimal" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindListStyleType<Plug extends PlugBase = ""> = `list-${TailwindListStyleTypeVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the position of bullets/numbers in lists.
+   *@see {@link https://tailwindcss.com/docs/list-style-position list style position}
+   */
+  listStylePosition: TailwindListStylePosition;
+};
+
+type TailwindListStyleTypeVariants<Plug extends PlugBase = ""> =
+  | "none"
+  | "disc"
+  | "decimal"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindListStyleType<Plug extends PlugBase = ""> =
+  `list-${TailwindListStyleTypeVariants<Plug>}`;
 type TailwindListStyleTypeType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the bullet/number style of a list.
-     *@see {@link https://tailwindcss.com/docs/list-style-type list style type}
-     */
-    listStyleType: TailwindListStyleType<Plug>;
-};
-
-type TailwindTextAlignVariants = "left" | "center" | "right" | "justify" | "start" | "end";
+  /**
+   *@description Utilities for controlling the bullet/number style of a list.
+   *@see {@link https://tailwindcss.com/docs/list-style-type list style type}
+   */
+  listStyleType: TailwindListStyleType<Plug>;
+};
+
+type TailwindTextAlignVariants =
+  | "left"
+  | "center"
+  | "right"
+  | "justify"
+  | "start"
+  | "end";
 type TailwindTextAlign = `text-${TailwindTextAlignVariants}`;
 type TailwindTextAlignType = {
-    /**
-     *@description Utilities for controlling the alignment of text.
-     *@see {@link https://tailwindcss.com/docs/text-align text align}
-     */
-    textAlign: TailwindTextAlign;
-};
-
-type TailwindTextColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the text color of an element.
-     *@see {@link https://tailwindcss.com/docs/text-color text color}
-     */
-    color: `text-${TailwindColor | Pluggable<Plug>}`;
-};
-
-type TailwindTextDecoration = "underline" | "overline" | "line-through" | "no-underline";
+  /**
+   *@description Utilities for controlling the alignment of text.
+   *@see {@link https://tailwindcss.com/docs/text-align text align}
+   */
+  textAlign: TailwindTextAlign;
+};
+
+type TailwindTextColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the text color of an element.
+   *@see {@link https://tailwindcss.com/docs/text-color text color}
+   */
+  color: `text-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type TailwindTextDecoration =
+  | "underline"
+  | "overline"
+  | "line-through"
+  | "no-underline";
 type TailwindTextDecorationType = {
-    /**
-     *@description Utilities for controlling the decoration of text.
-     *@see {@link https://tailwindcss.com/docs/text-decoration text decoration}
-     */
-    textDecorationLine: TailwindTextDecoration;
-};
-
-type TailwindTextDecorationColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the color of text decorations.
-     *@see {@link https://tailwindcss.com/docs/text-decoration text decoration}
-     */
-    textDecorationColor: `decoration-${TailwindColor | Pluggable<Plug>}`;
-};
-
-type TailwindTextDecorationStyleVariants = "solid" | "double" | "dotted" | "dashed" | "wavy";
-type TailwindTextDecorationStyle = `decoration-${TailwindTextDecorationStyleVariants}`;
+  /**
+   *@description Utilities for controlling the decoration of text.
+   *@see {@link https://tailwindcss.com/docs/text-decoration text decoration}
+   */
+  textDecorationLine: TailwindTextDecoration;
+};
+
+type TailwindTextDecorationColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the color of text decorations.
+   *@see {@link https://tailwindcss.com/docs/text-decoration text decoration}
+   */
+  textDecorationColor: `decoration-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type TailwindTextDecorationStyleVariants =
+  | "solid"
+  | "double"
+  | "dotted"
+  | "dashed"
+  | "wavy";
+type TailwindTextDecorationStyle =
+  `decoration-${TailwindTextDecorationStyleVariants}`;
 type TailwindTextDecorationStyleType = {
-    /**
-     *@description Utilities for controlling the style of text decorations.
-     *@see {@link https://tailwindcss.com/docs/text-decoration-style text decoration style}
-     */
-    textDecorationStyle: TailwindTextDecorationStyle;
-};
-
-type TailwindTextDecorationThicknessVariants<Plug extends PlugBase = ""> = "auto" | "from-font" | "0" | "1" | "2" | "4" | "8" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindTextDecorationThickness<Plug extends PlugBase = ""> = `decoration-${TailwindTextDecorationThicknessVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the style of text decorations.
+   *@see {@link https://tailwindcss.com/docs/text-decoration-style text decoration style}
+   */
+  textDecorationStyle: TailwindTextDecorationStyle;
+};
+
+type TailwindTextDecorationThicknessVariants<Plug extends PlugBase = ""> =
+  | "auto"
+  | "from-font"
+  | "0"
+  | "1"
+  | "2"
+  | "4"
+  | "8"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindTextDecorationThickness<Plug extends PlugBase = ""> =
+  `decoration-${TailwindTextDecorationThicknessVariants<Plug>}`;
 type TailwindTextDecorationThicknessType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the thickness of text decorations.
-     *@see {@link https://tailwindcss.com/docs/text-decoration-thickness text decoration thickness}
-     */
-    textDecorationThickness: TailwindTextDecorationThickness<Plug>;
+  /**
+   *@description Utilities for controlling the thickness of text decorations.
+   *@see {@link https://tailwindcss.com/docs/text-decoration-thickness text decoration thickness}
+   */
+  textDecorationThickness: TailwindTextDecorationThickness<Plug>;
 };
 
-type TailwindTextIndentType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the amount of empty space shown before text in a block.
-     *@see {@link https://tailwindcss.com/docs/text-indent text indent}
-     */
-    textIndent: `indent-${TailwindSpacing | Pluggable<Plug>}`;
+type TailwindTextIndentType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the amount of empty space shown before text in a block.
+   *@see {@link https://tailwindcss.com/docs/text-indent text indent}
+   */
+  textIndent: `indent-${TailwindSpacing | Pluggable<Plug>}`;
 };
 
 type TailwindTextOverflowVariants = "clip" | "ellipsis";
 type TailwindTextOverflow = `text-${TailwindTextOverflowVariants}` | "truncate";
 type TailwindTextOverflowType = {
-    /**
-     *@description Utilities for controlling text overflow in an element.
-     *@see {@link https://tailwindcss.com/docs/text-overflow text overflow}
-     */
-    textOverflow: TailwindTextOverflow;
-};
-
-type TailwindTextTransform = "uppercase" | "lowercase" | "capitalize" | "normal-case";
+  /**
+   *@description Utilities for controlling text overflow in an element.
+   *@see {@link https://tailwindcss.com/docs/text-overflow text overflow}
+   */
+  textOverflow: TailwindTextOverflow;
+};
+
+type TailwindTextTransform =
+  | "uppercase"
+  | "lowercase"
+  | "capitalize"
+  | "normal-case";
 type TailwindTextTransformType = {
-    /**
-     *@description Utilities for controlling the transformation of text.
-     *@see {@link https://tailwindcss.com/docs/text-transform text transform}
-     */
-    textTransform: TailwindTextTransform;
-};
-
-type TailwindTextUnderlineOffsetVariants<Plug extends PlugBase = ""> = "auto" | "0" | "1" | "2" | "4" | "8" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindTextUnderlineOffset<Plug extends PlugBase = ""> = `underline-offset-${TailwindTextUnderlineOffsetVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the transformation of text.
+   *@see {@link https://tailwindcss.com/docs/text-transform text transform}
+   */
+  textTransform: TailwindTextTransform;
+};
+
+type TailwindTextUnderlineOffsetVariants<Plug extends PlugBase = ""> =
+  | "auto"
+  | "0"
+  | "1"
+  | "2"
+  | "4"
+  | "8"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindTextUnderlineOffset<Plug extends PlugBase = ""> =
+  `underline-offset-${TailwindTextUnderlineOffsetVariants<Plug>}`;
 type TailwindTextUnderlineOffsetType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the offset of a text underline.
-     *@see {@link https://tailwindcss.com/docs/text-underline-offset text underline offset}
-     */
-    textUnderlineOffset: TailwindTextUnderlineOffset<Plug>;
+  /**
+   *@description Utilities for controlling the offset of a text underline.
+   *@see {@link https://tailwindcss.com/docs/text-underline-offset text underline offset}
+   */
+  textUnderlineOffset: TailwindTextUnderlineOffset<Plug>;
 };
 
 type TailwindTextWrap = "wrap" | "nowrap" | "balance" | "pretty";
 type TailwindTextWrapType = {
-    /**
-     *@description Utilities for controlling how text wraps within an element.
-     *@see {@link https://tailwindcss.com/docs/text-wrap text wrap}
-     */
-    textWrap: `text-${TailwindTextWrap}`;
-};
-
-type TailwindVerticalAlignVariants = "baseline" | "top" | "middle" | "bottom" | "text-top" | "text-bottom" | "sub" | "super" | TailwindArbitrary;
+  /**
+   *@description Utilities for controlling how text wraps within an element.
+   *@see {@link https://tailwindcss.com/docs/text-wrap text wrap}
+   */
+  textWrap: `text-${TailwindTextWrap}`;
+};
+
+type TailwindVerticalAlignVariants =
+  | "baseline"
+  | "top"
+  | "middle"
+  | "bottom"
+  | "text-top"
+  | "text-bottom"
+  | "sub"
+  | "super"
+  | TailwindArbitrary;
 type TailwindVerticalAlign = `align-${TailwindVerticalAlignVariants}`;
 type TailwindVerticalAlignType = {
-    /**
-     *@description Utilities for controlling the vertical alignment of an inline or table-cell box.
-     *@see {@link https://tailwindcss.com/docs/vertical-align vertical align}
-     */
-    verticalAlign: TailwindVerticalAlign;
-};
-
-type TailwindWhitespaceVariants = "normal" | "nowrap" | "pre" | "pre-line" | "pre-wrap";
+  /**
+   *@description Utilities for controlling the vertical alignment of an inline or table-cell box.
+   *@see {@link https://tailwindcss.com/docs/vertical-align vertical align}
+   */
+  verticalAlign: TailwindVerticalAlign;
+};
+
+type TailwindWhitespaceVariants =
+  | "normal"
+  | "nowrap"
+  | "pre"
+  | "pre-line"
+  | "pre-wrap";
 type TailwindWhitespace = `whitespace-${TailwindWhitespaceVariants}`;
 type TailwindWhitespaceType = {
-    /**
-     *@description Utilities for controlling an element's white-space property.
-     *@see {@link https://tailwindcss.com/docs/whitespace whitespace}
-     */
-    whitespace: TailwindWhitespace;
+  /**
+   *@description Utilities for controlling an element's white-space property.
+   *@see {@link https://tailwindcss.com/docs/whitespace whitespace}
+   */
+  whitespace: TailwindWhitespace;
 };
 
 interface TailwindFontPlug {
-    content?: string;
-    fontFamily?: string;
-    fontSize?: string;
-    fontWeight?: string;
-    textColor?: string;
-    textIndent?: string;
-    textDecorationColor?: string;
-    textDecorationThickness?: string;
-    textUnderlineOffset?: string;
-    letterSpacing?: string;
-    lineHeight?: string;
-    lineClamp?: string;
-    listStyleType?: string;
-    listStyleImage?: string;
-    hyphens?: string;
+  content?: string;
+  fontFamily?: string;
+  fontSize?: string;
+  fontWeight?: string;
+  textColor?: string;
+  textIndent?: string;
+  textDecorationColor?: string;
+  textDecorationThickness?: string;
+  textUnderlineOffset?: string;
+  letterSpacing?: string;
+  lineHeight?: string;
+  lineClamp?: string;
+  listStyleType?: string;
+  listStyleImage?: string;
+  hyphens?: string;
 }
-interface TailwindFont<TailwindColor extends string, FontPlug extends TailwindFontPlug = {
+interface TailwindFont<
+  TailwindColor extends string,
+  FontPlug extends TailwindFontPlug = {
     content: "";
     fontFamily: "";
     fontSize: "";
@@ -2152,309 +3198,635 @@ interface TailwindFont<TailwindColor extends string, FontPlug extends TailwindFo
     listStyleType: "";
     listStyleImage: "";
     hyphens: "";
-}> extends TailwindTextWrapType, TailwindTextAlignType, TailwindTextOverflowType, TailwindTextTransformType, TailwindTextDecorationType, TailwindTextDecorationStyleType, TailwindFontStyleType, TailwindFontSmoothingType, TailwindFontVariantNumericType, TailwindContentType<FontPlug["content"]>, TailwindFontWeightType<FontPlug["fontSize"]>, TailwindFontFamilyType<FontPlug["fontFamily"]>, TailwindTextColorType<TailwindColor, FontPlug["textColor"]>, TailwindTextIndentType<TailwindColor, FontPlug["textIndent"]>, TailwindFontSizeType<FontPlug["fontSize"], FontPlug["lineHeight"]>, TailwindTextDecorationColorType<TailwindColor, FontPlug["textDecorationColor"]>, TailwindTextDecorationThicknessType<FontPlug["textDecorationThickness"]>, TailwindTextUnderlineOffsetType<FontPlug["textUnderlineOffset"]>, TailwindListStyleImageType<FontPlug["listStyleImage"]>, TailwindListStyleTypeType<FontPlug["listStyleType"]>, TailwindLetterSpacingType<FontPlug["letterSpacing"]>, TailwindLineHeightType<FontPlug["lineHeight"]>, TailwindLineClampType<FontPlug["lineClamp"]>, TailwindHyphensType<FontPlug["hyphens"]>, TailwindListStylePositionType, TailwindVerticalAlignType, TailwindWhitespaceType {
-}
-
-type TailwindAspectRatio<Plug extends PlugBase = ""> = "aspect-auto" | "aspect-square" | "aspect-video" | Pluggable<Plug> | TailwindArbitrary;
+  },
+> extends TailwindTextWrapType,
+    TailwindTextAlignType,
+    TailwindTextOverflowType,
+    TailwindTextTransformType,
+    TailwindTextDecorationType,
+    TailwindTextDecorationStyleType,
+    TailwindFontStyleType,
+    TailwindFontSmoothingType,
+    TailwindFontVariantNumericType,
+    TailwindContentType<FontPlug["content"]>,
+    TailwindFontWeightType<FontPlug["fontSize"]>,
+    TailwindFontFamilyType<FontPlug["fontFamily"]>,
+    TailwindTextColorType<TailwindColor, FontPlug["textColor"]>,
+    TailwindTextIndentType<TailwindColor, FontPlug["textIndent"]>,
+    TailwindFontSizeType<FontPlug["fontSize"], FontPlug["lineHeight"]>,
+    TailwindTextDecorationColorType<
+      TailwindColor,
+      FontPlug["textDecorationColor"]
+    >,
+    TailwindTextDecorationThicknessType<FontPlug["textDecorationThickness"]>,
+    TailwindTextUnderlineOffsetType<FontPlug["textUnderlineOffset"]>,
+    TailwindListStyleImageType<FontPlug["listStyleImage"]>,
+    TailwindListStyleTypeType<FontPlug["listStyleType"]>,
+    TailwindLetterSpacingType<FontPlug["letterSpacing"]>,
+    TailwindLineHeightType<FontPlug["lineHeight"]>,
+    TailwindLineClampType<FontPlug["lineClamp"]>,
+    TailwindHyphensType<FontPlug["hyphens"]>,
+    TailwindListStylePositionType,
+    TailwindVerticalAlignType,
+    TailwindWhitespaceType {}
+
+type TailwindAspectRatio<Plug extends PlugBase = ""> =
+  | "aspect-auto"
+  | "aspect-square"
+  | "aspect-video"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
 type TailwindAspectRatioType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the aspect ratio of an element.
-     *@see {@link https://tailwindcss.com/docs/aspect-ratio aspect ratio}
-     */
-    aspectRatio: TailwindAspectRatio<Plug>;
+  /**
+   *@description Utilities for controlling the aspect ratio of an element.
+   *@see {@link https://tailwindcss.com/docs/aspect-ratio aspect ratio}
+   */
+  aspectRatio: TailwindAspectRatio<Plug>;
 };
 
 type TailwindBoxDecorationBreakVariants = "clone" | "slice";
-type TailwindBoxDecorationBreak = `box-decoration-${TailwindBoxDecorationBreakVariants}`;
+type TailwindBoxDecorationBreak =
+  `box-decoration-${TailwindBoxDecorationBreakVariants}`;
 type TailwindBoxDecorationBreakType = {
-    /**
-     *@description Utilities for controlling how element fragments should be rendered across multiple lines, columns, or pages.
-     *@see {@link https://tailwindcss.com/docs/box-decoration-break box decoration break}
-     */
-    boxDecoration: TailwindBoxDecorationBreak;
+  /**
+   *@description Utilities for controlling how element fragments should be rendered across multiple lines, columns, or pages.
+   *@see {@link https://tailwindcss.com/docs/box-decoration-break box decoration break}
+   */
+  boxDecoration: TailwindBoxDecorationBreak;
 };
 
 type TailwindBoxSizingVariants = "border" | "content";
 type TailwindBoxSizing = `box-${TailwindBoxSizingVariants}`;
 type TailwindBoxSizingType = {
-    /**
-     *@description Utilities for controlling how the browser should calculate an element's total size.
-     *@see {@link https://tailwindcss.com/docs/box-sizing box sizing}
-     */
-    boxSizing: TailwindBoxSizing;
-};
-
-type TailwindBreakVariants = "auto" | "all" | "avoid" | "avoid-page" | "page" | "left" | "right" | "column";
+  /**
+   *@description Utilities for controlling how the browser should calculate an element's total size.
+   *@see {@link https://tailwindcss.com/docs/box-sizing box sizing}
+   */
+  boxSizing: TailwindBoxSizing;
+};
+
+type TailwindBreakVariants =
+  | "auto"
+  | "all"
+  | "avoid"
+  | "avoid-page"
+  | "page"
+  | "left"
+  | "right"
+  | "column";
 type TailwindBreakAfter = `break-after-${TailwindBreakVariants}`;
 type TailwindBreakBefore = `break-before-${TailwindBreakVariants}`;
-type TailwindBreakInsideVariants = "auto" | "avoid" | "avoid-page" | "avoid-column";
+type TailwindBreakInsideVariants =
+  | "auto"
+  | "avoid"
+  | "avoid-page"
+  | "avoid-column";
 type TailwindBreakInside = `break-inside-${TailwindBreakInsideVariants}`;
 type TailwindBreakType = {
-    /**
-     *@description Utilities for controlling how a column or page should break after an element.
-     *@see {@link https://tailwindcss.com/docs/break-after break after}
-     */
-    breakAfter: TailwindBreakAfter;
-    /**
-     *@description Utilities for controlling how a column or page should break before an element.
-     *@see {@link https://tailwindcss.com/docs/break-before break before}
-     */
-    breakBefore: TailwindBreakBefore;
-    /**
-     *@description Utilities for controlling how a column or page should break within an element.
-     *@see {@link https://tailwindcss.com/docs/break-inside break inside}
-     */
-    breakInside: TailwindBreakInside;
+  /**
+   *@description Utilities for controlling how a column or page should break after an element.
+   *@see {@link https://tailwindcss.com/docs/break-after break after}
+   */
+  breakAfter: TailwindBreakAfter;
+  /**
+   *@description Utilities for controlling how a column or page should break before an element.
+   *@see {@link https://tailwindcss.com/docs/break-before break before}
+   */
+  breakBefore: TailwindBreakBefore;
+  /**
+   *@description Utilities for controlling how a column or page should break within an element.
+   *@see {@link https://tailwindcss.com/docs/break-inside break inside}
+   */
+  breakInside: TailwindBreakInside;
 };
 
 type TailwindClearVariants = "left" | "right" | "both" | "none";
 type TailwindClear = `clear-${TailwindClearVariants}`;
 type TailwindClearType = {
-    /**
-     *@description Utilities for controlling the wrapping of content around an element.
-     *@see {@link https://tailwindcss.com/docs/clear clear}
-     */
-    clear: TailwindClear;
-};
-
-type TailwindColumnsVariants<Plug extends PlugBase = ""> = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "auto" | "3xs" | "2xs" | "xs" | "sm" | "md" | "lg" | "xl" | "2xl" | "3xl" | "4xl" | "5xl" | "6xl" | "7xl" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindColumns<Plug extends PlugBase = ""> = `columns-${TailwindColumnsVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling the wrapping of content around an element.
+   *@see {@link https://tailwindcss.com/docs/clear clear}
+   */
+  clear: TailwindClear;
+};
+
+type TailwindColumnsVariants<Plug extends PlugBase = ""> =
+  | "1"
+  | "2"
+  | "3"
+  | "4"
+  | "5"
+  | "6"
+  | "7"
+  | "8"
+  | "9"
+  | "10"
+  | "11"
+  | "12"
+  | "auto"
+  | "3xs"
+  | "2xs"
+  | "xs"
+  | "sm"
+  | "md"
+  | "lg"
+  | "xl"
+  | "2xl"
+  | "3xl"
+  | "4xl"
+  | "5xl"
+  | "6xl"
+  | "7xl"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindColumns<Plug extends PlugBase = ""> =
+  `columns-${TailwindColumnsVariants<Plug>}`;
 type TailwindColumnsType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the number of columns within an element.
-     *@see {@link https://tailwindcss.com/docs/columns columns}
-     */
-    columns: TailwindColumns<Plug>;
+  /**
+   *@description Utilities for controlling the number of columns within an element.
+   *@see {@link https://tailwindcss.com/docs/columns columns}
+   */
+  columns: TailwindColumns<Plug>;
 };
 
 type TailwindContainerType = {
-    /**
-     *@description A component for fixing an element's width to the current breakpoint.
-     *@see {@link https://tailwindcss.com/docs/container container}
-     */
-    container: "container";
-};
-
-type TailwindDisplay = "block" | "inline-block" | "inline" | "flex" | "inline-flex" | "table" | "inline-table" | "table-caption" | "table-cell" | "table-column" | "table-column-group" | "table-footer-group" | "table-header-group" | "table-row-group" | "table-row" | "flow-root" | "grid" | "inline-grid" | "contents" | "list-item" | "hidden";
+  /**
+   *@description A component for fixing an element's width to the current breakpoint.
+   *@see {@link https://tailwindcss.com/docs/container container}
+   */
+  container: "container";
+};
+
+type TailwindDisplay =
+  | "block"
+  | "inline-block"
+  | "inline"
+  | "flex"
+  | "inline-flex"
+  | "table"
+  | "inline-table"
+  | "table-caption"
+  | "table-cell"
+  | "table-column"
+  | "table-column-group"
+  | "table-footer-group"
+  | "table-header-group"
+  | "table-row-group"
+  | "table-row"
+  | "flow-root"
+  | "grid"
+  | "inline-grid"
+  | "contents"
+  | "list-item"
+  | "hidden";
 type TailwindDisplayType = {
-    /**
-     *@description Utilities for controlling the display box type of an element.
-     *@see {@link https://tailwindcss.com/docs/display display}
-     */
-    display: TailwindDisplay;
+  /**
+   *@description Utilities for controlling the display box type of an element.
+   *@see {@link https://tailwindcss.com/docs/display display}
+   */
+  display: TailwindDisplay;
 };
 
 type TailwindFloatsVariants = "right" | "left" | "none";
 type TailwindFloats = `float-${TailwindFloatsVariants}`;
 type TailwindFloatsType = {
-    /**
-     *@description Utilities for controlling the wrapping of content around an element.
-     *@see {@link https://tailwindcss.com/docs/float float}
-     */
-    float: TailwindFloats;
+  /**
+   *@description Utilities for controlling the wrapping of content around an element.
+   *@see {@link https://tailwindcss.com/docs/float float}
+   */
+  float: TailwindFloats;
 };
 
 type TailwindIsolation = "isolate" | "isolation-auto";
 type TailwindIsolationType = {
-    /**
-     *@description Utilities for controlling whether an element should explicitly create a new stacking context.
-     *@see {@link https://tailwindcss.com/docs/isolation isolation}
-     */
-    isolate: TailwindIsolation;
-};
-
-type TailwindObjectFitVariants = "contain" | "cover" | "fill" | "none" | "scale-down" | TailwindArbitrary;
+  /**
+   *@description Utilities for controlling whether an element should explicitly create a new stacking context.
+   *@see {@link https://tailwindcss.com/docs/isolation isolation}
+   */
+  isolate: TailwindIsolation;
+};
+
+type TailwindObjectFitVariants =
+  | "contain"
+  | "cover"
+  | "fill"
+  | "none"
+  | "scale-down"
+  | TailwindArbitrary;
 type TailwindObjectFit = `object-${TailwindObjectFitVariants}`;
 type TailwindObjectFitType = {
-    /**
-     *@description Utilities for controlling how a replaced element's content should be resized.
-     *@see {@link https://tailwindcss.com/docs/object-fit object fit}
-     */
-    objectFit: TailwindObjectFit;
-};
-
-type TailwindObjectPositionVariants<Plug extends PlugBase = ""> = "top" | "center" | "bottom" | "left" | "left-top" | "left-bottom" | "right" | "right-top" | "right-bottom" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindObjectPosition<Plug extends PlugBase = ""> = `object-${TailwindObjectPositionVariants<Plug>}`;
+  /**
+   *@description Utilities for controlling how a replaced element's content should be resized.
+   *@see {@link https://tailwindcss.com/docs/object-fit object fit}
+   */
+  objectFit: TailwindObjectFit;
+};
+
+type TailwindObjectPositionVariants<Plug extends PlugBase = ""> =
+  | "top"
+  | "center"
+  | "bottom"
+  | "left"
+  | "left-top"
+  | "left-bottom"
+  | "right"
+  | "right-top"
+  | "right-bottom"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindObjectPosition<Plug extends PlugBase = ""> =
+  `object-${TailwindObjectPositionVariants<Plug>}`;
 type TailwindObjectPositionType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling how a replaced element's content should be positioned within its container.
-     *@see {@link https://tailwindcss.com/docs/object-position object position}
-     */
-    objectPosition: TailwindObjectPosition<Plug>;
-};
-
-type TailwindOverflowVariants = "auto" | "hidden" | "clip" | "visible" | "scroll" | "x-auto" | "y-auto" | "x-hidden" | "y-hidden" | "x-clip" | "y-clip" | "x-visible" | "y-visible" | "x-scroll" | "y-scroll";
+  /**
+   *@description Utilities for controlling how a replaced element's content should be positioned within its container.
+   *@see {@link https://tailwindcss.com/docs/object-position object position}
+   */
+  objectPosition: TailwindObjectPosition<Plug>;
+};
+
+type TailwindOverflowVariants =
+  | "auto"
+  | "hidden"
+  | "clip"
+  | "visible"
+  | "scroll"
+  | "x-auto"
+  | "y-auto"
+  | "x-hidden"
+  | "y-hidden"
+  | "x-clip"
+  | "y-clip"
+  | "x-visible"
+  | "y-visible"
+  | "x-scroll"
+  | "y-scroll";
 type TailwindOverflow = `overflow-${TailwindOverflowVariants}`;
 type TailwindOverflowType = {
-    /**
-     *@description Utilities for controlling how an element handles content that is too large for the container.
-     *@see {@link https://tailwindcss.com/docs/overflow overflow}
-     */
-    overflow: TailwindOverflow;
-};
-
-type TailwindOverscrollBehaviorVariants = "auto" | "contain" | "none" | "y-auto" | "y-contain" | "y-none" | "x-auto" | "x-contain" | "x-none";
-type TailwindOverscrollBehavior = `overscroll-${TailwindOverscrollBehaviorVariants}`;
+  /**
+   *@description Utilities for controlling how an element handles content that is too large for the container.
+   *@see {@link https://tailwindcss.com/docs/overflow overflow}
+   */
+  overflow: TailwindOverflow;
+};
+
+type TailwindOverscrollBehaviorVariants =
+  | "auto"
+  | "contain"
+  | "none"
+  | "y-auto"
+  | "y-contain"
+  | "y-none"
+  | "x-auto"
+  | "x-contain"
+  | "x-none";
+type TailwindOverscrollBehavior =
+  `overscroll-${TailwindOverscrollBehaviorVariants}`;
 type TailwindOverscrollBehaviorType = {
-    /**
-     *@description Utilities for controlling how the browser behaves when reaching the boundary of a scrolling area.
-     *@see {@link https://tailwindcss.com/docs/overscroll-behavior overscroll behavior}
-     */
-    overscrollBehavior: TailwindOverscrollBehavior;
+  /**
+   *@description Utilities for controlling how the browser behaves when reaching the boundary of a scrolling area.
+   *@see {@link https://tailwindcss.com/docs/overscroll-behavior overscroll behavior}
+   */
+  overscrollBehavior: TailwindOverscrollBehavior;
 };
 
 type TailwindPosition = "static" | "fixed" | "absolute" | "sticky" | "relative";
 type TailwindPositionType = {
-    /**
-     *@description Utilities for controlling how an element is positioned in the DOM.
-     *@see {@link https://tailwindcss.com/docs/position position}
-     */
-    position: TailwindPosition;
-};
-type TailwindPositionValueVariants<TailwindSpacing extends string> = TailwindSpacing | "auto" | "1/2" | "1/3" | "2/3" | "1/4" | "2/4" | "3/4" | "full";
-type TailwindPositionValue<PositionType extends string, TailwindSpacing extends string> = PluginVariantsWithDirection<PositionType, TailwindPositionValueVariants<TailwindSpacing>>;
+  /**
+   *@description Utilities for controlling how an element is positioned in the DOM.
+   *@see {@link https://tailwindcss.com/docs/position position}
+   */
+  position: TailwindPosition;
+};
+type TailwindPositionValueVariants<TailwindSpacing extends string> =
+  | TailwindSpacing
+  | "auto"
+  | "1/2"
+  | "1/3"
+  | "2/3"
+  | "1/4"
+  | "2/4"
+  | "3/4"
+  | "full";
+type TailwindPositionValue<
+  PositionType extends string,
+  TailwindSpacing extends string,
+> = PluginVariantsWithDirection<
+  PositionType,
+  TailwindPositionValueVariants<TailwindSpacing>
+>;
 type TailwindPositionValueType<PositionValue extends string> = {
-    /**
-     *@description Utilities for controlling the placement of positioned elements.
-     *@see {@link https://tailwindcss.com/docs/top-right-bottom-left inset}
-     */
-    inset: TailwindPositionValue<"inset" | "inset-x" | "inset-y", PositionValue>;
-    /**
-     *@description Utilities for controlling the placement of positioned elements.
-     *@see {@link https://tailwindcss.com/docs/top-right-bottom-left top}
-     */
-    top: TailwindPositionValue<"top", PositionValue>;
-    /**
-     *@description Utilities for controlling the placement of positioned elements.
-     *@see {@link https://tailwindcss.com/docs/top-right-bottom-left bottom}
-     */
-    bottom: TailwindPositionValue<"bottom", PositionValue>;
-    /**
-     *@description Utilities for controlling the placement of positioned elements.
-     *@see {@link https://tailwindcss.com/docs/top-right-bottom-left left}
-     */
-    left: TailwindPositionValue<"left", PositionValue>;
-    /**
-     *@description Utilities for controlling the placement of positioned elements.
-     *@see {@link https://tailwindcss.com/docs/top-right-bottom-left right}
-     */
-    right: TailwindPositionValue<"right", PositionValue>;
+  /**
+   *@description Utilities for controlling the placement of positioned elements.
+   *@see {@link https://tailwindcss.com/docs/top-right-bottom-left inset}
+   */
+  inset: TailwindPositionValue<"inset" | "inset-x" | "inset-y", PositionValue>;
+  /**
+   *@description Utilities for controlling the placement of positioned elements.
+   *@see {@link https://tailwindcss.com/docs/top-right-bottom-left top}
+   */
+  top: TailwindPositionValue<"top", PositionValue>;
+  /**
+   *@description Utilities for controlling the placement of positioned elements.
+   *@see {@link https://tailwindcss.com/docs/top-right-bottom-left bottom}
+   */
+  bottom: TailwindPositionValue<"bottom", PositionValue>;
+  /**
+   *@description Utilities for controlling the placement of positioned elements.
+   *@see {@link https://tailwindcss.com/docs/top-right-bottom-left left}
+   */
+  left: TailwindPositionValue<"left", PositionValue>;
+  /**
+   *@description Utilities for controlling the placement of positioned elements.
+   *@see {@link https://tailwindcss.com/docs/top-right-bottom-left right}
+   */
+  right: TailwindPositionValue<"right", PositionValue>;
 };
 
 type TailwindVisibility = "visible" | "invisible";
 type TailwindVisibilityType = {
-    /**
-     *@description Utilities for controlling the visibility of an element.
-     *@see {@link https://tailwindcss.com/docs/visibility visibility}
-     */
-    visibility: TailwindVisibility;
-};
-
-type TailwindZIndexVariants<Plug extends PlugBase = ""> = "0" | "10" | "20" | "30" | "40" | "50" | Pluggable<Plug> | TailwindArbitrary;
+  /**
+   *@description Utilities for controlling the visibility of an element.
+   *@see {@link https://tailwindcss.com/docs/visibility visibility}
+   */
+  visibility: TailwindVisibility;
+};
+
+type TailwindZIndexVariants<Plug extends PlugBase = ""> =
+  | "0"
+  | "10"
+  | "20"
+  | "30"
+  | "40"
+  | "50"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
 type TailwindZIndexType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the stack order of an element.
-     *@see {@link https://tailwindcss.com/docs/z-index z index}
-     */
-    zIndex: "z-auto" | PluginVariantsWithDirection<"z", TailwindZIndexVariants<Plug>>;
+  /**
+   *@description Utilities for controlling the stack order of an element.
+   *@see {@link https://tailwindcss.com/docs/z-index z index}
+   */
+  zIndex:
+    | "z-auto"
+    | PluginVariantsWithDirection<"z", TailwindZIndexVariants<Plug>>;
 };
 
 interface TailwindLayoutPlug {
-    inset?: string;
-    zIndex?: string;
-    columns?: string;
-    aspectRatio?: string;
-    objectPosition?: string;
+  inset?: string;
+  zIndex?: string;
+  columns?: string;
+  aspectRatio?: string;
+  objectPosition?: string;
 }
-interface TailwindLayout<GlobalPlug extends string, LayoutPlug extends TailwindLayoutPlug = {
+interface TailwindLayout<
+  GlobalPlug extends string,
+  LayoutPlug extends TailwindLayoutPlug = {
     inset: "";
     zIndex: "";
     columns: "";
     aspectRatio: "";
     objectPosition: "";
-}> extends TailwindBoxDecorationBreakType, TailwindBoxSizingType, TailwindBreakType, TailwindClearType, TailwindFloatsType, TailwindDisplayType, TailwindOverflowType, TailwindIsolationType, TailwindObjectFitType, TailwindContainerType, TailwindVisibilityType, TailwindOverscrollBehaviorType, TailwindZIndexType<LayoutPlug["zIndex"]>, TailwindColumnsType<LayoutPlug["columns"]>, TailwindAspectRatioType<LayoutPlug["aspectRatio"]>, TailwindObjectPositionType<LayoutPlug["objectPosition"]>, TailwindPositionType, TailwindPositionValueType<GlobalPlug | Pluggable<LayoutPlug["inset"]>> {
-}
-
-type SizingVariants<TailwindSpacing extends string> = "auto" | "full" | "screen" | "min" | "max" | "fit" | TailwindSpacing;
-type MinSizingVariants = "0" | "full" | "min" | "max" | "fit" | TailwindArbitrary;
+  },
+> extends TailwindBoxDecorationBreakType,
+    TailwindBoxSizingType,
+    TailwindBreakType,
+    TailwindClearType,
+    TailwindFloatsType,
+    TailwindDisplayType,
+    TailwindOverflowType,
+    TailwindIsolationType,
+    TailwindObjectFitType,
+    TailwindContainerType,
+    TailwindVisibilityType,
+    TailwindOverscrollBehaviorType,
+    TailwindZIndexType<LayoutPlug["zIndex"]>,
+    TailwindColumnsType<LayoutPlug["columns"]>,
+    TailwindAspectRatioType<LayoutPlug["aspectRatio"]>,
+    TailwindObjectPositionType<LayoutPlug["objectPosition"]>,
+    TailwindPositionType,
+    TailwindPositionValueType<GlobalPlug | Pluggable<LayoutPlug["inset"]>> {}
+
+type SizingVariants<TailwindSpacing extends string> =
+  | "auto"
+  | "full"
+  | "screen"
+  | "min"
+  | "max"
+  | "fit"
+  | TailwindSpacing;
+type MinSizingVariants =
+  | "0"
+  | "full"
+  | "min"
+  | "max"
+  | "fit"
+  | TailwindArbitrary;
 
 type HeightFeature = "svh" | "lvh" | "dvh";
-type TailwindHeightVariants$1<TailwindSpacing extends string> = SizingVariants<TailwindSpacing> | "1/2" | "1/3" | "2/3" | "1/4" | "2/4" | "3/4" | "1/5" | "2/5" | "3/5" | "4/5" | "1/6" | "2/6" | "3/6" | "4/6" | "5/6";
-type TailwindHeightType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the height of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/height height}
-     */
-    height: `h-${TailwindHeightVariants$1<TailwindSpacing> | HeightFeature | Pluggable<Plug>}`;
-};
-type TailwindMinHeight$1<TailwindSpacing extends string, Plug extends PlugBase = ""> = `min-h-${"screen" | MinSizingVariants | TailwindSpacing | HeightFeature | Pluggable<Plug>}`;
-type TailwindMinHeightType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the minimum height of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/min-height min-height}
-     */
-    minHeight: TailwindMinHeight$1<TailwindSpacing, Plug>;
-};
-type TailwindMaxHeightType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the maximum height of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/max-height max-height}
-     */
-    maxHeight: `max-h-${"screen" | Exclude<SizingVariants<TailwindSpacing>, "auto"> | HeightFeature | Pluggable<Plug>}`;
-};
-
-type TailwindSizeVariants<TailwindSpacing extends string> = "1/2" | "1/3" | "2/3" | "1/4" | "2/4" | "3/4" | "1/5" | "2/5" | "3/5" | "4/5" | "1/6" | "2/6" | "3/6" | "4/6" | "5/6" | "1/12" | "2/12" | "3/12" | "4/12" | "5/12" | "6/12" | "7/12" | "8/12" | "9/12" | "10/12" | "11/12" | "auto" | "full" | "min" | "max" | "fit" | TailwindSpacing;
-type TailwindSizeType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the `width` and `height` of an element at the same time.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/size size}
-     */
-    size: `size-${TailwindSizeVariants<TailwindSpacing> | Pluggable<Plug>}`;
-};
-
-type TailwindSizingVariants$1<TailwindSpacing extends string> = SizingVariants<TailwindSpacing> | "1/2" | "2/3" | "1/4" | "2/4" | "3/4" | "1/5" | "2/5" | "3/5" | "4/5" | "1/6" | "2/6" | "3/6" | "4/6" | "5/6" | "1/12" | "2/12" | "3/12" | "4/12" | "5/12" | "6/12" | "7/12" | "8/12" | "9/12" | "10/12" | "11/12";
-type TailwindWidthType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the width of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/width width}
-     */
-    width: `w-${TailwindSizingVariants$1<TailwindSpacing> | Pluggable<Plug>}`;
-};
-type TailwindMinWidth$1<TailwindSpacing extends string, Plug extends PlugBase = ""> = `min-w-${MinSizingVariants | TailwindSpacing | Pluggable<Plug>}`;
-type TailwindMinWidthType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the minimum width of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/min-width min-width}
-     */
-    minWidth: TailwindMinWidth$1<TailwindSpacing, Plug>;
-};
-type TailwindMaxWidthVariants$1<TailwindSpacing extends string> = "none" | "xs" | "sm" | "md" | "lg" | "xl" | "2xl" | "3xl" | "4xl" | "5xl" | "6xl" | "7xl" | "full" | "min" | "max" | "fit" | "prose" | "screen-sm" | "screen-md" | "screen-lg" | "screen-xl" | "screen-2xl" | TailwindSpacing;
-type TailwindMaxWidth$1<TailwindSpacing extends string, Plug extends PlugBase = ""> = `max-w-${TailwindMaxWidthVariants$1<TailwindSpacing> | Pluggable<Plug>}`;
-type TailwindMaxWidthType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the maximum width of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/max-width max-width}
-     */
-    maxWidth: TailwindMaxWidth$1<TailwindSpacing, Plug>;
+type TailwindHeightVariants$1<TailwindSpacing extends string> =
+  | SizingVariants<TailwindSpacing>
+  | "1/2"
+  | "1/3"
+  | "2/3"
+  | "1/4"
+  | "2/4"
+  | "3/4"
+  | "1/5"
+  | "2/5"
+  | "3/5"
+  | "4/5"
+  | "1/6"
+  | "2/6"
+  | "3/6"
+  | "4/6"
+  | "5/6";
+type TailwindHeightType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the height of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/height height}
+   */
+  height: `h-${TailwindHeightVariants$1<TailwindSpacing> | HeightFeature | Pluggable<Plug>}`;
+};
+type TailwindMinHeight$1<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = `min-h-${"screen" | MinSizingVariants | TailwindSpacing | HeightFeature | Pluggable<Plug>}`;
+type TailwindMinHeightType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the minimum height of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/min-height min-height}
+   */
+  minHeight: TailwindMinHeight$1<TailwindSpacing, Plug>;
+};
+type TailwindMaxHeightType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the maximum height of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/max-height max-height}
+   */
+  maxHeight: `max-h-${"screen" | Exclude<SizingVariants<TailwindSpacing>, "auto"> | HeightFeature | Pluggable<Plug>}`;
+};
+
+type TailwindSizeVariants<TailwindSpacing extends string> =
+  | "1/2"
+  | "1/3"
+  | "2/3"
+  | "1/4"
+  | "2/4"
+  | "3/4"
+  | "1/5"
+  | "2/5"
+  | "3/5"
+  | "4/5"
+  | "1/6"
+  | "2/6"
+  | "3/6"
+  | "4/6"
+  | "5/6"
+  | "1/12"
+  | "2/12"
+  | "3/12"
+  | "4/12"
+  | "5/12"
+  | "6/12"
+  | "7/12"
+  | "8/12"
+  | "9/12"
+  | "10/12"
+  | "11/12"
+  | "auto"
+  | "full"
+  | "min"
+  | "max"
+  | "fit"
+  | TailwindSpacing;
+type TailwindSizeType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the `width` and `height` of an element at the same time.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/size size}
+   */
+  size: `size-${TailwindSizeVariants<TailwindSpacing> | Pluggable<Plug>}`;
+};
+
+type TailwindSizingVariants$1<TailwindSpacing extends string> =
+  | SizingVariants<TailwindSpacing>
+  | "1/2"
+  | "2/3"
+  | "1/4"
+  | "2/4"
+  | "3/4"
+  | "1/5"
+  | "2/5"
+  | "3/5"
+  | "4/5"
+  | "1/6"
+  | "2/6"
+  | "3/6"
+  | "4/6"
+  | "5/6"
+  | "1/12"
+  | "2/12"
+  | "3/12"
+  | "4/12"
+  | "5/12"
+  | "6/12"
+  | "7/12"
+  | "8/12"
+  | "9/12"
+  | "10/12"
+  | "11/12";
+type TailwindWidthType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the width of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/width width}
+   */
+  width: `w-${TailwindSizingVariants$1<TailwindSpacing> | Pluggable<Plug>}`;
+};
+type TailwindMinWidth$1<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = `min-w-${MinSizingVariants | TailwindSpacing | Pluggable<Plug>}`;
+type TailwindMinWidthType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the minimum width of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/min-width min-width}
+   */
+  minWidth: TailwindMinWidth$1<TailwindSpacing, Plug>;
+};
+type TailwindMaxWidthVariants$1<TailwindSpacing extends string> =
+  | "none"
+  | "xs"
+  | "sm"
+  | "md"
+  | "lg"
+  | "xl"
+  | "2xl"
+  | "3xl"
+  | "4xl"
+  | "5xl"
+  | "6xl"
+  | "7xl"
+  | "full"
+  | "min"
+  | "max"
+  | "fit"
+  | "prose"
+  | "screen-sm"
+  | "screen-md"
+  | "screen-lg"
+  | "screen-xl"
+  | "screen-2xl"
+  | TailwindSpacing;
+type TailwindMaxWidth$1<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = `max-w-${TailwindMaxWidthVariants$1<TailwindSpacing> | Pluggable<Plug>}`;
+type TailwindMaxWidthType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the maximum width of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/max-width max-width}
+   */
+  maxWidth: TailwindMaxWidth$1<TailwindSpacing, Plug>;
 };
 
 interface TailwindSizingPlug {
-    size?: string;
-    width?: string;
-    maxWidth?: string;
-    minWidth?: string;
-    height?: string;
-    maxHeight?: string;
-    minHeight?: string;
+  size?: string;
+  width?: string;
+  maxWidth?: string;
+  minWidth?: string;
+  height?: string;
+  maxHeight?: string;
+  minHeight?: string;
 }
-interface TailwindSizing<TailwindSpacing extends string, SizingPlug extends TailwindSizingPlug = {
+interface TailwindSizing<
+  TailwindSpacing extends string,
+  SizingPlug extends TailwindSizingPlug = {
     size: "";
     width: "";
     maxWidth: "";
@@ -2462,942 +3834,1458 @@ interface TailwindSizing<TailwindSpacing extends string, SizingPlug extends Tail
     height: "";
     maxHeight: "";
     minHeight: "";
-}> extends TailwindSizeType<TailwindSpacing, SizingPlug["size"]>, TailwindHeightType<TailwindSpacing, SizingPlug["height"]>, TailwindMinHeightType<TailwindSpacing, SizingPlug["minHeight"]>, TailwindMaxHeightType<TailwindSpacing, SizingPlug["maxHeight"]>, TailwindWidthType<TailwindSpacing, SizingPlug["width"]>, TailwindMinWidthType<TailwindSpacing, SizingPlug["minWidth"]>, TailwindMaxWidthType<TailwindSpacing, SizingPlug["maxWidth"]> {
-}
-
-type TailwindHeightVariants<TailwindSpacing extends string> = SizingVariants<TailwindSpacing> | "1/2" | "1/3" | "2/3" | "1/4" | "2/4" | "3/4" | "1/5" | "2/5" | "3/5" | "4/5" | "1/6" | "2/6" | "3/6" | "4/6" | "5/6";
-type ShortTailwindHeightType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the height of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/height height}
-     */
-    h: `h-${TailwindHeightVariants<TailwindSpacing> | Pluggable<Plug>}`;
-};
-type TailwindMinHeight<Plug extends PlugBase = ""> = `min-h-${"screen" | MinSizingVariants | Pluggable<Plug>}`;
+  },
+> extends TailwindSizeType<TailwindSpacing, SizingPlug["size"]>,
+    TailwindHeightType<TailwindSpacing, SizingPlug["height"]>,
+    TailwindMinHeightType<TailwindSpacing, SizingPlug["minHeight"]>,
+    TailwindMaxHeightType<TailwindSpacing, SizingPlug["maxHeight"]>,
+    TailwindWidthType<TailwindSpacing, SizingPlug["width"]>,
+    TailwindMinWidthType<TailwindSpacing, SizingPlug["minWidth"]>,
+    TailwindMaxWidthType<TailwindSpacing, SizingPlug["maxWidth"]> {}
+
+type TailwindHeightVariants<TailwindSpacing extends string> =
+  | SizingVariants<TailwindSpacing>
+  | "1/2"
+  | "1/3"
+  | "2/3"
+  | "1/4"
+  | "2/4"
+  | "3/4"
+  | "1/5"
+  | "2/5"
+  | "3/5"
+  | "4/5"
+  | "1/6"
+  | "2/6"
+  | "3/6"
+  | "4/6"
+  | "5/6";
+type ShortTailwindHeightType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the height of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/height height}
+   */
+  h: `h-${TailwindHeightVariants<TailwindSpacing> | Pluggable<Plug>}`;
+};
+type TailwindMinHeight<Plug extends PlugBase = ""> =
+  `min-h-${"screen" | MinSizingVariants | Pluggable<Plug>}`;
 type ShortTailwindMinHeightType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the minimum height of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/min-height min-height}
-     */
-    minH: TailwindMinHeight<Plug>;
-};
-type ShortTailwindMaxHeightType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the maximum height of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/max-height max-height}
-     */
-    maxH: `max-h-${"screen" | Exclude<SizingVariants<TailwindSpacing>, "auto"> | Pluggable<Plug>}`;
-};
-
-type TailwindSizingVariants<TailwindSpacing extends string> = SizingVariants<TailwindSpacing> | "1/2" | "2/3" | "1/4" | "2/4" | "3/4" | "1/5" | "2/5" | "3/5" | "4/5" | "1/6" | "2/6" | "3/6" | "4/6" | "5/6" | "1/12" | "2/12" | "3/12" | "4/12" | "5/12" | "6/12" | "7/12" | "8/12" | "9/12" | "10/12" | "11/12";
-type ShortTailwindWidthType<TailwindSpacing extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the width of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/width width}
-     */
-    w: `w-${TailwindSizingVariants<TailwindSpacing> | Pluggable<Plug>}`;
-};
-type TailwindMinWidth<Plug extends PlugBase = ""> = `min-w-${MinSizingVariants | Pluggable<Plug>}`;
+  /**
+   *@description Utilities for setting the minimum height of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/min-height min-height}
+   */
+  minH: TailwindMinHeight<Plug>;
+};
+type ShortTailwindMaxHeightType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the maximum height of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/max-height max-height}
+   */
+  maxH: `max-h-${"screen" | Exclude<SizingVariants<TailwindSpacing>, "auto"> | Pluggable<Plug>}`;
+};
+
+type TailwindSizingVariants<TailwindSpacing extends string> =
+  | SizingVariants<TailwindSpacing>
+  | "1/2"
+  | "2/3"
+  | "1/4"
+  | "2/4"
+  | "3/4"
+  | "1/5"
+  | "2/5"
+  | "3/5"
+  | "4/5"
+  | "1/6"
+  | "2/6"
+  | "3/6"
+  | "4/6"
+  | "5/6"
+  | "1/12"
+  | "2/12"
+  | "3/12"
+  | "4/12"
+  | "5/12"
+  | "6/12"
+  | "7/12"
+  | "8/12"
+  | "9/12"
+  | "10/12"
+  | "11/12";
+type ShortTailwindWidthType<
+  TailwindSpacing extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for setting the width of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/width width}
+   */
+  w: `w-${TailwindSizingVariants<TailwindSpacing> | Pluggable<Plug>}`;
+};
+type TailwindMinWidth<Plug extends PlugBase = ""> =
+  `min-w-${MinSizingVariants | Pluggable<Plug>}`;
 type ShortTailwindMinWidthType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the minimum width of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/min-width min-width}
-     */
-    minW: TailwindMinWidth<Plug>;
-};
-type TailwindMaxWidthVariants<Plug extends PlugBase = ""> = Pluggable<"0" | "none" | "xs" | "sm" | "md" | "lg" | "xl" | "2xl" | "3xl" | "4xl" | "5xl" | "6xl" | "7xl" | "full" | "min" | "max" | "fit" | "prose" | "screen-sm" | "screen-md" | "screen-lg" | "screen-xl" | "screen-2xl" | Plug | TailwindArbitrary>;
-type TailwindMaxWidth<Plug extends PlugBase = ""> = `max-w-${TailwindMaxWidthVariants<Plug>}`;
+  /**
+   *@description Utilities for setting the minimum width of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/min-width min-width}
+   */
+  minW: TailwindMinWidth<Plug>;
+};
+type TailwindMaxWidthVariants<Plug extends PlugBase = ""> = Pluggable<
+  | "0"
+  | "none"
+  | "xs"
+  | "sm"
+  | "md"
+  | "lg"
+  | "xl"
+  | "2xl"
+  | "3xl"
+  | "4xl"
+  | "5xl"
+  | "6xl"
+  | "7xl"
+  | "full"
+  | "min"
+  | "max"
+  | "fit"
+  | "prose"
+  | "screen-sm"
+  | "screen-md"
+  | "screen-lg"
+  | "screen-xl"
+  | "screen-2xl"
+  | Plug
+  | TailwindArbitrary
+>;
+type TailwindMaxWidth<Plug extends PlugBase = ""> =
+  `max-w-${TailwindMaxWidthVariants<Plug>}`;
 type ShortTailwindMaxWidthType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for setting the maximum width of an element.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/max-width max-width}
-     */
-    maxW: TailwindMaxWidth<Plug>;
-};
-
-interface ShortTailwindSizing<TailwindSpacing extends string, SizingPlug extends TailwindSizingPlug = {
-    size: "";
-    width: "";
-    maxWidth: "";
-    minWidth: "";
-    height: "";
-    maxHeight: "";
-    minHeight: "";
-}> extends ShortTailwindMinHeightType<SizingPlug["minHeight"]>, ShortTailwindHeightType<TailwindSpacing, SizingPlug["height"]>, ShortTailwindMaxHeightType<TailwindSpacing, SizingPlug["maxHeight"]>, ShortTailwindMinWidthType<SizingPlug["minWidth"]>, ShortTailwindMaxWidthType<SizingPlug["maxHeight"]>, ShortTailwindWidthType<TailwindSpacing, SizingPlug["width"]> {
-}
-
-type TailwindMarginVariants$1<Direction extends string, TailwindSpacing extends string> = PluginVariantsWithDirection<Direction, TailwindSpacing | "auto">;
-type TailwindMarginType<Margin extends string> = {
-    /**
-     *@description Utilities for controlling an element's margin all.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin}
-     */
-    margin: TailwindMarginVariants$1<"m", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin x.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-x}
-     */
-    marginX: TailwindMarginVariants$1<"mx", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin y.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-y}
-     */
-    marginY: TailwindMarginVariants$1<"my", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin top.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-top}
-     */
-    marginTop: TailwindMarginVariants$1<"mt", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin bottom.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-bottom}
-     */
-    marginBottom: TailwindMarginVariants$1<"mb", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin right.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-right}
-     */
-    marginRight: TailwindMarginVariants$1<"mr", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin left.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-left}
-     */
-    marginLeft: TailwindMarginVariants$1<"ml", Margin>;
-};
-
-type TailwindPaddingType<Padding extends string> = {
-    /**
-     *@description Utilities for controlling an element's padding all.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding}
-     */
-    padding: PluginVariantsWithDirection<"p", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding x.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-x}
-     */
-    paddingX: PluginVariantsWithDirection<"px", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding y.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-y}
-     */
-    paddingY: PluginVariantsWithDirection<"py", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding top.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-top}
-     */
-    paddingTop: PluginVariantsWithDirection<"pt", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding bottom.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-bottom}
-     */
-    paddingBottom: PluginVariantsWithDirection<"pb", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding right.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-right}
-     */
-    paddingRight: PluginVariantsWithDirection<"pr", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding left.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-left}
-     */
-    paddingLeft: PluginVariantsWithDirection<"pl", Padding>;
+  /**
+   *@description Utilities for setting the maximum width of an element.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/max-width max-width}
+   */
+  maxW: TailwindMaxWidth<Plug>;
 };
 
-type TailwindSpaceVariants<Direction extends string, TailwindSpacing extends string> = PluginVariantsWithDirection<Direction, TailwindSpacing | "reverse ">;
+interface ShortTailwindSizing<
+  TailwindSpacing extends string,
+  SizingPlug extends TailwindSizingPlug = {
+    size: "";
+    width: "";
+    maxWidth: "";
+    minWidth: "";
+    height: "";
+    maxHeight: "";
+    minHeight: "";
+  },
+> extends ShortTailwindMinHeightType<SizingPlug["minHeight"]>,
+    ShortTailwindHeightType<TailwindSpacing, SizingPlug["height"]>,
+    ShortTailwindMaxHeightType<TailwindSpacing, SizingPlug["maxHeight"]>,
+    ShortTailwindMinWidthType<SizingPlug["minWidth"]>,
+    ShortTailwindMaxWidthType<SizingPlug["maxHeight"]>,
+    ShortTailwindWidthType<TailwindSpacing, SizingPlug["width"]> {}
+
+type TailwindMarginVariants$1<
+  Direction extends string,
+  TailwindSpacing extends string,
+> = PluginVariantsWithDirection<Direction, TailwindSpacing | "auto">;
+type TailwindMarginType<Margin extends string> = {
+  /**
+   *@description Utilities for controlling an element's margin all.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin}
+   */
+  margin: TailwindMarginVariants$1<"m", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin x.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-x}
+   */
+  marginX: TailwindMarginVariants$1<"mx", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin y.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-y}
+   */
+  marginY: TailwindMarginVariants$1<"my", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin top.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-top}
+   */
+  marginTop: TailwindMarginVariants$1<"mt", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin bottom.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-bottom}
+   */
+  marginBottom: TailwindMarginVariants$1<"mb", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin right.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-right}
+   */
+  marginRight: TailwindMarginVariants$1<"mr", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin left.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-left}
+   */
+  marginLeft: TailwindMarginVariants$1<"ml", Margin>;
+};
+
+type TailwindPaddingType<Padding extends string> = {
+  /**
+   *@description Utilities for controlling an element's padding all.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding}
+   */
+  padding: PluginVariantsWithDirection<"p", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding x.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-x}
+   */
+  paddingX: PluginVariantsWithDirection<"px", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding y.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-y}
+   */
+  paddingY: PluginVariantsWithDirection<"py", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding top.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-top}
+   */
+  paddingTop: PluginVariantsWithDirection<"pt", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding bottom.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-bottom}
+   */
+  paddingBottom: PluginVariantsWithDirection<"pb", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding right.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-right}
+   */
+  paddingRight: PluginVariantsWithDirection<"pr", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding left.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-left}
+   */
+  paddingLeft: PluginVariantsWithDirection<"pl", Padding>;
+};
+
+type TailwindSpaceVariants<
+  Direction extends string,
+  TailwindSpacing extends string,
+> = PluginVariantsWithDirection<Direction, TailwindSpacing | "reverse ">;
 type TailwindSpaceType<Space extends string> = {
-    /**
-     *@description Utilities for controlling the space(**margin**) between child elements `> * + *`.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/space space-x}
-     */
-    spaceX: TailwindSpaceVariants<"space-x", Space>;
-    /**
-     *@description Utilities for controlling the space(**margin**) between child elements `> * + *`.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/space space-y}
-     */
-    spaceY: TailwindSpaceVariants<"space-y", Space>;
+  /**
+   *@description Utilities for controlling the space(**margin**) between child elements `> * + *`.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/space space-x}
+   */
+  spaceX: TailwindSpaceVariants<"space-x", Space>;
+  /**
+   *@description Utilities for controlling the space(**margin**) between child elements `> * + *`.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/space space-y}
+   */
+  spaceY: TailwindSpaceVariants<"space-y", Space>;
 };
 
 interface TailwindSpacingPlug {
-    padding?: string;
-    margin?: string;
-    space?: string;
+  padding?: string;
+  margin?: string;
+  space?: string;
 }
-interface TailwindSpacing<TailwindSpacing extends string, SpacingPlug extends TailwindSpacingPlug = {
+interface TailwindSpacing<
+  TailwindSpacing extends string,
+  SpacingPlug extends TailwindSpacingPlug = {
     padding: "";
     margin: "";
     space: "";
-}> extends TailwindMarginType<TailwindSpacing | Pluggable<SpacingPlug["margin"]>>, TailwindPaddingType<TailwindSpacing | Pluggable<SpacingPlug["padding"]>>, TailwindSpaceType<TailwindSpacing | Pluggable<SpacingPlug["space"]>> {
-}
-
-type TailwindMarginVariants<Direction extends string, TailwindSpacing extends string> = PluginVariantsWithDirection<Direction, TailwindSpacing | "auto">;
+  },
+> extends TailwindMarginType<
+      TailwindSpacing | Pluggable<SpacingPlug["margin"]>
+    >,
+    TailwindPaddingType<TailwindSpacing | Pluggable<SpacingPlug["padding"]>>,
+    TailwindSpaceType<TailwindSpacing | Pluggable<SpacingPlug["space"]>> {}
+
+type TailwindMarginVariants<
+  Direction extends string,
+  TailwindSpacing extends string,
+> = PluginVariantsWithDirection<Direction, TailwindSpacing | "auto">;
 type ShortTailwindMarginType<Margin extends string> = {
-    /**
-     *@description Utilities for controlling an element's margin all.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin}
-     */
-    m: TailwindMarginVariants<"m", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin x.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-x}
-     */
-    mx: TailwindMarginVariants<"mx", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin y.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-y}
-     */
-    my: TailwindMarginVariants<"my", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin top.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-top}
-     */
-    mt: TailwindMarginVariants<"mt", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin bottom.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-bottom}
-     */
-    mb: TailwindMarginVariants<"mb", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin right.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-right}
-     */
-    mr: TailwindMarginVariants<"mr", Margin>;
-    /**
-     *@description Utilities for controlling an element's margin left.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/margin margin-left}
-     */
-    ml: TailwindMarginVariants<"ml", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin all.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin}
+   */
+  m: TailwindMarginVariants<"m", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin x.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-x}
+   */
+  mx: TailwindMarginVariants<"mx", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin y.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-y}
+   */
+  my: TailwindMarginVariants<"my", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin top.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-top}
+   */
+  mt: TailwindMarginVariants<"mt", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin bottom.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-bottom}
+   */
+  mb: TailwindMarginVariants<"mb", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin right.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-right}
+   */
+  mr: TailwindMarginVariants<"mr", Margin>;
+  /**
+   *@description Utilities for controlling an element's margin left.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/margin margin-left}
+   */
+  ml: TailwindMarginVariants<"ml", Margin>;
 };
 
 type ShortTailwindPaddingType<Padding extends string> = {
-    /**
-     *@description Utilities for controlling an element's padding all.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding}
-     */
-    p: PluginVariantsWithDirection<"p", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding x.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-x}
-     */
-    px: PluginVariantsWithDirection<"px", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding y.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-y}
-     */
-    py: PluginVariantsWithDirection<"py", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding top.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-top}
-     */
-    pt: PluginVariantsWithDirection<"pt", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding bottom.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-bottom}
-     */
-    pb: PluginVariantsWithDirection<"pb", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding right.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-right}
-     */
-    pr: PluginVariantsWithDirection<"pr", Padding>;
-    /**
-     *@description Utilities for controlling an element's padding left.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/padding padding-left}
-     */
-    pl: PluginVariantsWithDirection<"pl", Padding>;
-};
-
-interface ShortTailwindSpacing<TailwindSpacing extends string, SpacingPlug extends {
+  /**
+   *@description Utilities for controlling an element's padding all.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding}
+   */
+  p: PluginVariantsWithDirection<"p", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding x.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-x}
+   */
+  px: PluginVariantsWithDirection<"px", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding y.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-y}
+   */
+  py: PluginVariantsWithDirection<"py", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding top.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-top}
+   */
+  pt: PluginVariantsWithDirection<"pt", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding bottom.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-bottom}
+   */
+  pb: PluginVariantsWithDirection<"pb", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding right.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-right}
+   */
+  pr: PluginVariantsWithDirection<"pr", Padding>;
+  /**
+   *@description Utilities for controlling an element's padding left.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/padding padding-left}
+   */
+  pl: PluginVariantsWithDirection<"pl", Padding>;
+};
+
+interface ShortTailwindSpacing<
+  TailwindSpacing extends string,
+  SpacingPlug extends {
     padding?: string;
     margin?: string;
     space?: string;
-} = {
+  } = {
     padding: "";
     margin: "";
     space: "";
-}> extends ShortTailwindMarginType<TailwindSpacing | Pluggable<SpacingPlug["margin"]>>, ShortTailwindPaddingType<TailwindSpacing | Pluggable<SpacingPlug["padding"]>>, TailwindSpaceType<TailwindSpacing | Pluggable<SpacingPlug["space"]>> {
-}
-
-type TailwindFillType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for styling the fill of SVG elements.
-     *@see {@link https://tailwindcss.com/docs/fill fill}
-     */
-    fill: `fill-${TailwindColor | Pluggable<Plug>}`;
-};
-
-type TailwindStrokeType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for styling the stroke of SVG elements.
-     *@see {@link https://tailwindcss.com/docs/stroke stroke}
-     */
-    stroke: `stroke-${TailwindColor | Pluggable<Plug>}`;
-};
-
-type TailwindStrokeWidthVariants$1<Plug extends PlugBase = ""> = "0" | "1" | "2" | TailwindArbitrary | Pluggable<Plug>;
-type TailwindStrokeWidth$1<Plug extends PlugBase = ""> = `stroke-${TailwindStrokeWidthVariants$1<Plug>}`;
+  },
+> extends ShortTailwindMarginType<
+      TailwindSpacing | Pluggable<SpacingPlug["margin"]>
+    >,
+    ShortTailwindPaddingType<
+      TailwindSpacing | Pluggable<SpacingPlug["padding"]>
+    >,
+    TailwindSpaceType<TailwindSpacing | Pluggable<SpacingPlug["space"]>> {}
+
+type TailwindFillType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for styling the fill of SVG elements.
+   *@see {@link https://tailwindcss.com/docs/fill fill}
+   */
+  fill: `fill-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type TailwindStrokeType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for styling the stroke of SVG elements.
+   *@see {@link https://tailwindcss.com/docs/stroke stroke}
+   */
+  stroke: `stroke-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type TailwindStrokeWidthVariants$1<Plug extends PlugBase = ""> =
+  | "0"
+  | "1"
+  | "2"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
+type TailwindStrokeWidth$1<Plug extends PlugBase = ""> =
+  `stroke-${TailwindStrokeWidthVariants$1<Plug>}`;
 type TailwindStrokeWidthType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for styling the stroke width of SVG elements.
-     *@see {@link https://tailwindcss.com/docs/stroke-width stroke width}
-     */
-    strokeWidth: TailwindStrokeWidth$1<Plug>;
+  /**
+   *@description Utilities for styling the stroke width of SVG elements.
+   *@see {@link https://tailwindcss.com/docs/stroke-width stroke width}
+   */
+  strokeWidth: TailwindStrokeWidth$1<Plug>;
 };
 
 interface TailwindSvgPlug {
-    fill?: string;
-    stroke?: string;
-    strokeWidth?: string;
+  fill?: string;
+  stroke?: string;
+  strokeWidth?: string;
 }
-interface TailwindSvg<TailwindColor extends string, SvgPlug extends {
+interface TailwindSvg<
+  TailwindColor extends string,
+  SvgPlug extends {
     fill?: string;
     stroke?: string;
     strokeWidth?: string;
-} = {
+  } = {
     fill: "";
     stroke: "";
     strokeWidth: "";
-}> extends TailwindStrokeWidthType<SvgPlug["strokeWidth"]>, TailwindStrokeType<TailwindColor, SvgPlug["stroke"]>, TailwindFillType<TailwindColor, SvgPlug["fill"]> {
-}
-
-type TailwindStrokeWidthVariants<Plug extends PlugBase = ""> = "0" | "1" | "2" | TailwindArbitrary | Pluggable<Plug>;
-type TailwindStrokeWidth<Plug extends PlugBase = ""> = `stroke-${TailwindStrokeWidthVariants<Plug>}`;
+  },
+> extends TailwindStrokeWidthType<SvgPlug["strokeWidth"]>,
+    TailwindStrokeType<TailwindColor, SvgPlug["stroke"]>,
+    TailwindFillType<TailwindColor, SvgPlug["fill"]> {}
+
+type TailwindStrokeWidthVariants<Plug extends PlugBase = ""> =
+  | "0"
+  | "1"
+  | "2"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
+type TailwindStrokeWidth<Plug extends PlugBase = ""> =
+  `stroke-${TailwindStrokeWidthVariants<Plug>}`;
 type ShortTailwindStrokeWidthType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for styling the stroke width of SVG elements.
-     *@see {@link https://tailwindcss.com/docs/stroke-width stroke width}
-     */
-    strokeW: TailwindStrokeWidth<Plug>;
+  /**
+   *@description Utilities for styling the stroke width of SVG elements.
+   *@see {@link https://tailwindcss.com/docs/stroke-width stroke width}
+   */
+  strokeW: TailwindStrokeWidth<Plug>;
 };
 
-interface ShortTailwindSvg<TailwindColor extends string, SvgPlug extends {
+interface ShortTailwindSvg<
+  TailwindColor extends string,
+  SvgPlug extends {
     fill?: string;
     stroke?: string;
     strokeWidth?: string;
-} = {
+  } = {
     fill: "";
     stroke: "";
     strokeWidth: "";
-}> extends ShortTailwindStrokeWidthType<SvgPlug["strokeWidth"]>, TailwindStrokeType<TailwindColor, SvgPlug["stroke"]>, TailwindFillType<TailwindColor, SvgPlug["fill"]> {
-}
+  },
+> extends ShortTailwindStrokeWidthType<SvgPlug["strokeWidth"]>,
+    TailwindStrokeType<TailwindColor, SvgPlug["stroke"]>,
+    TailwindFillType<TailwindColor, SvgPlug["fill"]> {}
 
 type TailwindBorderCollapse = "border-collapse" | "border-separate";
 type TailwindBorderCollapseType = {
-    /**
-     *@description Utilities for controlling whether table borders should collapse or be separated.
-     *@see {@link https://tailwindcss.com/docs/border-collapse border collapse}
-     */
-    borderCollapse: TailwindBorderCollapse;
+  /**
+   *@description Utilities for controlling whether table borders should collapse or be separated.
+   *@see {@link https://tailwindcss.com/docs/border-collapse border collapse}
+   */
+  borderCollapse: TailwindBorderCollapse;
 };
 
 type TailwindBorderSpacingType<TailwindSpacing extends string> = {
-    /**
-     *@description Utilities for controlling the spacing between table borders.
-     *@see {@link https://tailwindcss.com/docs/border-spacing border-spacing}
-     */
-    borderSpacing: PluginVariants<"border-spacing", TailwindSpacing>;
-    /**
-     *@description Utilities for controlling the spacing between table borders x direction.
-     *@see {@link https://tailwindcss.com/docs/border-spacing border-spacing-x}
-     */
-    borderSpacingX: PluginVariants<"border-spacing-x", TailwindSpacing>;
-    /**
-     *@description Utilities for controlling the spacing between table borders y direction.
-     *@see {@link https://tailwindcss.com/docs/border-spacing border-spacing-y}
-     */
-    borderSpacingY: PluginVariants<"border-spacing-y", TailwindSpacing>;
+  /**
+   *@description Utilities for controlling the spacing between table borders.
+   *@see {@link https://tailwindcss.com/docs/border-spacing border-spacing}
+   */
+  borderSpacing: PluginVariants<"border-spacing", TailwindSpacing>;
+  /**
+   *@description Utilities for controlling the spacing between table borders x direction.
+   *@see {@link https://tailwindcss.com/docs/border-spacing border-spacing-x}
+   */
+  borderSpacingX: PluginVariants<"border-spacing-x", TailwindSpacing>;
+  /**
+   *@description Utilities for controlling the spacing between table borders y direction.
+   *@see {@link https://tailwindcss.com/docs/border-spacing border-spacing-y}
+   */
+  borderSpacingY: PluginVariants<"border-spacing-y", TailwindSpacing>;
 };
 
 type TailwindCaptionSideVariants = "top" | "bottom";
 type TailwindCaptionSide = `caption-${TailwindCaptionSideVariants}`;
 type TailwindCaptionSideType = {
-    /**
-     *@description Utilities for controlling the alignment of a caption element inside of a table.
-     *@see {@link https://tailwindcss.com/docs/caption-side caption side}
-     */
-    captionSide: TailwindCaptionSide;
+  /**
+   *@description Utilities for controlling the alignment of a caption element inside of a table.
+   *@see {@link https://tailwindcss.com/docs/caption-side caption side}
+   */
+  captionSide: TailwindCaptionSide;
 };
 
 type TailwindTableLayout = "table-auto" | "table-fixed";
 type TailwindTableLayoutType = {
-    /**
-     *@description Utilities for controlling the table layout algorithm.
-     *@see {@link https://tailwindcss.com/docs/table-layout table layout}
-     */
-    tableLayout: TailwindTableLayout;
+  /**
+   *@description Utilities for controlling the table layout algorithm.
+   *@see {@link https://tailwindcss.com/docs/table-layout table layout}
+   */
+  tableLayout: TailwindTableLayout;
 };
 
 interface TailwindTablesPlug {
-    borderSpacing?: string;
+  borderSpacing?: string;
 }
-interface TailwindTables<TailwindSpacing extends string, TablesPlug extends TailwindTablesPlug = {
+interface TailwindTables<
+  TailwindSpacing extends string,
+  TablesPlug extends TailwindTablesPlug = {
     borderSpacing: "";
-}> extends TailwindBorderCollapseType, TailwindBorderSpacingType<TailwindSpacing | Pluggable<TablesPlug["borderSpacing"]>>, TailwindTableLayoutType, TailwindCaptionSideType {
-}
+  },
+> extends TailwindBorderCollapseType,
+    TailwindBorderSpacingType<
+      TailwindSpacing | Pluggable<TablesPlug["borderSpacing"]>
+    >,
+    TailwindTableLayoutType,
+    TailwindCaptionSideType {}
 
 type TailwindHardwareAccelerationType = {
-    /**
-     *@description If your transition performs better when rendered by the GPU instead of the CPU, you can force hardware acceleration by adding the `transform-gpu` utility
-     *@see {@link https://tailwindcss.com/docs/translate#hardware-acceleration transform gpu}
-     */
-    transformGPU: "transform-gpu";
-};
-
-type TailwindRotateVariants<Plug extends PlugBase = ""> = "0" | "1" | "2" | "3" | "6" | "12" | "45" | "90" | "180" | TailwindArbitrary | Pluggable<Plug>;
+  /**
+   *@description If your transition performs better when rendered by the GPU instead of the CPU, you can force hardware acceleration by adding the `transform-gpu` utility
+   *@see {@link https://tailwindcss.com/docs/translate#hardware-acceleration transform gpu}
+   */
+  transformGPU: "transform-gpu";
+};
+
+type TailwindRotateVariants<Plug extends PlugBase = ""> =
+  | "0"
+  | "1"
+  | "2"
+  | "3"
+  | "6"
+  | "12"
+  | "45"
+  | "90"
+  | "180"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
 type TailwindRotateType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for rotating elements with transform.
-     *@see {@link https://tailwindcss.com/docs/rotate rotate}
-     *@unit Gap `1` = `1deg`
-     */
-    transformRotate: PluginVariantsWithDirection<"rotate", TailwindRotateVariants<Plug>>;
+  /**
+   *@description Utilities for rotating elements with transform.
+   *@see {@link https://tailwindcss.com/docs/rotate rotate}
+   *@unit Gap `1` = `1deg`
+   */
+  transformRotate: PluginVariantsWithDirection<
+    "rotate",
+    TailwindRotateVariants<Plug>
+  >;
 };
 
 type TailwindScaleType<Scale extends string> = {
-    /**
-     *@description Utilities for scaling elements with transform.
-     *@see {@link https://tailwindcss.com/docs/scale scale}
-     */
-    transformScale: PluginVariantsWithDirection<"scale", Scale>;
-    /**
-     *@description Utilities for scaling elements with transform x direction.
-     *@see {@link https://tailwindcss.com/docs/scale scale-x}
-     */
-    transformScaleX: PluginVariantsWithDirection<"scale-x", Scale>;
-    /**
-     *@description Utilities for scaling elements with transform y direction.
-     *@see {@link https://tailwindcss.com/docs/scale scale-y}
-     */
-    transformScaleY: PluginVariantsWithDirection<"scale-y", Scale>;
+  /**
+   *@description Utilities for scaling elements with transform.
+   *@see {@link https://tailwindcss.com/docs/scale scale}
+   */
+  transformScale: PluginVariantsWithDirection<"scale", Scale>;
+  /**
+   *@description Utilities for scaling elements with transform x direction.
+   *@see {@link https://tailwindcss.com/docs/scale scale-x}
+   */
+  transformScaleX: PluginVariantsWithDirection<"scale-x", Scale>;
+  /**
+   *@description Utilities for scaling elements with transform y direction.
+   *@see {@link https://tailwindcss.com/docs/scale scale-y}
+   */
+  transformScaleY: PluginVariantsWithDirection<"scale-y", Scale>;
 };
 
 type TailwindSkewType<Skew extends string> = {
-    /**
-     *@description Utilities for skewing elements with transform x direction
-     *@see {@link https://tailwindcss.com/docs/skew skew-x}
-     */
-    transformSkewX: PluginVariantsWithDirection<"skew-x", Skew>;
-    /**
-     *@description Utilities for skewing elements with transform y direction
-     *@unit Gap `1` = `1deg`
-     *@see {@link https://tailwindcss.com/docs/skew skew-y}
-     */
-    transformSkewY: PluginVariantsWithDirection<"skew-y", Skew>;
-};
-
-type TailwindTransformOriginVariants<Plug extends PlugBase = ""> = "center" | "top" | "top-right" | "right" | "bottom-right" | "bottom" | "bottom-left" | "left" | "top-left" | TailwindArbitrary | Pluggable<Plug>;
+  /**
+   *@description Utilities for skewing elements with transform x direction
+   *@see {@link https://tailwindcss.com/docs/skew skew-x}
+   */
+  transformSkewX: PluginVariantsWithDirection<"skew-x", Skew>;
+  /**
+   *@description Utilities for skewing elements with transform y direction
+   *@unit Gap `1` = `1deg`
+   *@see {@link https://tailwindcss.com/docs/skew skew-y}
+   */
+  transformSkewY: PluginVariantsWithDirection<"skew-y", Skew>;
+};
+
+type TailwindTransformOriginVariants<Plug extends PlugBase = ""> =
+  | "center"
+  | "top"
+  | "top-right"
+  | "right"
+  | "bottom-right"
+  | "bottom"
+  | "bottom-left"
+  | "left"
+  | "top-left"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
 type TailwindTransformOriginType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for specifying the origin for an element's transformations.
-     *@see {@link https://tailwindcss.com/docs/transform-origin transform origin}
-     */
-    transformOrigin: PluginVariants<"origin", TailwindTransformOriginVariants<Plug>>;
+  /**
+   *@description Utilities for specifying the origin for an element's transformations.
+   *@see {@link https://tailwindcss.com/docs/transform-origin transform origin}
+   */
+  transformOrigin: PluginVariants<
+    "origin",
+    TailwindTransformOriginVariants<Plug>
+  >;
 };
 
 type TailwindTranslateType<Translate extends string> = {
-    /**
-     *@description Utilities for translating elements with transform.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/translate translate}
-     */
-    transformTranslate: PluginVariantsWithDirection<"translate", Translate>;
-    /**
-     *@description Utilities for translating elements with transform x direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/translate translate-x}
-     */
-    transformTranslateX: PluginVariantsWithDirection<"translate-x", Translate>;
-    /**
-     *@description Utilities for translating elements with transform y direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/translate translate-y}
-     */
-    transformTranslateY: PluginVariantsWithDirection<"translate-y", Translate>;
-};
-
-type TailwindSkewVariants = "0" | "1" | "2" | "3" | "6" | "12" | TailwindArbitrary;
-type TailwindScaleVariants = "0" | "50" | "75" | "90" | "95" | "100" | "105" | "110" | "125" | "150" | TailwindArbitrary;
-type TailwindTranslateVariants = "1/2" | "1/3" | "2/3" | "1/4" | "2/4" | "3/4" | "full" | TailwindArbitrary;
+  /**
+   *@description Utilities for translating elements with transform.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/translate translate}
+   */
+  transformTranslate: PluginVariantsWithDirection<"translate", Translate>;
+  /**
+   *@description Utilities for translating elements with transform x direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/translate translate-x}
+   */
+  transformTranslateX: PluginVariantsWithDirection<"translate-x", Translate>;
+  /**
+   *@description Utilities for translating elements with transform y direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/translate translate-y}
+   */
+  transformTranslateY: PluginVariantsWithDirection<"translate-y", Translate>;
+};
+
+type TailwindSkewVariants =
+  | "0"
+  | "1"
+  | "2"
+  | "3"
+  | "6"
+  | "12"
+  | TailwindArbitrary;
+type TailwindScaleVariants =
+  | "0"
+  | "50"
+  | "75"
+  | "90"
+  | "95"
+  | "100"
+  | "105"
+  | "110"
+  | "125"
+  | "150"
+  | TailwindArbitrary;
+type TailwindTranslateVariants =
+  | "1/2"
+  | "1/3"
+  | "2/3"
+  | "1/4"
+  | "2/4"
+  | "3/4"
+  | "full"
+  | TailwindArbitrary;
 interface TailwindTransformsPlug {
-    skew?: string;
-    scale?: string;
-    rotate?: string;
-    translate?: string;
-    transformOrigin?: string;
+  skew?: string;
+  scale?: string;
+  rotate?: string;
+  translate?: string;
+  transformOrigin?: string;
 }
-interface TailwindTransforms<TailwindSpacing extends string, TransformsPlug extends TailwindTransformsPlug = {
+interface TailwindTransforms<
+  TailwindSpacing extends string,
+  TransformsPlug extends TailwindTransformsPlug = {
     skew: "";
     scale: "";
     rotate: "";
     translate: "";
     transformOrigin: "";
-}> extends TailwindHardwareAccelerationType, TailwindRotateType<TransformsPlug["rotate"]>, TailwindSkewType<ToPlugin<TailwindSkewVariants, TransformsPlug["skew"]>>, TailwindScaleType<ToPlugin<TailwindScaleVariants, TransformsPlug["scale"]>>, TailwindTransformOriginType<TransformsPlug["transformOrigin"]>, TailwindTranslateType<ToPlugin<TailwindSpacing | TailwindTranslateVariants, TransformsPlug["translate"]>> {
-}
-
-type TailwindAnimationVariants<Plug extends PlugBase = ""> = "none" | "spin" | "ping" | "pulse" | "bounce" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindAnimation<Plug extends PlugBase = ""> = `animate-${TailwindAnimationVariants<Plug>}`;
+  },
+> extends TailwindHardwareAccelerationType,
+    TailwindRotateType<TransformsPlug["rotate"]>,
+    TailwindSkewType<ToPlugin<TailwindSkewVariants, TransformsPlug["skew"]>>,
+    TailwindScaleType<ToPlugin<TailwindScaleVariants, TransformsPlug["scale"]>>,
+    TailwindTransformOriginType<TransformsPlug["transformOrigin"]>,
+    TailwindTranslateType<
+      ToPlugin<
+        TailwindSpacing | TailwindTranslateVariants,
+        TransformsPlug["translate"]
+      >
+    > {}
+
+type TailwindAnimationVariants<Plug extends PlugBase = ""> =
+  | "none"
+  | "spin"
+  | "ping"
+  | "pulse"
+  | "bounce"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindAnimation<Plug extends PlugBase = ""> =
+  `animate-${TailwindAnimationVariants<Plug>}`;
 type TailwindAnimationType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for animating elements with CSS animations.
-     *@see {@link https://tailwindcss.com/docs/animation animation}
-     */
-    animation: TailwindAnimation<Plug>;
-};
-
-type TailwindTransition<TransitionProperty extends string, TransitionTimingFunction extends string> = `${TransitionProperty} ${TransitionTimingFunction}` | "transition";
-type TailwindTransitionType<TransitionProperty extends string, TransitionDuration extends string, TransitionTimingFunction extends string, TransitionDelay extends string> = {
-    /**
-     *@description transition shorthand syntax
-     *@description `<property>` `<timing>`
-     *@see {@link https://tailwindcss.com/docs/transition-property transition}
-     */
-    transition: TailwindTransition<TransitionProperty, TransitionTimingFunction>;
-    /**
-     *@description Utilities for controlling which CSS properties transition.
-     *@see {@link https://tailwindcss.com/docs/transition-property transition property}
-     */
-    transitionProperty: TransitionProperty;
-    /**
-     *@description Utilities for controlling the duration of CSS transitions.
-     *@see {@link https://tailwindcss.com/docs/transition-duration transition duration}
-     */
-    transitionDuration: TransitionDuration;
-    /**
-     *@description Utilities for controlling the easing of CSS transitions.
-     *@see {@link https://tailwindcss.com/docs/transition-timing-function transition timing function}
-     */
-    transitionTimingFunction: TransitionTimingFunction;
-    /**
-     *@description Utilities for controlling the delay of CSS transitions.
-     *@see {@link https://tailwindcss.com/docs/transition-delay transition delay}
-     */
-    transitionDelay: TransitionDelay;
-};
-
-type TailwindTransitionPropertyVariants = "none" | "all" | "colors" | "opacity" | "shadow" | "transform" | TailwindArbitrary;
-type TailwindTransitionTimingFunctionVariants = "in" | "out" | "linear" | "in-out" | TailwindArbitrary;
-type TailwindTransitionDurationVariants = "75" | "100" | "150" | "200" | "300" | "500" | "700" | "1000" | TailwindArbitrary;
-type TailwindTransitionDelayVariants = "75" | "100" | "150" | "200" | "300" | "500" | "700" | "1000" | TailwindArbitrary;
+  /**
+   *@description Utilities for animating elements with CSS animations.
+   *@see {@link https://tailwindcss.com/docs/animation animation}
+   */
+  animation: TailwindAnimation<Plug>;
+};
+
+type TailwindTransition<
+  TransitionProperty extends string,
+  TransitionTimingFunction extends string,
+> = `${TransitionProperty} ${TransitionTimingFunction}` | "transition";
+type TailwindTransitionType<
+  TransitionProperty extends string,
+  TransitionDuration extends string,
+  TransitionTimingFunction extends string,
+  TransitionDelay extends string,
+> = {
+  /**
+   *@description transition shorthand syntax
+   *@description `<property>` `<timing>`
+   *@see {@link https://tailwindcss.com/docs/transition-property transition}
+   */
+  transition: TailwindTransition<TransitionProperty, TransitionTimingFunction>;
+  /**
+   *@description Utilities for controlling which CSS properties transition.
+   *@see {@link https://tailwindcss.com/docs/transition-property transition property}
+   */
+  transitionProperty: TransitionProperty;
+  /**
+   *@description Utilities for controlling the duration of CSS transitions.
+   *@see {@link https://tailwindcss.com/docs/transition-duration transition duration}
+   */
+  transitionDuration: TransitionDuration;
+  /**
+   *@description Utilities for controlling the easing of CSS transitions.
+   *@see {@link https://tailwindcss.com/docs/transition-timing-function transition timing function}
+   */
+  transitionTimingFunction: TransitionTimingFunction;
+  /**
+   *@description Utilities for controlling the delay of CSS transitions.
+   *@see {@link https://tailwindcss.com/docs/transition-delay transition delay}
+   */
+  transitionDelay: TransitionDelay;
+};
+
+type TailwindTransitionPropertyVariants =
+  | "none"
+  | "all"
+  | "colors"
+  | "opacity"
+  | "shadow"
+  | "transform"
+  | TailwindArbitrary;
+type TailwindTransitionTimingFunctionVariants =
+  | "in"
+  | "out"
+  | "linear"
+  | "in-out"
+  | TailwindArbitrary;
+type TailwindTransitionDurationVariants =
+  | "75"
+  | "100"
+  | "150"
+  | "200"
+  | "300"
+  | "500"
+  | "700"
+  | "1000"
+  | TailwindArbitrary;
+type TailwindTransitionDelayVariants =
+  | "75"
+  | "100"
+  | "150"
+  | "200"
+  | "300"
+  | "500"
+  | "700"
+  | "1000"
+  | TailwindArbitrary;
 interface TailwindTransitionAnimationPlug {
-    animation?: string;
-    transitionDelay?: string;
-    transitionDuration?: string;
-    transitionProperty?: string;
-    transitionTimingFunction?: string;
+  animation?: string;
+  transitionDelay?: string;
+  transitionDuration?: string;
+  transitionProperty?: string;
+  transitionTimingFunction?: string;
 }
-interface TailwindTransitionAnimation<TransitionAnimationPlug extends TailwindTransitionAnimationPlug = {
+interface TailwindTransitionAnimation<
+  TransitionAnimationPlug extends TailwindTransitionAnimationPlug = {
     animation: "";
     transitionDelay: "";
     transitionDuration: "";
     transitionProperty: "";
     transitionTimingFunction: "";
-}> extends TailwindAnimationType<TransitionAnimationPlug["animation"]>, TailwindTransitionType<ToPluginWithTitle<"transition", TailwindTransitionPropertyVariants, TransitionAnimationPlug["transitionProperty"]> | "transition", ToPluginWithTitle<"duration", TailwindTransitionDurationVariants, TransitionAnimationPlug["transitionDuration"]>, ToPluginWithTitle<"ease", TailwindTransitionTimingFunctionVariants, TransitionAnimationPlug["transitionTimingFunction"]>, ToPluginWithTitle<"delay", TailwindTransitionDelayVariants, TransitionAnimationPlug["transitionDelay"]>> {
-}
-
-type TailwindSpacingVariants<Plug extends PlugBase = ""> = "96" | "80" | "72" | "64" | "60" | "56" | "52" | "48" | "44" | "40" | "36" | "32" | "28" | "24" | "20" | "16" | "14" | "12" | "11" | "10" | "9" | "8" | "7" | "6" | "5" | "4" | "3.5" | "3" | "2.5" | "2" | "1.5" | "1" | "0.5" | "0" | "px" | TailwindArbitrary | Pluggable<Plug>;
-
-type TailwindOpacity<Plug extends PlugBase = ""> = "0" | "5" | "10" | "15" | "20" | "25" | "30" | "35" | "40" | "45" | "50" | "55" | "60" | "65" | "70" | "75" | "80" | "85" | "90" | "95" | "100" | TailwindArbitrary | Pluggable<Plug>;
-type TailwindColorAccent = "50" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "950";
-type TailwindColorWithOpacity<Plug extends PlugBase = ""> = `${string}/${TailwindOpacity<Plug>}`;
-
-type TailwindColorWithVariants = "slate" | "gray" | "neutral" | "stone" | "red" | "orange" | "yellow" | "lime" | "amber" | "green" | "teal" | "blue" | "indigo" | "sky" | "cyan" | "emerald" | "violet" | "fuchsia" | "pink" | "rose" | "purple";
-type TailwindColorWithNoVariants<Plug extends PlugBase = ""> = "inherit" | "current" | "transparent" | "black" | "white" | Pluggable<Plug> | TailwindArbitrary;
+  },
+> extends TailwindAnimationType<TransitionAnimationPlug["animation"]>,
+    TailwindTransitionType<
+      | ToPluginWithTitle<
+          "transition",
+          TailwindTransitionPropertyVariants,
+          TransitionAnimationPlug["transitionProperty"]
+        >
+      | "transition",
+      ToPluginWithTitle<
+        "duration",
+        TailwindTransitionDurationVariants,
+        TransitionAnimationPlug["transitionDuration"]
+      >,
+      ToPluginWithTitle<
+        "ease",
+        TailwindTransitionTimingFunctionVariants,
+        TransitionAnimationPlug["transitionTimingFunction"]
+      >,
+      ToPluginWithTitle<
+        "delay",
+        TailwindTransitionDelayVariants,
+        TransitionAnimationPlug["transitionDelay"]
+      >
+    > {}
+
+type TailwindSpacingVariants<Plug extends PlugBase = ""> =
+  | "96"
+  | "80"
+  | "72"
+  | "64"
+  | "60"
+  | "56"
+  | "52"
+  | "48"
+  | "44"
+  | "40"
+  | "36"
+  | "32"
+  | "28"
+  | "24"
+  | "20"
+  | "16"
+  | "14"
+  | "12"
+  | "11"
+  | "10"
+  | "9"
+  | "8"
+  | "7"
+  | "6"
+  | "5"
+  | "4"
+  | "3.5"
+  | "3"
+  | "2.5"
+  | "2"
+  | "1.5"
+  | "1"
+  | "0.5"
+  | "0"
+  | "px"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
+
+type TailwindOpacity<Plug extends PlugBase = ""> =
+  | "0"
+  | "5"
+  | "10"
+  | "15"
+  | "20"
+  | "25"
+  | "30"
+  | "35"
+  | "40"
+  | "45"
+  | "50"
+  | "55"
+  | "60"
+  | "65"
+  | "70"
+  | "75"
+  | "80"
+  | "85"
+  | "90"
+  | "95"
+  | "100"
+  | TailwindArbitrary
+  | Pluggable<Plug>;
+type TailwindColorAccent =
+  | "50"
+  | "100"
+  | "200"
+  | "300"
+  | "400"
+  | "500"
+  | "600"
+  | "700"
+  | "800"
+  | "900"
+  | "950";
+type TailwindColorWithOpacity<Plug extends PlugBase = ""> =
+  `${string}/${TailwindOpacity<Plug>}`;
+
+type TailwindColorWithVariants =
+  | "slate"
+  | "gray"
+  | "neutral"
+  | "stone"
+  | "red"
+  | "orange"
+  | "yellow"
+  | "lime"
+  | "amber"
+  | "green"
+  | "teal"
+  | "blue"
+  | "indigo"
+  | "sky"
+  | "cyan"
+  | "emerald"
+  | "violet"
+  | "fuchsia"
+  | "pink"
+  | "rose"
+  | "purple";
+type TailwindColorWithNoVariants<Plug extends PlugBase = ""> =
+  | "inherit"
+  | "current"
+  | "transparent"
+  | "black"
+  | "white"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
 
 type TailwindColorPluginOptionKey = Exclude<TailwindGlobalPluginKey, "sizing">;
 type TailwindColorPlugOption = PluginOption<TailwindColorPluginOptionKey>;
-type TailwindDefaultColor = `${TailwindColorWithVariants}-${TailwindColorAccent}`;
-type TailwindColor<PlugOption extends TailwindColorPlugOption = PluginOption<TailwindColorPluginOptionKey, "">> = TailwindDefaultColor | TailwindColorWithNoVariants<PlugOption["color"]> | TailwindColorWithOpacity<PlugOption["opacity"]>;
-
-type TailwindAccentColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the accented color of a form control.
-     *@see {@link https://tailwindcss.com/docs/accent-color accent color}
-     */
-    accentColor: `accent-${TailwindColor | Pluggable<Plug>}`;
+type TailwindDefaultColor =
+  `${TailwindColorWithVariants}-${TailwindColorAccent}`;
+type TailwindColor<
+  PlugOption extends TailwindColorPlugOption = PluginOption<
+    TailwindColorPluginOptionKey,
+    ""
+  >,
+> =
+  | TailwindDefaultColor
+  | TailwindColorWithNoVariants<PlugOption["color"]>
+  | TailwindColorWithOpacity<PlugOption["opacity"]>;
+
+type TailwindAccentColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the accented color of a form control.
+   *@see {@link https://tailwindcss.com/docs/accent-color accent color}
+   */
+  accentColor: `accent-${TailwindColor | Pluggable<Plug>}`;
 };
 
 type TailwindAppearance = "appearance-none";
 type TailwindAppearanceType = {
-    /**
-     *@description Utilities for suppressing native form control styling.
-     *@see {@link https://tailwindcss.com/docs/appearance appearance}
-     */
-    appearance: TailwindAppearance;
-};
-
-type TailwindCaretColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the color of the text input cursor.
-     *@see {@link https://tailwindcss.com/docs/caret-color caret color}
-     */
-    caretColor: `caret-${TailwindColor | Pluggable<Plug>}`;
-};
-
-type TailwindCursorVariants<Plug extends PlugBase = ""> = "auto" | "default" | "pointer" | "wait" | "text" | "move" | "help" | "not-allowed" | "none" | "context-menu" | "progress" | "cell" | "crosshair" | "vertical-text" | "alias" | "copy" | "no-drop" | "grab" | "grabbing" | "all-scroll" | "col-resize" | "row-resize" | "n-resize" | "e-resize" | "s-resize" | "w-resize" | "ne-resize" | "nw-resize" | "se-resize" | "sw-resize" | "ew-resize" | "ns-resize" | "nesw-resize" | "nwse-resize" | "zoom-in" | "zoom-out" | Pluggable<Plug> | TailwindArbitrary;
-type TailwindCursor<Plug extends PlugBase = ""> = `cursor-${TailwindCursorVariants<Plug>}`;
+  /**
+   *@description Utilities for suppressing native form control styling.
+   *@see {@link https://tailwindcss.com/docs/appearance appearance}
+   */
+  appearance: TailwindAppearance;
+};
+
+type TailwindCaretColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the color of the text input cursor.
+   *@see {@link https://tailwindcss.com/docs/caret-color caret color}
+   */
+  caretColor: `caret-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type TailwindCursorVariants<Plug extends PlugBase = ""> =
+  | "auto"
+  | "default"
+  | "pointer"
+  | "wait"
+  | "text"
+  | "move"
+  | "help"
+  | "not-allowed"
+  | "none"
+  | "context-menu"
+  | "progress"
+  | "cell"
+  | "crosshair"
+  | "vertical-text"
+  | "alias"
+  | "copy"
+  | "no-drop"
+  | "grab"
+  | "grabbing"
+  | "all-scroll"
+  | "col-resize"
+  | "row-resize"
+  | "n-resize"
+  | "e-resize"
+  | "s-resize"
+  | "w-resize"
+  | "ne-resize"
+  | "nw-resize"
+  | "se-resize"
+  | "sw-resize"
+  | "ew-resize"
+  | "ns-resize"
+  | "nesw-resize"
+  | "nwse-resize"
+  | "zoom-in"
+  | "zoom-out"
+  | Pluggable<Plug>
+  | TailwindArbitrary;
+type TailwindCursor<Plug extends PlugBase = ""> =
+  `cursor-${TailwindCursorVariants<Plug>}`;
 type TailwindCursorType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the cursor style when hovering over an element.
-     *@see {@link https://tailwindcss.com/docs/cursor cursor}
-     */
-    cursor: TailwindCursor<Plug>;
+  /**
+   *@description Utilities for controlling the cursor style when hovering over an element.
+   *@see {@link https://tailwindcss.com/docs/cursor cursor}
+   */
+  cursor: TailwindCursor<Plug>;
 };
 
 type TailwindPointerEventsVariants = "none" | "auto";
 type TailwindPointerEvents = `pointer-events-${TailwindPointerEventsVariants}`;
 type TailwindPointerEventsType = {
-    /**
-     *@description Utilities for controlling whether an element responds to pointer events.
-     *@see {@link https://tailwindcss.com/docs/pointer-events pointer events}
-     */
-    pointerEvents: TailwindPointerEvents;
+  /**
+   *@description Utilities for controlling whether an element responds to pointer events.
+   *@see {@link https://tailwindcss.com/docs/pointer-events pointer events}
+   */
+  pointerEvents: TailwindPointerEvents;
 };
 
 type TailwindResizeVariants = "none" | "x" | "y";
 type TailwindResize = "resize" | `resize-${TailwindResizeVariants}`;
 type TailwindResizeType = {
-    /**
-     *@description Utilities for controlling how an element can be resized.
-     *@see {@link https://tailwindcss.com/docs/resize resize}
-     */
-    resize: TailwindResize;
+  /**
+   *@description Utilities for controlling how an element can be resized.
+   *@see {@link https://tailwindcss.com/docs/resize resize}
+   */
+  resize: TailwindResize;
 };
 
 type TailwindScrollBehaviorVariants = "auto" | "smooth";
 type TailwindScrollBehavior = `scroll-${TailwindScrollBehaviorVariants}`;
 type TailwindScrollBehaviorType = {
-    /**
-     *@description Utilities for controlling the scroll behavior of an element.
-     *@see {@link https://tailwindcss.com/docs/scroll-behavior scroll behavior}
-     */
-    scrollBehavior: TailwindScrollBehavior;
+  /**
+   *@description Utilities for controlling the scroll behavior of an element.
+   *@see {@link https://tailwindcss.com/docs/scroll-behavior scroll behavior}
+   */
+  scrollBehavior: TailwindScrollBehavior;
 };
 
 type TailwindScrollMarginType<ScrollMargin extends string> = {
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin}
-     */
-    scrollMargin: PluginVariantsWithDirection<"scroll-m", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container left direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-left}
-     */
-    scrollMarginLeft: PluginVariantsWithDirection<"scroll-ml", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container right direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-right}
-     */
-    scrollMarginRight: PluginVariantsWithDirection<"scroll-my", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container top direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-top}
-     */
-    scrollMarginTop: PluginVariantsWithDirection<"scroll-mt", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container bottom direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-bottom}
-     */
-    scrollMarginBottom: PluginVariantsWithDirection<"scroll-mb", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container x direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-x}
-     */
-    scrollMarginX: PluginVariantsWithDirection<"scroll-mx", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container y direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-y}
-     */
-    scrollMarginY: PluginVariantsWithDirection<"scroll-my", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin}
+   */
+  scrollMargin: PluginVariantsWithDirection<"scroll-m", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container left direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-left}
+   */
+  scrollMarginLeft: PluginVariantsWithDirection<"scroll-ml", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container right direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-right}
+   */
+  scrollMarginRight: PluginVariantsWithDirection<"scroll-my", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container top direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-top}
+   */
+  scrollMarginTop: PluginVariantsWithDirection<"scroll-mt", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container bottom direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-bottom}
+   */
+  scrollMarginBottom: PluginVariantsWithDirection<"scroll-mb", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container x direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-x}
+   */
+  scrollMarginX: PluginVariantsWithDirection<"scroll-mx", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container y direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-y}
+   */
+  scrollMarginY: PluginVariantsWithDirection<"scroll-my", ScrollMargin>;
 };
 
 type TailwindScrollPaddingType<ScrollPadding extends string> = {
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding}
-     */
-    scrollPadding: PluginVariantsWithDirection<"scroll-p", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container left direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-left}
-     */
-    scrollPaddingLeft: PluginVariantsWithDirection<"scroll-pl", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container right direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-right}
-     */
-    scrollPaddingRight: PluginVariantsWithDirection<"scroll-pr", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container top direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-top}
-     */
-    scrollPaddingTop: PluginVariantsWithDirection<"scroll-pt", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container bottom direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-bottom}
-     */
-    scrollPaddingBottom: PluginVariantsWithDirection<"scroll-pb", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container x direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-x}
-     */
-    scrollPaddingX: PluginVariantsWithDirection<"scroll-px", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container y direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-y}
-     */
-    scrollPaddingY: PluginVariantsWithDirection<"scroll-py", ScrollPadding>;
-};
-
-type TailwindScrollSnapAlignVariants = "start" | "center" | "end" | "align-none";
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding}
+   */
+  scrollPadding: PluginVariantsWithDirection<"scroll-p", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container left direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-left}
+   */
+  scrollPaddingLeft: PluginVariantsWithDirection<"scroll-pl", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container right direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-right}
+   */
+  scrollPaddingRight: PluginVariantsWithDirection<"scroll-pr", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container top direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-top}
+   */
+  scrollPaddingTop: PluginVariantsWithDirection<"scroll-pt", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container bottom direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-bottom}
+   */
+  scrollPaddingBottom: PluginVariantsWithDirection<"scroll-pb", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container x direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-x}
+   */
+  scrollPaddingX: PluginVariantsWithDirection<"scroll-px", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container y direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-y}
+   */
+  scrollPaddingY: PluginVariantsWithDirection<"scroll-py", ScrollPadding>;
+};
+
+type TailwindScrollSnapAlignVariants =
+  | "start"
+  | "center"
+  | "end"
+  | "align-none";
 type TailwindScrollSnapAlign = `snap-${TailwindScrollSnapAlignVariants}`;
 type TailwindScrollSnapAlignType = {
-    /**
-     *@description Utilities for controlling the scroll snap alignment of an element.
-     *@see {@link https://tailwindcss.com/docs/scroll-snap-align scroll snap align}
-     */
-    scrollSnapAlign: TailwindScrollSnapAlign;
+  /**
+   *@description Utilities for controlling the scroll snap alignment of an element.
+   *@see {@link https://tailwindcss.com/docs/scroll-snap-align scroll snap align}
+   */
+  scrollSnapAlign: TailwindScrollSnapAlign;
 };
 
 type TailwindScrollSnapStopVariants = "normal" | "always";
 type TailwindScrollSnapStop = `snap-${TailwindScrollSnapStopVariants}`;
 type TailwindScrollSnapStopType = {
-    /**
-     *@description Utilities for controlling whether you can skip past possible snap positions.
-     *@see {@link https://tailwindcss.com/docs/scroll-snap-stop scroll snap stop}
-     */
-    scrollSnapStop: TailwindScrollSnapStop;
-};
-
-type TailwindScrollSnapTypeVariants = "none" | "x" | "y" | "both" | "mandatory" | "proximity";
+  /**
+   *@description Utilities for controlling whether you can skip past possible snap positions.
+   *@see {@link https://tailwindcss.com/docs/scroll-snap-stop scroll snap stop}
+   */
+  scrollSnapStop: TailwindScrollSnapStop;
+};
+
+type TailwindScrollSnapTypeVariants =
+  | "none"
+  | "x"
+  | "y"
+  | "both"
+  | "mandatory"
+  | "proximity";
 type TailwindScrollSnapType = `snap-${TailwindScrollSnapTypeVariants}`;
 type TailwindScrollSnapTypeType = {
-    /**
-     *@description Utilities for controlling how strictly snap points are enforced in a snap container.
-     *@see {@link https://tailwindcss.com/docs/scroll-snap-type scroll snap type}
-     */
-    scrollSnapType: TailwindScrollSnapType;
-};
-
-type TailwindTouchActionVariants = "auto" | "none" | "pan-x" | "pan-left" | "pan-right" | "pan-y" | "pan-up" | "pan-down" | "pinch-zoom" | "manipulation";
+  /**
+   *@description Utilities for controlling how strictly snap points are enforced in a snap container.
+   *@see {@link https://tailwindcss.com/docs/scroll-snap-type scroll snap type}
+   */
+  scrollSnapType: TailwindScrollSnapType;
+};
+
+type TailwindTouchActionVariants =
+  | "auto"
+  | "none"
+  | "pan-x"
+  | "pan-left"
+  | "pan-right"
+  | "pan-y"
+  | "pan-up"
+  | "pan-down"
+  | "pinch-zoom"
+  | "manipulation";
 type TailwindTouchAction = `touch-${TailwindTouchActionVariants}`;
 type TailwindTouchActionType = {
-    /**
-     *@description Utilities for controlling how an element can be scrolled and zoomed on touchscreens.
-     *@see {@link https://tailwindcss.com/docs/touch-action touch action}
-     */
-    touchAction: TailwindTouchAction;
+  /**
+   *@description Utilities for controlling how an element can be scrolled and zoomed on touchscreens.
+   *@see {@link https://tailwindcss.com/docs/touch-action touch action}
+   */
+  touchAction: TailwindTouchAction;
 };
 
 type TailwindUserSelectVariants = "none" | "text" | "all" | "auto";
 type TailwindUserSelect = `select-${TailwindUserSelectVariants}`;
 type TailwindUserSelectType = {
-    /**
-     *@description Utilities for controlling whether the user can select text in an element.
-     *@see {@link https://tailwindcss.com/docs/user-select user select}
-     */
-    userSelect: TailwindUserSelect;
-};
-
-type TailwindWillChangeVariants = "auto" | "scroll" | "contents" | "transform" | TailwindArbitrary;
-type TailwindWillChange<Plug extends PlugBase = ""> = `will-change-${TailwindWillChangeVariants | Pluggable<Plug>}`;
+  /**
+   *@description Utilities for controlling whether the user can select text in an element.
+   *@see {@link https://tailwindcss.com/docs/user-select user select}
+   */
+  userSelect: TailwindUserSelect;
+};
+
+type TailwindWillChangeVariants =
+  | "auto"
+  | "scroll"
+  | "contents"
+  | "transform"
+  | TailwindArbitrary;
+type TailwindWillChange<Plug extends PlugBase = ""> =
+  `will-change-${TailwindWillChangeVariants | Pluggable<Plug>}`;
 type TailwindWillChangeType<Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for optimizing upcoming animations of elements that are expected to change.
-     *@see {@link https://tailwindcss.com/docs/will-change will change}
-     */
-    willChange: TailwindWillChange<Plug>;
+  /**
+   *@description Utilities for optimizing upcoming animations of elements that are expected to change.
+   *@see {@link https://tailwindcss.com/docs/will-change will change}
+   */
+  willChange: TailwindWillChange<Plug>;
 };
 
 interface TailwindInteractivityPlug {
-    cursor?: string;
-    willChange?: string;
-    caretColor?: string;
-    accentColor?: string;
-    scrollMargin?: string;
-    scrollPadding?: string;
+  cursor?: string;
+  willChange?: string;
+  caretColor?: string;
+  accentColor?: string;
+  scrollMargin?: string;
+  scrollPadding?: string;
 }
-interface TailwindInteractivity<TailwindColor extends string, TailwindSpacing extends string, InteractivityPlug extends TailwindInteractivityPlug = {
+interface TailwindInteractivity<
+  TailwindColor extends string,
+  TailwindSpacing extends string,
+  InteractivityPlug extends TailwindInteractivityPlug = {
     cursor: "";
     willChange: "";
     caretColor: "";
     accentColor: "";
     scrollMargin: "";
     scrollPadding: "";
-}> extends TailwindResizeType, TailwindUserSelectType, TailwindAppearanceType, TailwindTouchActionType, TailwindPointerEventsType, TailwindScrollBehaviorType, TailwindScrollSnapTypeType, TailwindScrollSnapStopType, TailwindScrollSnapAlignType, TailwindCursorType<InteractivityPlug["cursor"]>, TailwindWillChangeType<InteractivityPlug["willChange"]>, TailwindCaretColorType<TailwindColor, InteractivityPlug["caretColor"]>, TailwindScrollPaddingType<TailwindSpacing | Pluggable<InteractivityPlug["scrollPadding"]>>, TailwindScrollMarginType<TailwindSpacing | Pluggable<InteractivityPlug["scrollMargin"]>>, TailwindAccentColorType<TailwindColor, InteractivityPlug["accentColor"]> {
-}
-
-type ShortTailwindAccentColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the accented color of a form control.
-     *@see {@link https://tailwindcss.com/docs/accent-color accent color}
-     */
-    accent: `accent-${TailwindColor | Pluggable<Plug>}`;
-};
-
-type ShortTailwindCaretColorType<TailwindColor extends string, Plug extends PlugBase = ""> = {
-    /**
-     *@description Utilities for controlling the color of the text input cursor.
-     *@see {@link https://tailwindcss.com/docs/caret-color caret color}
-     */
-    caret: `caret-${TailwindColor | Pluggable<Plug>}`;
+  },
+> extends TailwindResizeType,
+    TailwindUserSelectType,
+    TailwindAppearanceType,
+    TailwindTouchActionType,
+    TailwindPointerEventsType,
+    TailwindScrollBehaviorType,
+    TailwindScrollSnapTypeType,
+    TailwindScrollSnapStopType,
+    TailwindScrollSnapAlignType,
+    TailwindCursorType<InteractivityPlug["cursor"]>,
+    TailwindWillChangeType<InteractivityPlug["willChange"]>,
+    TailwindCaretColorType<TailwindColor, InteractivityPlug["caretColor"]>,
+    TailwindScrollPaddingType<
+      TailwindSpacing | Pluggable<InteractivityPlug["scrollPadding"]>
+    >,
+    TailwindScrollMarginType<
+      TailwindSpacing | Pluggable<InteractivityPlug["scrollMargin"]>
+    >,
+    TailwindAccentColorType<TailwindColor, InteractivityPlug["accentColor"]> {}
+
+type ShortTailwindAccentColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the accented color of a form control.
+   *@see {@link https://tailwindcss.com/docs/accent-color accent color}
+   */
+  accent: `accent-${TailwindColor | Pluggable<Plug>}`;
+};
+
+type ShortTailwindCaretColorType<
+  TailwindColor extends string,
+  Plug extends PlugBase = "",
+> = {
+  /**
+   *@description Utilities for controlling the color of the text input cursor.
+   *@see {@link https://tailwindcss.com/docs/caret-color caret color}
+   */
+  caret: `caret-${TailwindColor | Pluggable<Plug>}`;
 };
 
 type ShortTailwindScrollMarginType<ScrollMargin extends string> = {
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin}
-     */
-    scrollM: PluginVariantsWithDirection<"scroll-m", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container left direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-left}
-     */
-    scrollML: PluginVariantsWithDirection<"scroll-ml", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container right direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-right}
-     */
-    scrollMR: PluginVariantsWithDirection<"scroll-my", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container top direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-top}
-     */
-    scrollMT: PluginVariantsWithDirection<"scroll-mt", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container bottom direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-bottom}
-     */
-    scrollMB: PluginVariantsWithDirection<"scroll-mb", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container x direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-x}
-     */
-    scrollMX: PluginVariantsWithDirection<"scroll-mx", ScrollMargin>;
-    /**
-     *@description Utilities for controlling the scroll offset around items in a snap container y direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-y}
-     */
-    scrollMY: PluginVariantsWithDirection<"scroll-my", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin}
+   */
+  scrollM: PluginVariantsWithDirection<"scroll-m", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container left direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-left}
+   */
+  scrollML: PluginVariantsWithDirection<"scroll-ml", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container right direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-right}
+   */
+  scrollMR: PluginVariantsWithDirection<"scroll-my", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container top direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-top}
+   */
+  scrollMT: PluginVariantsWithDirection<"scroll-mt", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container bottom direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-bottom}
+   */
+  scrollMB: PluginVariantsWithDirection<"scroll-mb", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container x direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-x}
+   */
+  scrollMX: PluginVariantsWithDirection<"scroll-mx", ScrollMargin>;
+  /**
+   *@description Utilities for controlling the scroll offset around items in a snap container y direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-margin scroll-margin-y}
+   */
+  scrollMY: PluginVariantsWithDirection<"scroll-my", ScrollMargin>;
 };
 
 type ShortTailwindScrollPaddingType<ScrollPadding extends string> = {
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding}
-     */
-    scrollP: PluginVariantsWithDirection<"scroll-p", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container left direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-left}
-     */
-    scrollPL: PluginVariantsWithDirection<"scroll-pl", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container right direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-right}
-     */
-    scrollPR: PluginVariantsWithDirection<"scroll-pr", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container top direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-top}
-     */
-    scrollPT: PluginVariantsWithDirection<"scroll-pt", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container bottom direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-bottom}
-     */
-    scrollPB: PluginVariantsWithDirection<"scroll-pb", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container x direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-x}
-     */
-    scrollPX: PluginVariantsWithDirection<"scroll-px", ScrollPadding>;
-    /**
-     *@description Utilities for controlling an element's scroll offset within a snap container y direction.
-     *@unit Gap `1` = `4px` = `0.25rem`
-     *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-y}
-     */
-    scrollPY: PluginVariantsWithDirection<"scroll-py", ScrollPadding>;
-};
-
-interface ShortTailwindInteractivity<TailwindColor extends string, TailwindSpacing extends string, InteractivityPlug extends {
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding}
+   */
+  scrollP: PluginVariantsWithDirection<"scroll-p", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container left direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-left}
+   */
+  scrollPL: PluginVariantsWithDirection<"scroll-pl", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container right direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-right}
+   */
+  scrollPR: PluginVariantsWithDirection<"scroll-pr", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container top direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-top}
+   */
+  scrollPT: PluginVariantsWithDirection<"scroll-pt", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container bottom direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-bottom}
+   */
+  scrollPB: PluginVariantsWithDirection<"scroll-pb", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container x direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-x}
+   */
+  scrollPX: PluginVariantsWithDirection<"scroll-px", ScrollPadding>;
+  /**
+   *@description Utilities for controlling an element's scroll offset within a snap container y direction.
+   *@unit Gap `1` = `4px` = `0.25rem`
+   *@see {@link https://tailwindcss.com/docs/scroll-padding scroll-padding-y}
+   */
+  scrollPY: PluginVariantsWithDirection<"scroll-py", ScrollPadding>;
+};
+
+interface ShortTailwindInteractivity<
+  TailwindColor extends string,
+  TailwindSpacing extends string,
+  InteractivityPlug extends {
     cursor?: string;
     willChange?: string;
     caretColor?: string;
     accentColor?: string;
     scrollMargin?: string;
     scrollPadding?: string;
-} = {
+  } = {
     cursor: "";
     willChange: "";
     caretColor: "";
     accentColor: "";
     scrollMargin: "";
     scrollPadding: "";
-}> extends TailwindResizeType, TailwindUserSelectType, TailwindAppearanceType, TailwindTouchActionType, TailwindPointerEventsType, TailwindScrollBehaviorType, TailwindScrollSnapTypeType, TailwindScrollSnapStopType, TailwindScrollSnapAlignType, TailwindCursorType<InteractivityPlug["cursor"]>, TailwindWillChangeType<InteractivityPlug["willChange"]>, ShortTailwindCaretColorType<TailwindColor, InteractivityPlug["caretColor"]>, ShortTailwindScrollPaddingType<TailwindSpacing | Pluggable<InteractivityPlug["scrollPadding"]>>, ShortTailwindScrollMarginType<TailwindSpacing | Pluggable<InteractivityPlug["scrollMargin"]>>, ShortTailwindAccentColorType<TailwindColor, InteractivityPlug["accentColor"]> {
-}
+  },
+> extends TailwindResizeType,
+    TailwindUserSelectType,
+    TailwindAppearanceType,
+    TailwindTouchActionType,
+    TailwindPointerEventsType,
+    TailwindScrollBehaviorType,
+    TailwindScrollSnapTypeType,
+    TailwindScrollSnapStopType,
+    TailwindScrollSnapAlignType,
+    TailwindCursorType<InteractivityPlug["cursor"]>,
+    TailwindWillChangeType<InteractivityPlug["willChange"]>,
+    ShortTailwindCaretColorType<TailwindColor, InteractivityPlug["caretColor"]>,
+    ShortTailwindScrollPaddingType<
+      TailwindSpacing | Pluggable<InteractivityPlug["scrollPadding"]>
+    >,
+    ShortTailwindScrollMarginType<
+      TailwindSpacing | Pluggable<InteractivityPlug["scrollMargin"]>
+    >,
+    ShortTailwindAccentColorType<
+      TailwindColor,
+      InteractivityPlug["accentColor"]
+    > {}
 
 /**
  * @description Global style supported list
@@ -3408,31 +5296,157 @@ type TailwindGlobalPluginKey = "color" | "opacity" | "sizing";
  * @description Style supported list
  * @see {@link https://tailwindcss.com/docs/theme#configuration-reference configuration reference}
  */
-type TailwindStylePluginKey = "aria" | Exclude<keyof TailwindBackgroundPlug, "gradientColorStops"> | keyof TailwindTransitionAnimationPlug | keyof TailwindTransformsPlug | keyof TailwindTablesPlug | keyof TailwindSvgPlug | keyof TailwindSpacingPlug | keyof TailwindLayoutPlug | keyof TailwindBordersPlug | keyof TailwindEffectsPlug | keyof TailwindFiltersPlug | keyof TailwindFlexGridPlug | keyof TailwindFontPlug | keyof TailwindInteractivityPlug | keyof TailwindSizingPlug;
+type TailwindStylePluginKey =
+  | "aria"
+  | Exclude<keyof TailwindBackgroundPlug, "gradientColorStops">
+  | keyof TailwindTransitionAnimationPlug
+  | keyof TailwindTransformsPlug
+  | keyof TailwindTablesPlug
+  | keyof TailwindSvgPlug
+  | keyof TailwindSpacingPlug
+  | keyof TailwindLayoutPlug
+  | keyof TailwindBordersPlug
+  | keyof TailwindEffectsPlug
+  | keyof TailwindFiltersPlug
+  | keyof TailwindFlexGridPlug
+  | keyof TailwindFontPlug
+  | keyof TailwindInteractivityPlug
+  | keyof TailwindSizingPlug;
 
 type TailwindStylePlugOption = PluginOption<TailwindStylePluginKey>;
 type DEFAULT_VALUE = "";
-type TailwindDefaultStylePlug = PluginOption<TailwindStylePluginKey, DEFAULT_VALUE>;
-type TailwindGlobalPlugOptionKey = TailwindColorPluginOptionKey | "sizing" | "screens";
+type TailwindDefaultStylePlug = PluginOption<
+  TailwindStylePluginKey,
+  DEFAULT_VALUE
+>;
+type TailwindGlobalPlugOptionKey =
+  | TailwindColorPluginOptionKey
+  | "sizing"
+  | "screens";
 type TailwindGlobalPlugOption = PluginOption<TailwindGlobalPlugOptionKey>;
-type TailwindDefaultGlobalPlugOption = PluginOption<TailwindGlobalPlugOptionKey, DEFAULT_VALUE>;
-
-interface Tailwind<GlobalPlugOption extends TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption, StylePlugOption extends TailwindStylePlugOption = TailwindDefaultStylePlug> extends TailwindAccessibility, TailwindGrid<StylePlugOption>, TailwindFilters<StylePlugOption>, TailwindTransitionAnimation<StylePlugOption>, TailwindSvg<TailwindColor<GlobalPlugOption>, StylePlugOption>, TailwindFont<TailwindColor<GlobalPlugOption>, StylePlugOption>, TailwindBorders<TailwindColor<GlobalPlugOption>, StylePlugOption>, TailwindBackgrounds<TailwindColor<GlobalPlugOption>, StylePlugOption>, TailwindFlex<TailwindSpacingVariants<GlobalPlugOption["color"]>, StylePlugOption>, TailwindFlexGridCommon<TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, TailwindSizing<TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, TailwindSpacing<TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, TailwindTables<TailwindSpacingVariants<GlobalPlugOption["sizing"]>>, TailwindTransforms<TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, TailwindLayout<TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, TailwindInteractivity<TailwindColor<GlobalPlugOption>, TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, TailwindEffects<TailwindColor<GlobalPlugOption>, TailwindOpacity<GlobalPlugOption["opacity"]>, StylePlugOption> {
-}
-
-interface ShortTailwind<GlobalPlugOption extends TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption, StylePlugOption extends TailwindStylePlugOption = TailwindDefaultStylePlug> extends TailwindAccessibility, TailwindGrid<StylePlugOption>, TailwindFilters<StylePlugOption>, TailwindTransitionAnimation<StylePlugOption>, TailwindFont<TailwindColor<GlobalPlugOption>, StylePlugOption>, TailwindFlex<TailwindSpacingVariants<GlobalPlugOption["color"]>, StylePlugOption>, TailwindFlexGridCommon<TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, TailwindTables<TailwindSpacingVariants<GlobalPlugOption["sizing"]>>, TailwindTransforms<TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, TailwindLayout<TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, ShortTailwindSvg<TailwindColor<GlobalPlugOption>, StylePlugOption>, ShortTailwindBorders<TailwindColor<GlobalPlugOption>, StylePlugOption>, ShortTailwindBackgrounds<TailwindColor<GlobalPlugOption>, StylePlugOption>, ShortTailwindSizing<TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, ShortTailwindSpacing<TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, ShortTailwindInteractivity<TailwindColor<GlobalPlugOption>, TailwindSpacingVariants<GlobalPlugOption["sizing"]>, StylePlugOption>, ShortTailwindEffects<TailwindColor<GlobalPlugOption>, TailwindOpacity<GlobalPlugOption["opacity"]>, StylePlugOption> {
-}
+type TailwindDefaultGlobalPlugOption = PluginOption<
+  TailwindGlobalPlugOptionKey,
+  DEFAULT_VALUE
+>;
+
+interface Tailwind<
+  GlobalPlugOption extends
+    TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption,
+  StylePlugOption extends TailwindStylePlugOption = TailwindDefaultStylePlug,
+> extends TailwindAccessibility,
+    TailwindGrid<StylePlugOption>,
+    TailwindFilters<StylePlugOption>,
+    TailwindTransitionAnimation<StylePlugOption>,
+    TailwindSvg<TailwindColor<GlobalPlugOption>, StylePlugOption>,
+    TailwindFont<TailwindColor<GlobalPlugOption>, StylePlugOption>,
+    TailwindBorders<TailwindColor<GlobalPlugOption>, StylePlugOption>,
+    TailwindBackgrounds<TailwindColor<GlobalPlugOption>, StylePlugOption>,
+    TailwindFlex<
+      TailwindSpacingVariants<GlobalPlugOption["color"]>,
+      StylePlugOption
+    >,
+    TailwindFlexGridCommon<
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    TailwindSizing<
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    TailwindSpacing<
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    TailwindTables<TailwindSpacingVariants<GlobalPlugOption["sizing"]>>,
+    TailwindTransforms<
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    TailwindLayout<
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    TailwindInteractivity<
+      TailwindColor<GlobalPlugOption>,
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    TailwindEffects<
+      TailwindColor<GlobalPlugOption>,
+      TailwindOpacity<GlobalPlugOption["opacity"]>,
+      StylePlugOption
+    > {}
+
+interface ShortTailwind<
+  GlobalPlugOption extends
+    TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption,
+  StylePlugOption extends TailwindStylePlugOption = TailwindDefaultStylePlug,
+> extends TailwindAccessibility,
+    TailwindGrid<StylePlugOption>,
+    TailwindFilters<StylePlugOption>,
+    TailwindTransitionAnimation<StylePlugOption>,
+    TailwindFont<TailwindColor<GlobalPlugOption>, StylePlugOption>,
+    TailwindFlex<
+      TailwindSpacingVariants<GlobalPlugOption["color"]>,
+      StylePlugOption
+    >,
+    TailwindFlexGridCommon<
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    TailwindTables<TailwindSpacingVariants<GlobalPlugOption["sizing"]>>,
+    TailwindTransforms<
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    TailwindLayout<
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    ShortTailwindSvg<TailwindColor<GlobalPlugOption>, StylePlugOption>,
+    ShortTailwindBorders<TailwindColor<GlobalPlugOption>, StylePlugOption>,
+    ShortTailwindBackgrounds<TailwindColor<GlobalPlugOption>, StylePlugOption>,
+    ShortTailwindSizing<
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    ShortTailwindSpacing<
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    ShortTailwindInteractivity<
+      TailwindColor<GlobalPlugOption>,
+      TailwindSpacingVariants<GlobalPlugOption["sizing"]>,
+      StylePlugOption
+    >,
+    ShortTailwindEffects<
+      TailwindColor<GlobalPlugOption>,
+      TailwindOpacity<GlobalPlugOption["opacity"]>,
+      StylePlugOption
+    > {}
 
 /**
  * @description tailwind type definition with pluggable style
  * @description follow `CSS` properties syntax
  */
-type TailwindPlugin<GlobalPluginOption extends TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption, PlugStyleOption extends TailwindStylePlugOption = TailwindDefaultStylePlug> = PlugStyleOption extends TailwindDefaultStylePlug ? Tailwind<GlobalPluginOption> : Tailwind<GlobalPluginOption, PlugStyleOption>;
+type TailwindPlugin<
+  GlobalPluginOption extends
+    TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption,
+  PlugStyleOption extends TailwindStylePlugOption = TailwindDefaultStylePlug,
+> = PlugStyleOption extends TailwindDefaultStylePlug
+  ? Tailwind<GlobalPluginOption>
+  : Tailwind<GlobalPluginOption, PlugStyleOption>;
 /**
  * @description tailwind type definition with pluggable style
  * @description follow short-handed `CSS` properties syntax
  */
-type ShortTailwindPlugin<GlobalPluginOption extends TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption, PlugStyleOption extends TailwindStylePlugOption = TailwindDefaultStylePlug> = PlugStyleOption extends TailwindDefaultStylePlug ? ShortTailwind<GlobalPluginOption> : ShortTailwind<GlobalPluginOption, PlugStyleOption>;
+type ShortTailwindPlugin<
+  GlobalPluginOption extends
+    TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption,
+  PlugStyleOption extends TailwindStylePlugOption = TailwindDefaultStylePlug,
+> = PlugStyleOption extends TailwindDefaultStylePlug
+  ? ShortTailwind<GlobalPluginOption>
+  : ShortTailwind<GlobalPluginOption, PlugStyleOption>;
 
 /**
  * @description tailwind class nest divider
@@ -3448,20 +5462,50 @@ type NEST_DIVIDER = ":";
  * const typeResult = "before"
  * ```
  */
-type RemoveIdentifier<ClassName extends string, Identifier extends string> = ClassName extends `${Identifier}${infer RemovedClassString}` ? RemoveIdentifier<RemovedClassString, Identifier> : ClassName;
+type RemoveIdentifier<
+  ClassName extends string,
+  Identifier extends string,
+> = ClassName extends `${Identifier}${infer RemovedClassString}`
+  ? RemoveIdentifier<RemovedClassString, Identifier>
+  : ClassName;
 type FIRST_DEPTH_NEST_CONDITION = "";
 /**
  * @description combine nest condition at current style sheet
  */
-type CombineNestConditionAtCurrentStyleSheet<NestStyle, Identifier extends string, NestCondition extends string = FIRST_DEPTH_NEST_CONDITION> = {
-    [NestKey in keyof NestStyle]?: NestStyle[NestKey] extends string ? NestCondition extends FIRST_DEPTH_NEST_CONDITION ? NestStyle[NestKey] : `${RemoveIdentifier<NestCondition, Identifier | NEST_DIVIDER>}${NEST_DIVIDER}${NestStyle[NestKey]}` : never;
+type CombineNestConditionAtCurrentStyleSheet<
+  NestStyle,
+  Identifier extends string,
+  NestCondition extends string = FIRST_DEPTH_NEST_CONDITION,
+> = {
+  [NestKey in keyof NestStyle]?: NestStyle[NestKey] extends string
+    ? NestCondition extends FIRST_DEPTH_NEST_CONDITION
+      ? NestStyle[NestKey]
+      : `${RemoveIdentifier<NestCondition, Identifier | NEST_DIVIDER>}${NEST_DIVIDER}${NestStyle[NestKey]}`
+    : never;
 };
 /**
  * @description get deeply nested style sheet
  */
-type GetNestStyleSheet<AllNestConditions extends string, StyleSheet, Identifier extends string, ParentNestCondition extends string = FIRST_DEPTH_NEST_CONDITION> = {
-    [CurrentNestCondition in Exclude<AllNestConditions, ParentNestCondition>]?: GetNestStyleSheet<Exclude<AllNestConditions, CurrentNestCondition | ParentNestCondition>, StyleSheet, Identifier, `${ParentNestCondition}${NEST_DIVIDER}${RemoveIdentifier<CurrentNestCondition, Identifier>}`>;
-} & CombineNestConditionAtCurrentStyleSheet<StyleSheet, Identifier, ParentNestCondition>;
+type GetNestStyleSheet<
+  AllNestConditions extends string,
+  StyleSheet,
+  Identifier extends string,
+  ParentNestCondition extends string = FIRST_DEPTH_NEST_CONDITION,
+> = {
+  [CurrentNestCondition in Exclude<
+    AllNestConditions,
+    ParentNestCondition
+  >]?: GetNestStyleSheet<
+    Exclude<AllNestConditions, CurrentNestCondition | ParentNestCondition>,
+    StyleSheet,
+    Identifier,
+    `${ParentNestCondition}${NEST_DIVIDER}${RemoveIdentifier<CurrentNestCondition, Identifier>}`
+  >;
+} & CombineNestConditionAtCurrentStyleSheet<
+  StyleSheet,
+  Identifier,
+  ParentNestCondition
+>;
 /**
  * @description extended nest condition, `group` or `peer`
  */
@@ -3470,33 +5514,98 @@ type EXTENDED_CONDITION_DIVIDER = "-";
 /**
  * @description get deeply nested extended(`group`, `peer`) style sheet
  */
-type GetNestExtendedStyleSheet<AllNestConditions extends string, StyleSheet, ExtendedNestCondition extends TAILWIND_EXTENDED_NEST_CONDITION, Identifier extends string, ParentNestCondition extends string = FIRST_DEPTH_NEST_CONDITION> = ParentNestCondition extends FIRST_DEPTH_NEST_CONDITION ? {
-    [CurrentNestCondition in Exclude<AllNestConditions, ParentNestCondition>]?: GetNestStyleSheet<Exclude<AllNestConditions, CurrentNestCondition | ParentNestCondition>, StyleSheet, Identifier, `${ExtendedNestCondition}${EXTENDED_CONDITION_DIVIDER}${RemoveIdentifier<CurrentNestCondition, Identifier>}`>;
-} : {
-    [CurrentNestCondition in Exclude<AllNestConditions, ParentNestCondition>]?: GetNestStyleSheet<Exclude<AllNestConditions, CurrentNestCondition | ParentNestCondition>, StyleSheet, Identifier, `${ParentNestCondition}${NEST_DIVIDER}${RemoveIdentifier<CurrentNestCondition, Identifier>}`>;
-} & CombineNestConditionAtCurrentStyleSheet<StyleSheet, Identifier, ParentNestCondition>;
-
-type TailwindestExtendedNestStyleSheet<AllNestConditions extends string, Tailwind, ExtendedNestCondition extends TAILWIND_EXTENDED_NEST_CONDITION, Identifier extends string> = GetNestExtendedStyleSheet<AllNestConditions, Tailwind, ExtendedNestCondition, Identifier>;
-interface TailwindestGroup<AllNestConditions extends string, Tailwind, Identifier extends string> {
-    /**
-     *@description Styling based on parent state
-     *@description `group-{pseudo-class}`
-     *@see {@link https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-parent-state group}
-     */
-    group?: TailwindestExtendedNestStyleSheet<AllNestConditions, Tailwind, "group", Identifier>;
-}
-interface TailwindestPeer<AllNestConditions extends string, Tailwind, Identifier extends string> {
-    /**
-     *@description Styling based on sibling state
-     *@description `peer-{pseudo-class}`
-     *@see {@link https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-sibling-state peer}
-     */
-    peer?: TailwindestExtendedNestStyleSheet<AllNestConditions, Tailwind, "peer", Identifier>;
+type GetNestExtendedStyleSheet<
+  AllNestConditions extends string,
+  StyleSheet,
+  ExtendedNestCondition extends TAILWIND_EXTENDED_NEST_CONDITION,
+  Identifier extends string,
+  ParentNestCondition extends string = FIRST_DEPTH_NEST_CONDITION,
+> = ParentNestCondition extends FIRST_DEPTH_NEST_CONDITION
+  ? {
+      [CurrentNestCondition in Exclude<
+        AllNestConditions,
+        ParentNestCondition
+      >]?: GetNestStyleSheet<
+        Exclude<AllNestConditions, CurrentNestCondition | ParentNestCondition>,
+        StyleSheet,
+        Identifier,
+        `${ExtendedNestCondition}${EXTENDED_CONDITION_DIVIDER}${RemoveIdentifier<CurrentNestCondition, Identifier>}`
+      >;
+    }
+  : {
+      [CurrentNestCondition in Exclude<
+        AllNestConditions,
+        ParentNestCondition
+      >]?: GetNestStyleSheet<
+        Exclude<AllNestConditions, CurrentNestCondition | ParentNestCondition>,
+        StyleSheet,
+        Identifier,
+        `${ParentNestCondition}${NEST_DIVIDER}${RemoveIdentifier<CurrentNestCondition, Identifier>}`
+      >;
+    } & CombineNestConditionAtCurrentStyleSheet<
+      StyleSheet,
+      Identifier,
+      ParentNestCondition
+    >;
+
+type TailwindestExtendedNestStyleSheet<
+  AllNestConditions extends string,
+  Tailwind,
+  ExtendedNestCondition extends TAILWIND_EXTENDED_NEST_CONDITION,
+  Identifier extends string,
+> = GetNestExtendedStyleSheet<
+  AllNestConditions,
+  Tailwind,
+  ExtendedNestCondition,
+  Identifier
+>;
+interface TailwindestGroup<
+  AllNestConditions extends string,
+  Tailwind,
+  Identifier extends string,
+> {
+  /**
+   *@description Styling based on parent state
+   *@description `group-{pseudo-class}`
+   *@see {@link https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-parent-state group}
+   */
+  group?: TailwindestExtendedNestStyleSheet<
+    AllNestConditions,
+    Tailwind,
+    "group",
+    Identifier
+  >;
 }
-interface TailwindestExtendedNest<Nest extends string, Tailwind, Identifier extends string> extends TailwindestGroup<Nest, Tailwind, Identifier>, TailwindestPeer<Nest, Tailwind, Identifier> {
+interface TailwindestPeer<
+  AllNestConditions extends string,
+  Tailwind,
+  Identifier extends string,
+> {
+  /**
+   *@description Styling based on sibling state
+   *@description `peer-{pseudo-class}`
+   *@see {@link https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-sibling-state peer}
+   */
+  peer?: TailwindestExtendedNestStyleSheet<
+    AllNestConditions,
+    Tailwind,
+    "peer",
+    Identifier
+  >;
 }
-
-type TailwindestTypeSet<AllNestKeys extends string, Tailwind, Identifier extends string> = GetNestStyleSheet<AllNestKeys, Tailwind, Identifier> & TailwindestExtendedNest<AllNestKeys, Tailwind, Identifier>;
+interface TailwindestExtendedNest<
+  Nest extends string,
+  Tailwind,
+  Identifier extends string,
+> extends TailwindestGroup<Nest, Tailwind, Identifier>,
+    TailwindestPeer<Nest, Tailwind, Identifier> {}
+
+type TailwindestTypeSet<
+  AllNestKeys extends string,
+  Tailwind,
+  Identifier extends string,
+> = GetNestStyleSheet<AllNestKeys, Tailwind, Identifier> &
+  TailwindestExtendedNest<AllNestKeys, Tailwind, Identifier>;
 /**
  * @description Add custom property, defined at `tailwind.config.js`
  * @see {@link https://tailwindcss.com/docs/configuration tailwind configuration}
@@ -3528,16 +5637,35 @@ type TailwindestTypeSet<AllNestKeys extends string, Tailwind, Identifier extends
  * // ✅ Get Custom fontSize
  * type FontSize = Custom["fontSize"]
  */
-type Tailwindest<TailwindGlobal extends TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption, TailwindStyle extends TailwindStylePlugOption = TailwindDefaultStylePlug, TailwindNestConditionPrefix extends TailwindNestConditionIdentifierOption = {
+type Tailwindest<
+  TailwindGlobal extends
+    TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption,
+  TailwindStyle extends TailwindStylePlugOption = TailwindDefaultStylePlug,
+  TailwindNestConditionPrefix extends TailwindNestConditionIdentifierOption = {
     breakIdentifier: "@";
     pseudoClassIdentifier: ":";
     pseudoElementIdentifier: "::";
-}> = TailwindestTypeSet<TailwindestNestKeys<TailwindNestConditionPrefix, {
-    screens: TailwindGlobal["screens"];
-    aria: TailwindStyle["aria"];
-}>, TailwindPlugin<TailwindGlobal, TailwindStyle>, TailwindNestConditionPrefix["breakIdentifier"] | TailwindNestConditionPrefix["pseudoClassIdentifier"] | TailwindNestConditionPrefix["pseudoElementIdentifier"]>;
-
-type ShortTailwindestTypeSet<AllNestKeys extends string, Tailwind, Identifier extends string> = GetNestStyleSheet<AllNestKeys, Tailwind, Identifier> & TailwindestExtendedNest<AllNestKeys, Tailwind, Identifier>;
+  },
+> = TailwindestTypeSet<
+  TailwindestNestKeys<
+    TailwindNestConditionPrefix,
+    {
+      screens: TailwindGlobal["screens"];
+      aria: TailwindStyle["aria"];
+    }
+  >,
+  TailwindPlugin<TailwindGlobal, TailwindStyle>,
+  | TailwindNestConditionPrefix["breakIdentifier"]
+  | TailwindNestConditionPrefix["pseudoClassIdentifier"]
+  | TailwindNestConditionPrefix["pseudoElementIdentifier"]
+>;
+
+type ShortTailwindestTypeSet<
+  AllNestKeys extends string,
+  Tailwind,
+  Identifier extends string,
+> = GetNestStyleSheet<AllNestKeys, Tailwind, Identifier> &
+  TailwindestExtendedNest<AllNestKeys, Tailwind, Identifier>;
 /**
  * @deprecated **No longer supported**
  * @description Short-handed version of `Tailwindest`
@@ -3566,13 +5694,27 @@ type ShortTailwindestTypeSet<AllNestKeys extends string, Tailwind, Identifier ex
  * // ✅ Get Custom fontSize
  * type FontSize = Custom["fontSize"]
  */
-type ShortTailwindest<TailwindGlobal extends TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption, TailwindStyle extends TailwindStylePlugOption = TailwindDefaultStylePlug, TailwindNestConditionPrefix extends TailwindNestConditionIdentifierOption = {
+type ShortTailwindest<
+  TailwindGlobal extends
+    TailwindGlobalPlugOption = TailwindDefaultGlobalPlugOption,
+  TailwindStyle extends TailwindStylePlugOption = TailwindDefaultStylePlug,
+  TailwindNestConditionPrefix extends TailwindNestConditionIdentifierOption = {
     breakIdentifier: "$";
     pseudoClassIdentifier: "$";
     pseudoElementIdentifier: "$";
-}> = ShortTailwindestTypeSet<TailwindestNestKeys<TailwindNestConditionPrefix, {
-    screens: TailwindGlobal["screens"];
-    aria: TailwindStyle["aria"];
-}>, ShortTailwindPlugin<TailwindGlobal, TailwindStyle>, TailwindNestConditionPrefix["breakIdentifier"] | TailwindNestConditionPrefix["pseudoClassIdentifier"] | TailwindNestConditionPrefix["pseudoElementIdentifier"]>;
+  },
+> = ShortTailwindestTypeSet<
+  TailwindestNestKeys<
+    TailwindNestConditionPrefix,
+    {
+      screens: TailwindGlobal["screens"];
+      aria: TailwindStyle["aria"];
+    }
+  >,
+  ShortTailwindPlugin<TailwindGlobal, TailwindStyle>,
+  | TailwindNestConditionPrefix["breakIdentifier"]
+  | TailwindNestConditionPrefix["pseudoClassIdentifier"]
+  | TailwindNestConditionPrefix["pseudoElementIdentifier"]
+>;
 
 export { GetVariants, ShortTailwindest, Tailwindest, createTools };
